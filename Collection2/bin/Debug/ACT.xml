<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ACT</name>
    </assembly>
    <members>
        <member name="T:Agresso.ClientExtension.AppAttribute">
            <summary>
            Mark a class as a client application extension
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.AppAttribute.#ctor(System.String)">
            <summary>
            Create a new instance of the AppAttribute class
            </summary>
            <param name="sysSetUpCode">System setup code. Use * to run on all.</param>
        </member>
        <member name="M:Agresso.ClientExtension.AppAttribute.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of the AppAttribute class
            </summary>
            <param name="sysSetUpCode">System setup code. Use * to run on all.</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Agresso.ClientExtension.AppAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new instance of the AppAttribute class
            </summary>
            <param name="sysSetUpCode">System setup code. Use * to run on all.</param>
            <param name="description">Description</param>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:Agresso.ClientExtension.AppAttribute.SysSetUpCode">
            <summary>
            System setup code. Use * to run on all.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.AppAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ClientException">
            <summary>
            Client extension exception. All exceptions thrown by the ACT client environment is of this type. If not
            handled it will be translated to a C++ exception and forwarded to the Agresso client to handle. This may
            stop the client application.
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ClientException.machine">
            <summary>
            Machine name
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ClientException.dateInit">
            <summary>
            Date
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ClientException.threadId">
            <summary>
            Thread id
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ClientException.windowsIdent">
            <summary>
            Windows identity
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ClientException.errorNo">
            <summary>
            Error number
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ClientException.lineNo">
            <summary>
            Line number
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ClientException.errorFileName">
            <summary>
            Error file name
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ClientException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ClientException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ClientException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for deserialization of the exception class.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:Agresso.ClientExtension.ClientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override the GetObjectData method to serialize custom values.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:Agresso.ClientExtension.ClientException.InitException">
            <summary>
            
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ClientException.Date">
            <summary>
            Date and Time the exception was created.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ClientException.MachineName">
            <summary>
            Machine name where the exception occurred.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ClientException.ThreadIdentityName">
            <summary>
            Identity of the executing thread on which the exception was created.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ClientException.WindowsIdentityName">
            <summary>
            Windows identity under which the code was running.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ClientException.ErrorNumber">
            <summary>
            Error Number
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ClientException.LineNumber">
            <summary>
            Line number where the error occurred
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ClientException.FileName">
            <summary>
            File name where the error occurred
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.DynamicColumnType">
            <summary>
            Legal column types for dynamic Spread columns
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicColumnType.Text">
            <summary>
            Text edit column
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicColumnType.Integer">
            <summary>
            Integer edit column
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicColumnType.Counter">
            <summary>
            Large integer edit column
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicColumnType.Double">
            <summary>
            Double edit column
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicColumnType.Date">
            <summary>
            Date edit column
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicColumnType.CheckBox">
            <summary>
            Checkbox column
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicColumnType.ComboBox">
            <summary>
            Combo box
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.CharacterCasing">
            <summary>
            Character chasing values
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CharacterCasing.Lower">
            <summary>
            Lowercase
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CharacterCasing.NoCase">
            <summary>
            No case applied
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CharacterCasing.UpperCase">
            <summary>
            Uppercase
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CharacterCasing.InitialCap">
            <summary>
            First char capitalised
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IColumnBuilder">
            <summary>
            IColumnBuilder is a structure to hold information about a column to be added to a spread
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IColumnBuilder.GetInternalType">
            <summary>
            Used internally (get ColumnType as int)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IColumnBuilder.GetInternalCase">
            <summary>
            Used internally (get Case as int)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.ColumnType">
            <summary>
            Type of column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.Case">
            <summary>
            Character casing enforced in the column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.ID">
            <summary>
            Column name and identifier
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.Title">
            <summary>
            Column title
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.DefaultValue">
            <summary>
            Default value for the column's cells when adding new rows
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.MaxLength">
            <summary>
            Max length of data
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.DisplayLength">
            <summary>
            Length of the column in characters
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.HasSum">
            <summary>
            Set to true to add automatic sum for the column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.AllowEmpty">
            <summary>
            Allow empty values
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IColumnBuilder.Sql">
            <summary>
            Sql to fill comboboxes
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ColumnBuilder">
            <summary>
            Implementation of ICulombuilder to be used when added columns to spreads
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ColumnBuilder.#ctor(System.String)">
            <summary>
            Create a new column builder
            </summary>
            <param name="columnName">Name of column to add</param>
        </member>
        <member name="M:Agresso.ClientExtension.ColumnBuilder.#ctor(System.String,System.String,Agresso.ClientExtension.DynamicColumnType)">
            <summary>
            Create a new column builder
            </summary>
            <param name="columnName">Name of column</param>
            <param name="title">Title</param>
            <param name="type">Data type</param>
        </member>
        <member name="M:Agresso.ClientExtension.ColumnBuilder.#ctor(System.String,System.String,Agresso.ClientExtension.DynamicColumnType,System.Boolean)">
            <summary>
            Create a new column builder
            </summary>
            <param name="columnName">Name of column</param>
            <param name="title">Title</param>
            <param name="type">Data type</param>
            <param name="strictNaming">If true (default) the name will be prefixed with "act_", if false the given name is used</param>
        </member>
        <member name="M:Agresso.ClientExtension.ColumnBuilder.GetInternalType">
            <summary>
            Used internally (get ColumnType as int)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ColumnBuilder.GetInternalCase">
            <summary>
            Used internally (get Case as int)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.ColumnType">
            <summary>
            Type of column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.Case">
            <summary>
            Character casing enforced in the column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.ID">
            <summary>
            Column name and identifier
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.Title">
            <summary>
            Column title
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.DefaultValue">
            <summary>
            Default value for the column's cells when adding new rows
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.MaxLength">
            <summary>
            Max length of data
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.DisplayLength">
            <summary>
            Length of the column in characters
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.HasSum">
            <summary>
            Set to true to add automatic sum for the column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.AllowEmpty">
            <summary>
            Allow empty values
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ColumnBuilder.Sql">
            <summary>
            Sql to fill comboboxes
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.CustomViewAttribute">
            <summary>
            Mark a class as a client custom form extension. Custom forms are user controls. The attribute is needed to upload user controls
            in the ACT setup tables and be loaded through the ACT system.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.CustomViewAttribute.#ctor(System.String)">
            <summary>
            Create a new instance of the custom view attribute
            </summary>
            <param name="sysSetUpCode">System setup code. Use * to run on all.</param>
        </member>
        <member name="M:Agresso.ClientExtension.CustomViewAttribute.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of the custom view attribute
            </summary>
            <param name="sysSetUpCode">System setup code</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Agresso.ClientExtension.CustomViewAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new instance of the custom view attribute
            </summary>
            <param name="sysSetUpCode">System setup code</param>
            <param name="description">Description</param>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:Agresso.ClientExtension.CustomViewAttribute.SysSetUpCode">
            <summary>
            System setup code. Use * to run on all.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.CustomViewAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ClientEventArgs">
            <summary>
            Base class for all event arguments in ClientExtension
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.PostSaveEventArgs">
            <summary>
            Contains information about whether or not a transaction was aborted
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.PostSaveEventArgs.abortPostSave">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.PostSaveEventArgs.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="abort">True if the transaction was aborted, false if committed</param>
        </member>
        <member name="P:Agresso.ClientExtension.PostSaveEventArgs.Abort">
            <summary>
            True if the transaction was aborted, false if committed
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.CancelEventArgs">
            <summary>
            Event argument that lets the user set a boolean cancel value
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CancelEventArgs.cancelArg">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.CancelEventArgs.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="cancel">Default value for cancel</param>
        </member>
        <member name="P:Agresso.ClientExtension.CancelEventArgs.Cancel">
            <summary>
            Set if the calling object should abort or continue it's operation
            true  - abort
            false - continue
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ValuesUpdatedEventArgs">
            <summary>
            Event argument for values updated events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ValuesUpdatedEventArgs.clearedArg">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ValuesUpdatedEventArgs.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="cleared">Values cleared</param>
        </member>
        <member name="P:Agresso.ClientExtension.ValuesUpdatedEventArgs.Cleared">
            <summary>
            Whether the values has been cleared or not
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ResizeEventArgs">
            <summary>
            Event arguments for resize events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ResizeEventArgs.heightArg">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.ResizeEventArgs.widthArg">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ResizeEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:Agresso.ClientExtension.ResizeEventArgs.Height">
            <summary>
            The height
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ResizeEventArgs.Width">
            <summary>
            The width
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.FocusChangeEventArgs">
            <summary>
            Event arguments for focus change events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FocusChangeEventArgs.previousId">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FocusChangeEventArgs.nextId">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FocusChangeEventArgs.tabNum">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.FocusChangeEventArgs.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceId">ID of last field</param>
            <param name="destId">ID of new field</param>
        </member>
        <member name="M:Agresso.ClientExtension.FocusChangeEventArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="sourceId">ID of last field</param>
            <param name="destId">ID of new field</param>
            <param name="tabNumber">Tab number; will not be valid if tab number is -1</param>
        </member>
        <member name="P:Agresso.ClientExtension.FocusChangeEventArgs.SourceID">
            <summary>
            The ID of the source field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FocusChangeEventArgs.DestID">
            <summary>
            The ID of the destination field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FocusChangeEventArgs.TabNumber">
            <summary>
            Gives the next tab number, valid only if it is greater or equel zero!
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.FormEventArgs">
            <summary>
            Event arguments for form events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormEventArgs.theForm">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.FormEventArgs.#ctor(Agresso.ClientExtension.IForm)">
            <summary>
            
            </summary>
            <param name="form">Form</param>
        </member>
        <member name="P:Agresso.ClientExtension.FormEventArgs.Form">
            <summary>
            Interface to the form
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.TabSwitchEventArgs">
            <summary>
            Event arguments for tab switch events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.TabSwitchEventArgs.theOldIndex">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.TabSwitchEventArgs.theNewIndex">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.TabSwitchEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="oldIndex">Last tab index</param>
            <param name="newIndex">New tab index</param>
        </member>
        <member name="P:Agresso.ClientExtension.TabSwitchEventArgs.OldIndex">
            <summary>
            Index of tab loosing focus
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.TabSwitchEventArgs.NewIndex">
            <summary>
            index of tab getting focus
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.FlexiTabEventArgs">
            <summary>
            Event arguments for flexi tab events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FlexiTabEventArgs.theForm">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.FlexiTabEventArgs.#ctor(Agresso.ClientExtension.IFlexiForm)">
            <summary>
            
            </summary>
            <param name="form">Flexi tab</param>
        </member>
        <member name="P:Agresso.ClientExtension.FlexiTabEventArgs.FlexiTab">
            <summary>
            Interface to the flexi form / tab
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.FlexiSectionEventArgs">
            <summary>
            Event arguments for flexi section events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FlexiSectionEventArgs.theSectionName">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FlexiSectionEventArgs.theBrowser">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.FlexiSectionEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionName">Section name</param>
            <param name="browser">Is browser section</param>
        </member>
        <member name="P:Agresso.ClientExtension.FlexiSectionEventArgs.GroupName">
            <summary>
            The name of the flexi group contained in the
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FlexiSectionEventArgs.Browser">
            <summary>
            Is true if the section is a browser template
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.FlexiSectionSaveEventArgs">
            <summary>
            Event arguments for events during a flexi section save
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FlexiSectionSaveEventArgs.theSql">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FlexiSectionSaveEventArgs.isExistingTable">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.FlexiSectionSaveEventArgs.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sql">Suggested sql statement</param>
            <param name="existing">Existing table option</param>
            <param name="cancel">Cancel default value</param>
        </member>
        <member name="P:Agresso.ClientExtension.FlexiSectionSaveEventArgs.Sql">
            <summary>
            The sql statement that will be executed if the user does not cancel. 
            For flexi groups using existing tables, the query is parameterized and without where clause.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FlexiSectionSaveEventArgs.ExistingTable">
            <summary>
            True if this group is a join to an existing table and not a join to a dynamic flexi (afx-) table.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.FlexiSectionSaveRowEventArgs">
            <summary>
            Event arguments for events during a flexi section save of rows
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.FlexiSectionSaveRowEventArgs.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sql">Suggested sql</param>
            <param name="row">Row number</param>
            <param name="cancel">Cancel default value</param>
        </member>
        <member name="P:Agresso.ClientExtension.FlexiSectionSaveRowEventArgs.Sql">
            <summary>
            The sql query that will be executed if the user does not cancel.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FlexiSectionSaveRowEventArgs.RowNumber">
            <summary>
            Row number that is currently beeing saved
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.DocExternalViewerEventArgs">
            <summary>
            Event arguments for the external document view event
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.DocExternalViewerEventArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="docType">Document type</param>
            <param name="docId">Document id</param>
            <param name="page">Page number</param>
        </member>
        <member name="P:Agresso.ClientExtension.DocExternalViewerEventArgs.DocumentType">
            <summary>
            Type of document
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.DocExternalViewerEventArgs.DocumentId">
            <summary>
            ID of document
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.DocExternalViewerEventArgs.PageNumber">
            <summary>
            Page number to view
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.DocExternalSearchEventArgs">
            <summary>
            Event arguments for the external document search event
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.DocExternalSearchEventArgs.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="docType">Document type</param>
            <param name="keyIndexes">Keys</param>
        </member>
        <member name="P:Agresso.ClientExtension.DocExternalSearchEventArgs.KeyIndexes">
            <summary>
            Keys for the search
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.DocExternalSearchEventArgs.DocumentType">
            <summary>
            Type of document
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.CellValidateEventArgs">
            <summary>
            Event arguments for spread cell validation events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CellValidateEventArgs.rowNum">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CellValidateEventArgs.colNum">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.CellValidateEventArgs.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="row">Row number</param>
            <param name="col">Cell number</param>
            <param name="cancel">Cancel default value</param>
        </member>
        <member name="P:Agresso.ClientExtension.CellValidateEventArgs.RowNumber">
            <summary>
            Rownumber of cell
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.CellValidateEventArgs.ColNumber">
            <summary>
            Column number of cell
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.CellFocusChangeEventArgs">
            <summary>
            Event arguments for spread cell focus change events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CellFocusChangeEventArgs.sourceRowNum">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CellFocusChangeEventArgs.destRowNum">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CellFocusChangeEventArgs.sourceColNum">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.CellFocusChangeEventArgs.destColNum">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.CellFocusChangeEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sourceRow">Last row number</param>
            <param name="sourceCol">Last column number</param>
            <param name="destRow">New row number</param>
            <param name="destCol">New column number</param>
        </member>
        <member name="P:Agresso.ClientExtension.CellFocusChangeEventArgs.SourceRow">
            <summary>
            Rownumber of cell we are leaving
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.CellFocusChangeEventArgs.SourceCol">
            <summary>
            Column number of cell we are leaving
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.CellFocusChangeEventArgs.DestRow">
            <summary>
            Rownumber of destination cell
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.CellFocusChangeEventArgs.DestCol">
            <summary>
            Column number of destination cell
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuClickEventArgs">
            <summary>
            Event arguments for menu item click events
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.MenuClickEventArgs.#ctor(System.Boolean,System.Int64)">
            <summary>
            
            </summary>
            <param name="cancel">Cancel default value</param>
            <param name="id">Menu item id</param>
        </member>
        <member name="P:Agresso.ClientExtension.MenuClickEventArgs.ID">
            <summary>
            Menu item id
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuClickedEventArgs">
            <summary>
            Event arguments for menu item clicked events
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.MenuClickedEventArgs.ID">
            <summary>
            Menu item id
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.GenericEventArgs">
            <summary>
            Arguments to generic events
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericEventArgs.m_eventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericEventArgs.m_module">
            <summary>
            Module
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericEventArgs.m_param">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericEventArgs.m_retVal">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.GenericEventArgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.GenericEventArgs.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="eventName">Generic event name</param>
            <param name="module">Module</param>
        </member>
        <member name="M:Agresso.ClientExtension.GenericEventArgs.#ctor(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="eventName">Generic event name</param>
            <param name="module">Module</param>
            <param name="param">Generic event parameters</param>
        </member>
        <member name="M:Agresso.ClientExtension.GenericEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="eventName">Generic event name</param>
            <param name="module">Module</param>
            <param name="paramString">Generic event parameter</param>
        </member>
        <member name="P:Agresso.ClientExtension.GenericEventArgs.Parameters">
            <summary>
            Generic event parameters
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.GenericEventArgs.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.GenericEventArgs.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.GenericEventArgs.RetVal">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.CustomGenericEventArgs.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="eventName">Generic event name</param>
            <param name="module">Module</param>
        </member>
        <member name="M:Agresso.ClientExtension.CustomGenericEventArgs.#ctor(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="eventName">Generic event name</param>
            <param name="module">Module</param>
            <param name="param">Generic event parameters</param>
        </member>
        <member name="M:Agresso.ClientExtension.CustomGenericEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="eventName">Generic event name</param>
            <param name="module">Module</param>
            <param name="paramString">Generic event parameter</param>
        </member>
        <member name="T:Agresso.ClientExtension.ValidatedEventArgs">
            <summary>
            Arguments to the validated event.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ValidatedEventArgs.Valid">
            <summary>
            The result of the validation. Set cancel true to invalidate.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.CellValidatedEventArgs">
            <summary>
            Arguments to the cell validated event
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.CellValidatedEventArgs.Valid">
            <summary>
            The result of the validation. Set cancel true to invalidate.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.DynamicFieldType">
            <summary>
            Legal field types for dynamic fields
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldType.Edit">
            <summary>
            Edit field
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldType.Button">
            <summary>
            Button
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldType.CheckBox">
            <summary>
            Checkbox field
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldType.Label">
            <summary>
            Label / Text field
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldType.ComboBox">
            <summary>
            Combo box
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.DynamicFieldDataType">
            <summary>
            Legal data types for dynamic fields (only used for FieldType = Edit
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldDataType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldDataType.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldDataType.Integer">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldDataType.Counter">
            <summary>
            Large integer
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.DynamicFieldDataType.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IFieldBuilder">
            <summary>
            IFieldbuilder is a structure to hold information about a dynamic field to be added to a form
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldBuilder.GetInternalType">
            <summary>
            Used internally (FieldType as integer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldBuilder.GetInternalDataType">
            <summary>
            Used internally (DataType as integer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldBuilder.PlaceAfter(Agresso.ClientExtension.IField)">
            <summary>
            Set position so the field is placed after another field (also in tab sequence)
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldBuilder.PlaceAfter(Agresso.ClientExtension.IField,System.Boolean)">
            <summary>
            Set position so the field is placed after another field
            </summary>
            <param name="field"></param>
            <param name="tabAfter">Insert in tabsequence after the given field</param>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldBuilder.PlaceBelow(Agresso.ClientExtension.IField)">
            <summary>
            Set position so the field is placed below another field (not in tab sequence)
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldBuilder.PlaceBelow(Agresso.ClientExtension.IField,System.Boolean)">
            <summary>
            Set position so the field is placed below another field
            </summary>
            <param name="field"></param>
            <param name="tabAfter">Insert in tabsequence after the given field</param>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldBuilder.SetComboValidation(System.String,System.String,System.String)">
            <summary>
            Set validation sql statement. This is only appropriate for DynamicFieldType.ComboBox.
            </summary>
            <param name="sqlStatement">Sql that fills the combobox</param>
            <param name="codeColumn">Name of value / code column</param>
            <param name="descriptionColumn">Name of description column</param>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.Parent">
            <summary>
            IForm to place the field on
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.X">
            <summary>
            X Position
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.Y">
            <summary>
            Y Position
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.Width">
            <summary>
            Width of field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.Height">
            <summary>
            Height of field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.MaxLength">
            <summary>
            Number of characters
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.BlankLegal">
            <summary>
            Blank value is legal
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.ID">
            <summary>
            Identificator (must be unique per form)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.Title">
            <summary>
            Title of field, for Edit fields you must add a label.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.TabAfter">
            <summary>
            Insert in tab sequence after the field with given ID, if not specified (null) the field
            is placed last in the tabsequence.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.ControlID">
            <summary>
            Control resource id. If not set or set to below 0 it will automatically be assigned.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.Style">
            <summary>
            MFC Style for the field, don't use it if you don't mean it.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.FieldType">
            <summary>
            Type of field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.DataType">
            <summary>
            Datatype of field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.ValidationSql">
            <summary>
            Validation sql. This is only appropriate for DynamicFieldType.ComboBox. 
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.CodeColumnName">
            <summary>
            Name of value / code column. This is only appropriate for DynamicFieldType.ComboBox.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldBuilder.DescriptionColumnName">
            <summary>
            Description column name. This is only appropriate for DynamicFieldType.ComboBox.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.FieldBuilder">
            <summary>
            Fieldbuilder is a structure to hold information about a dynamic field to be added to a form
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FieldBuilder.FieldSpacing">
            <summary>
            Spacing between fields
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FieldBuilder.DefaultWidth">
            <summary>
            Default width (Agresso will assign it correctly)
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FieldBuilder.DefaultHeight">
            <summary>
            Default height (Agresso will assign it correctly)
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.#ctor(Agresso.ClientExtension.IForm,System.String)">
            <summary>
            Creates a new field builder with a given field id
            </summary>
            <param name="parent"></param>
            <param name="id"></param>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.#ctor(Agresso.ClientExtension.IForm,System.String,System.Boolean)">
            <summary>
            Creates a new field builder with a given field id
            </summary>
            <param name="parent"></param>
            <param name="id"></param>
            <param name="strictNaming">If true (default) the name will be prefixed with "act_", if false the given name is used</param>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.GetInternalType">
            <summary>
            Used internally (FieldType as integer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.GetInternalDataType">
            <summary>
            Used internally (DataType as integer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.PlaceAfter(Agresso.ClientExtension.IField)">
            <summary>
            Set position so the field is placed after another field
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.PlaceAfter(Agresso.ClientExtension.IField,System.Boolean)">
            <summary>
            Set position so the field is placed after another field
            </summary>
            <param name="field"></param>
            <param name="tabAfter">Insert in tabsequence after the given field</param>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.PlaceBelow(Agresso.ClientExtension.IField)">
            <summary>
            Set position so the field is placed below another field
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.PlaceBelow(Agresso.ClientExtension.IField,System.Boolean)">
            <summary>
            Set position so the field is placed below another field
            </summary>
            <param name="field"></param>
            <param name="tabAfter">Insert in tabsequence after the given field</param>
        </member>
        <member name="M:Agresso.ClientExtension.FieldBuilder.SetComboValidation(System.String,System.String,System.String)">
            <summary>
            Set validation sql statement. This is only appropriate for DynamicFieldType.ComboBox.
            </summary>
            <param name="sqlStatement">Sql that fills the combobox</param>
            <param name="codeColumn">Name of value / code column</param>
            <param name="descriptionColumn">Name of description column</param>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.Parent">
            <summary>
            IForm to place the field on
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.X">
            <summary>
            X Position
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.Y">
            <summary>
            Y Position
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.Width">
            <summary>
            Width of field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.Height">
            <summary>
            Height of field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.MaxLength">
            <summary>
            Number of characters
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.BlankLegal">
            <summary>
            Blank value is legal
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.ID">
            <summary>
            Identificator (must be unique per form)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.Title">
            <summary>
            Title of field, for Edit fields you must add a label.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.TabAfter">
            <summary>
            Insert in tab sequence after the field with given ID, if not specified the field
            is placed last in the tabsequence.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.ControlID">
            <summary>
            Control resource id. If not set or set to below 0 it will automatically be assigned.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.Style">
            <summary>
            MFC Style for the field, don't use it if you don't mean it.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.FieldType">
            <summary>
            Type of field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.DataType">
            <summary>
            Datatype of field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.ValidationSql">
            <summary>
            Description column name. This is only appropriate for DynamicFieldType.ComboBox.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.CodeColumnName">
            <summary>
            Name of value / code column. This is only appropriate for DynamicFieldType.ComboBox.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.FieldBuilder.DescriptionColumnName">
            <summary>
            Description column name. This is only appropriate for DynamicFieldType.ComboBox.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IFieldCollection">
            <summary>
            Collection of the IFields in a form
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldCollection.Add(Agresso.ClientExtension.IFieldBuilder)">
            <summary>
            Add a new field
            </summary>
            <param name="field">Definition of field to add</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFieldCollection.CreateField(System.String)">
            <summary>
            Create a new field, add it with Add
            </summary>
            <param name="fieldId">ID of the new field</param>
            <returns>IFieldBuilder interface</returns>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldCollection.Count">
            <summary>
            Number of fields
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldCollection.Item(System.String)">
            <summary>
            Get IField by string ID
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFieldCollection.Item(System.Int32)">
            <summary>
            Get IField by index
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ITabCollection">
            <summary>
            Collection of ITabForms
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabCollection.Count">
            <summary>
            Number of tabs
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabCollection.Item(System.Int32)">
            <summary>
            Get ITabForm at index tabNumber, null if tabNumber is not an ITabForm
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabCollection.Item(System.String)">
            <summary>
            Get an ITabForm or IFlexiForm subform contained in a tab. The tab name is the same
            as in the asysmenu. For example CU02_REL, HS01_ADDR or TS01_INV. Flexi tabs are named
            FLEXI_TAB_1, 2 and so on. Tabs not given a name by Agresso are named TAB_1, 2 and so on.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabCollection.Item(System.String,System.Boolean)">
            <summary>
            Get an ITabForm or IFlexi subform contained in a tab. 
            
            If parameter proxyName is false the tab name is the same as in the asysmenu. For example CU02_REL, HS01_ADDR or TS01_INV. 
            Flexi tabs are named FLEXI_TAB_1, 2 and so on. Tabs not given a name by Agresso are named TAB_1, 2 and so on.
            
            If parameter proxyName is true the tab name is the CProxyName displayed when you press ctrl + shift + h when
            the tab you want is active. For example CU02proxyCR012 for the address tab on customer master file. Developers
            familiar with VBA for the Agresso client will recognize this naming convention.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IFlexiTabCollection">
            <summary>
            Collection of IFlexiForms
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiTabCollection.Count">
            <summary>
            Number of flexi tabs
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiTabCollection.Item(System.Int32)">
            <summary>
            Get IFlexiForm at index (0 - based). Null if not found.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiTabCollection.Item(System.String)">
            <summary>
            Get an IFlexisection contained in an IFlexiTab in this form. Null if not found.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnGenericEventHandler">
            <summary>
            Handler for generic events
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnFormStartedEventHandler">
            <summary>
            Handler for form started event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnFormClosedEventHandler">
            <summary>
            Handler for form closed event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnFormStartingEventHandler">
            <summary>
            Handler for form starting event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnShutdownEventHandler">
            <summary>
            Handler for shut down event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnInitializedEventHandler">
            <summary>
            Handler for Initialized event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IApplication">
            <summary>
            IApplication is the interface to the running Agresso client application. From every IForm interface you
            can access the running application with IForm.Parent and the IForm.Application. 
            You can at all times also get the running application from ApplicationBase.Current.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.SetStatusBarText(System.String)">
            <summary>
            Set message that is shown in the status bar
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.GetTitle(System.Int32)">
            <summary>
            Get Agresso title (current language)
            </summary>
            <param name="index">Title number</param>
            <returns>Title</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.CallProject(System.String,System.String,System.String,System.String,System.Object[],System.Boolean@)">
            <summary>
            Call public methode in a project
            </summary>
            <param name="assemblyName">Name on the assembly</param>
            <param name="projectTypeName">Type name</param>
            <param name="callType">The calling type</param>
            <param name="methode">Methode to call</param>
            <param name="arg">Arguments</param>
            <param name="failed"></param>
            <returns>Return object</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.GetApplicationProjects">
            <summary>
            Get a read only collection of the IProjectApp instances that currently run in this application domain
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.GetFormProjects(Agresso.ClientExtension.IForm)">
            <summary>
            Get a read only collection of the IProjectForm instances that currently run on the given form in this application domain
            </summary>
            <param name="form">IForm instance</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.SetGlobalValue(System.String,System.String)">
            <summary>
            Set a global string value that is available for all ClientExtensions
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.GetGlobalValue(System.String)">
            <summary>
            Get a global string value that is available for all ClientExtensions
            </summary>
            <param name="key"></param>
            <returns>String value, null if key does not exist</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.ShowUrlInBrowser(System.String)">
            <summary>
            Start the Agresso web browser
            </summary>
            <param name="url">Web address to open</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.StartForm(System.String)">
            <summary>
            Start form by meny id
            </summary>
            <param name="menuId">Menu id (for example AR7)</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.StartForm(System.String,System.Boolean)">
            <summary>
            Start form by menu id
            </summary>
            <param name="menuId">Menu id</param>
            <param name="advanced">Form wingen screens open in advanced search mode</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.StartForm(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Start form without menu id
            </summary>
            <param name="form">Form id, for example CU02</param>
            <param name="funcId">Function id (for example 7)</param>
            <param name="title">Title of the new form</param>
            <param name="type">Type/dll (may be empty)</param>
            <param name="module">Module of the form (for example AR)</param>
            <param name="arg">Argument to the new form</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IApplication.MenuSearch(System.String)">
            <summary>
            Search for menu items. You can search on the title or form name / func name. You can also use wildcards like "CU%".
            The results are returned as a dataset with a table called "menuitems". The columns are "client", "title", "module", 
            "func_name", "menu_id" and "func_id". You can use these values to start a menu item.
            </summary>
            <param name="searchCriteria">Search text</param>
            <returns>Dataset describing the matching menu items</returns>
        </member>
        <member name="E:Agresso.ClientExtension.IApplication.OnFormStarting">
            <summary>
            Raised when a form is starting up, but before it is completely initialized
            The event is triggered by OnInitialUpdate in Agresso.
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IApplication.OnFormStarted">
            <summary>
            Raised when a form has started
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IApplication.OnFormClosed">
            <summary>
            Raised when a form is closing
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IApplication.OnShutdown">
            <summary>
            Raised when the application is shutting down
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IApplication.OnInitialized">
            <summary>
            Raised when the application has runned the initialized functionality 
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IApplication.OnGeneric">
            <summary>
            Genric event (Not yet in use)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IApplication.ActiveForm">
            <summary>
            The currently active form, null if none is active
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IApplication.Application">
            <summary>
            Current application (this)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IApplication.StartCommandArgument">
            <summary>
            Client file path
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IApplication.AgressoClientVersion">
            <summary>
            Release number (i.e. 5.5.)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IApplication.AgressoClientSPVersion">
            <summary>
            Service pack version
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IApplication.ClientCode">
            <summary>
            Logged in client code
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IApplication.ClientPath">
            <summary>
            Get the current file path of the client
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IApplication.ShutDownAtInitialize">
            <summary>
            Closes the client. Some restriction on this call; check documentation.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.SmartClientApplication">
            <summary>
            Entry point to the smart client application API
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.SmartClientApplication.Current">
            <summary>
            Current application
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IBrowserSection">
            <summary>
            Interface to browser templates used as sections in an IFlexiTab
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IBrowserSection.GroupName">
            <summary>
            Flexi field group
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IBrowserSection.Title">
            <summary>
            Title of section
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IBrowserSection.SectionNumber">
            <summary>
            Section number
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IBrowserSection.TemplateID">
            <summary>
            Browser template id
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnClickEventHandler">
            <summary>
            Handler for the click event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IButton">
            <summary>
            IButton is the interface to a button
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IField">
            <summary>
            IField is the general interface to fields in Agresso forms. All fields (buttons, editboxes etc)
            implement this interface. Unsupported types of fields like list boxes and tree controls are also IFields.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IField.Clear">
            <summary>
            Clears the control
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IField.SetFocus">
            <summary>
            Set focus to field
            </summary>
            <remarks>
            When used during validation, IField.OnValidate, Agresso might have overridden the name of the next field.
            Thus, IField.OnValidated is often a better place to force focus somewhere.
            </remarks>
        </member>
        <member name="E:Agresso.ClientExtension.IField.OnClear">
            <summary>
            Raised when the field contents is cleared
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IField.OnValidate">
            <summary>
            Raised when validating the field. For most field types this occurs when leaving the field.
            The event happens before Agresso has performed its validation and may be aborted by setting Cancel = true on the event argument.
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IField.OnValidated">
            <summary>
            Raised when the field has been validated, giving the opportunity to change the result. 
            The event happens after Agresso has performed its validation. The result of the validation can be found in Valid on the event argument.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.ID">
            <summary>
            Field id. For example "resource_id". A form can not have two fields with the same ID.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.Enabled">
            <summary>
            Is the field enabled (or gray)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.Visible">
            <summary>
            Is the field visible
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.Parent">
            <summary>
            The form this field in contained in
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.Value">
            <summary>
            Gets or sets the value of the field as a string.
            The different fields implement this differently.
            Some fields (like ISpread) does not do anything.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.Title">
            <summary>
            Gets or sets the text title of the field. The
            different fields implement this differently.
            Some fields (like ISpread) does not do anything.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.DataType">
            <summary>
            Get the datatype of the values of this field.
            Returns null if the field does not have a specific value
            and corresponding datatype (like ISpread).
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.X">
            <summary>
            X position of the field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.Y">
            <summary>
            Y position of the field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.Width">
            <summary>
            Width of the field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.Height">
            <summary>
            Height of the field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IField.AttributeId">
            <summary>
            If the field has an attribute id it retruns the value or else it returns an empty string. 
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IButton.Click">
            <summary>
            Programatically click the button
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IButton.Validate">
            <summary>
            Validate
            </summary>
            <returns></returns>
        </member>
        <member name="E:Agresso.ClientExtension.IButton.OnClick">
            <summary>
            Raised when the button is clicked
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IButton.Check">
            <summary>
            Check value:
            0x0003 Specifies the check state (radio buttons and check boxes only). A 0 indicates the button is unchecked. A 1 indicates the button is checked. A radio button is checked when it contains a bullet (•). A check box is checked when it contains an X. A 2 indicates the check state is indeterminate (three-state check boxes only). The state of a three-state check box is indeterminate when it contains a halftone pattern. 
            0x0004 Specifies the highlight state. A nonzero value indicates that the button is highlighted. A button is highlighted when the user clicks and holds the left mouse button. The highlighting is removed when the user releases the mouse button. 
            0x0008 Specifies the focus state. A nonzero value indicates that the button has the focus. 
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IButton.State">
            <summary>
            The state on the button:
            BST_UNCHECKED      0x0000 :  Button state is unchecked. 
            BST_CHECKED        0x0001 :  state is checked.
            BST_INDETERMINATE  0x0002 :  Button state is indeterminate (applies only if the button has the BS_3STATE or BS_AUTO3STATE style). 
            BST_PUSHED         0x0004
            BST_FOCUS          0x0008
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ICheckBox">
            <summary>
            ICheckBox is the interface to a checkbox. In addition to when leaving the checkbox the OnValidate is
            also fired when the checkbox is checked / unchecked
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ICheckBox.Validate">
            <summary>
            Force validation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.ClientExtension.ICheckBox.Checked">
            <summary>
            Get or set if the checkbox is checked
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICheckBox.LastLegal">
            <summary>
            Last legal value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICheckBox.SavedValue">
            <summary>
            Saved value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICheckBox.Validated">
            <summary>
            Get or set the flag that tells if this field is already validated.
            Validated fields will always validate to true by Agresso.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IClient">
            <summary>
            IClient is the interface to Agresso client information. You can access it from the IForm interface
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IClient.GetHiddenValue(System.String)">
            <summary>
            Hidden global Agresso values. One example is the logged in user with key "user_id". The values have session scope.
            This is the same as CommonExtension's CurrentContext.Session.GetProperty(string key);
            </summary>
            <param name="name">Value key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IClient.GetSystemParameter(System.String,System.String@)">
            <summary>
            Get system parameter value as set up for the client, or installation wide common parameter.
            This is the same as CommonExtension's CurrentContext.Session.GetSystemParameter(string parameterName...);
            </summary>
            <param name="parameterName">Name of the parameter</param>
            <param name="parameterValue">Returned parameter value</param>
            <returns>True if the parameter is found and is on</returns>
        </member>
        <member name="P:Agresso.ClientExtension.IClient.Name">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IClient.ID">
            <summary>
            Client id
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IClient.SysCode">
            <summary>
            System setup code
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ICombo">
            <summary>
            ICombo is an interface to a combo box control.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ICombo.Validate">
            <summary>
            Trigger validation on the combo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ICombo.AddValue(System.String)">
            <summary>
            Adds an extra value to the dropdown list. This is not supported if combo IsExtended.
            Throws a ClientException if the combo is extended. <see cref="P:Agresso.ClientExtension.ICombo.IsExtended"/>
            </summary>
            <param name="text">Text to add</param>
        </member>
        <member name="M:Agresso.ClientExtension.ICombo.RemoveValue(System.String)">
            <summary>
            Removed a value previously added with AddValue. You can not remove items put there by Agresso.
            This is not supported if combo IsExtended. Throws a ClientException if the combo is extended. <see cref="P:Agresso.ClientExtension.ICombo.IsExtended"/>
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.LastLegal">
            <summary>
            Last legal value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.SavedValue">
            <summary>
            Database value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.IsExtended">
            <summary>
            True if this is an extended combo box. Extended comboboxes have a <c>Code</c> and <c>Displayed</c> value.
            Agresso always uses the <c>Code</c> value when validating and saving the field. In case of an extended combo,
            the Value property will give you the Code, and the DiplayedValue the Displayed value.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.DisplayedValue">
            <summary>
            Will return the displayed value of the combo.
            Depending on the type of combo this will be the same as the Value property,
            or if this is an extended combo the Value property id the <c>Code</c> value.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.DisplayedDataType">
            <summary>
            Get the type of the displayed value. DataType will
            return the Type of the <c>Code</c> value. 
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.IntValue">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.CounterValue">
            <summary>
            Counter value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.DoubleValue">
            <summary>
            Double value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.DateValue">
            <summary>
            Date value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICombo.Validated">
            <summary>
            Get or set the flag that tells if this field is already validated.
            Validated fields will always validate to true by Agresso.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ICustomFormState">
            <summary>
            The callback interface given to initialization of Smart Client CustomForms / UserControls
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICustomFormState.Application">
            <summary>
            Current application
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ICustomFormState.Form">
            <summary>
            The IForm interface to the form that the user control is contained in.
            <remarks>These forms do not have fields, tabs etc. This means that the object does not support all of the IForm interface</remarks>
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IEdit">
            <summary>
            IEdit is the interface to edit box controls
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IEdit.Validate">
            <summary>
            Perform validation on the field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IEdit.SetMask(System.String)">
            <summary>
             Set a validation mask on a edit field. 
             Default mask:
            	Valid character to be used in this mask; ascii 0-127
            	
            	Special characteres: 9ANLUX
            	<table>
            		<tr><td>Character</td><td>Description</td><td>Expression</td></tr>
            		<tr><td>9</td><td>Numerics only</td><td>[0-9]</td></tr>
            		<tr><td>A</td><td>Alpa only</td><td>[a-zA-Z]</td></tr>
            		<tr><td>N</td><td>Alpanumeric only</td><td>[a-zA-Z0-9]</td></tr>
            		<tr><td>L</td><td>Force lower case</td><td>lower</td></tr>
            		<tr><td>U</td><td>Force upper case</td><td>upper</td></tr>
            		<tr><td>X</td><td>Any ASCII character (0-127)</td><td>ascii table 0-127</td></tr>
            	</table>
            	
            	Default escape character: '/'
            	Makes it possible to use the special characters above
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IEdit.SetMask(System.String,System.Char)">
            <summary>
             Set a validation mask on a edit field. 
             Default mask:
            	Valid character to be used in this mask; ascii 0-127
            	
            	Special characteres: 9ANLUX
            	<table>
            		<tr><td>Character</td><td>Description</td><td>Expression</td></tr>
            		<tr><td>9</td><td>Numerics only</td><td>[0-9]</td></tr>
            		<tr><td>A</td><td>Alpa only</td><td>[a-zA-Z]</td></tr>
            		<tr><td>N</td><td>Alpanumeric only</td><td>[a-zA-Z0-9]</td></tr>
            		<tr><td>L</td><td>Force lower case</td><td>lower</td></tr>
            		<tr><td>U</td><td>Force upper case</td><td>upper</td></tr>
            		<tr><td>X</td><td>Any ASCII character (0-127)</td><td>ascii table 0-127</td></tr>
            	</table>
            	
            	Default escape character: '/'
            	Makes it possible to use the special characters above
            </summary>
            <param name="mask">Mask to apply</param>
            <param name="escapeChar">Default escape char '/'</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IEdit.GetMask">
            <summary>
            Get current mask on the field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IEdit.RemoveMask">
            <summary>
            Remove mask on the field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IEdit.DisplayedValue">
            <summary>
            The value displayed in the field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IEdit.LastLegal">
            <summary>
            The last legal value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IEdit.SavedValue">
            <summary>
            The database value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IEdit.DoubleValue">
            <summary>
            Get or set the value of the field as double
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IEdit.CounterValue">
            <summary>
            Get or set the value of the field as a counter / Int64
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IEdit.DateValue">
            <summary>
            Get or set the value of the field as a date
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IEdit.IntValue">
            <summary>
            Get or set the value of the field as an integer
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IEdit.Validated">
            <summary>
            Get or set the flag that tells if this field is already validated.
            Validated fields will always validate to true by Agresso.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnValidateEventHandler">
            <summary>
            Handler for the validate event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnValidatedEventHandler">
            <summary>
            Handler for the validate event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.ClientExtension.IFlexiField">
            <summary>
            Interface to flexi fields. Get the real IField with Field, or the ISpread with Section.Spread.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiField.Validate">
            <summary>
            Perform validation as defined in the flexi field setup
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.ID">
            <summary>
            Flexi field ID
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.Name">
            <summary>
            Flexi field name (DB Column name)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.FieldName">
            <summary>
            IField ID
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.AttributeID">
            <summary>
            Defined attribute id
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.PeriodType">
            <summary>
            Defined period type
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.DefaultValue">
            <summary>
            Defined default value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.ReadOnly">
            <summary>
            Defined to be read only
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.BlankAllowed">
            <summary>
            Blank values allowed
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.Hidden">
            <summary>
            Defined to be hidden
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsPeriod">
            <summary>
            Period field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsText">
            <summary>
            Text field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsAttribute">
            <summary>
            Attribute field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsInteger">
            <summary>
            Integer field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsCounter">
            <summary>
            Counter (large integer) field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsFloat">
            <summary>
            Float / double field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsMoney">
            <summary>
            Currency field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsDate">
            <summary>
            Date field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.IsCheckBox">
            <summary>
            Boolean field
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.Field">
            <summary>
            The field itself
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiField.Section">
            <summary>
            My flexi section
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnFlexiSectionInitializedEventHandler">
            <summary>
            Handler for the section initialized event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IFlexiForm">
            <summary>
            Interface to talk with flexi tabs
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ITabForm">
            <summary>
            Represents a form that can appear as a Tab in another form
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IForm">
            <summary>
            IForm is the interface to all forms in Agresso. This means forms with or without tabs, as well as
            the tabs and flexi tabs themselves. Tabs and flexi tabs have specialized interfaces.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetHiddenValue(System.String)">
            <summary>
            Hidden global Agresso values. One example is the logged in user with key "user_id"
            </summary>
            <param name="name">Value key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetField(System.String)">
            <summary>
            Get IField in the form by string ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetField(System.Int32)">
            <summary>
            Get IField in the form by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.SetFocus(System.String)">
            <summary>
            Set focus to specific field. 
            <remarks>
            When used during validation, IField.OnValidate, Agresso might have overridden the name of the next field.
            Thus, IField.OnValidated is often a better place to force focus somewhere.
            </remarks>
            </summary>
            <param name="fieldName">Name id of field.</param>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.ValidateField(System.String)">
            <summary>
            Validate a field. Both the field's validation code, and the form's validation code for the field is called.
            Do not call inside an eventhandler for the same field's validation without a recursive guard!
            </summary>
            <param name="fieldName">Name id of field</param>
            <returns>True if validation was performed and successful, false if the validation failed or the field does not exist</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.SetStringValue(System.String,System.String)">
            <summary>
            Set a string property that can be shared among all bespoke code on this form (including VBA projects)
            </summary>
            <param name="xmlTagName">Property name</param>
            <param name="setValue">Value to set</param>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetStringValue(System.String)">
            <summary>
            Get a string property that is shared among all bespoke code on this form (including VBA projects)
            </summary>
            <param name="xmlTagName">Property name</param>
            <returns>Value</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetArgument(System.String)">
            <summary>
            Get arguments that this screen was started with, by parameter names
            Example: <code>GetArgument("FuncName")</code>
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.Clear">
            <summary>
            Clears the forms
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.Save">
            <summary>
            Saves the form
            </summary>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.Validate">
            <summary>
            Validate single fields in the form
            </summary>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.Destroy">
            <summary>
            Close the form
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.ExecuteMenu(System.String)">
            <summary>
            
            </summary>
            <param name="cmdName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.MoveFocusNext">
            <summary>
            Move focus to next control
            </summary>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetTitle(System.Int32)">
            <summary>
            Get Agresso title (current language)
            </summary>
            <param name="index">Title number</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.SetTabEnabled(System.Int32,System.Boolean)">
            <summary>
            Enable or disable a tab
            </summary>
            <param name="tabNumber">Number of tab</param>
            <param name="setEnabled">Enable or not</param>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.TabEnabled(System.Int32)">
            <summary>
            See if a tab is enabled or not
            </summary>
            <param name="tabNumber">Number of tab</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetTab(System.Int32)">
            <summary>
            Get an ITabForm or IFlexiForm subform contained in a tab
            </summary>
            <param name="tabNumber">Number of tab</param>
            <returns>ITabForm subform object, null if not found</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetTab(System.String)">
            <summary>
            Get an ITabForm or IFlexiForm subform contained in a tab. The tab name is the same
            as in the asysmenu. For example CU02_REL, HS01_ADDR or TS01_INV. Flexi tabs are named
            FLEXI_TAB_1, 2 and so on. Tabs not given a name by Agresso are named TAB_1, 2 and so on.
            </summary>
            <param name="tabName">Friendly tab name</param>
            <returns>ITabForm or null if not found</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetTab(System.String,System.Boolean)">
            <summary>
            Get an ITabForm or IFlexi subform contained in a tab. 
            
            If parameter proxyName is false the tab name is the same as in the asysmenu. For example CU02_REL, HS01_ADDR or TS01_INV. 
            Flexi tabs are named FLEXI_TAB_1, 2 and so on. Tabs not given a name by Agresso are named TAB_1, 2 and so on.
            
            If parameter proxyName is true the tab name is the CProxyName displayed when you press ctrl + shift + h when
            the tab you want is active. For example CU02proxyCR012 for the address tab on customer master file. Developers
            familiar with VBA for the Agresso client will recognize this naming convention.
            </summary>
            <param name="tabName">Friendly or proxy tab name</param>
            <param name="proxyName">If name given is a friendly (asysmenu) or proxy (VBA) tab name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.IsTab(System.Int32)">
            <summary>
            Get if a tabnumber has an ITabForm or IFlexiForm subform
            </summary>
            <param name="tabNumber">Number of tab</param>
            <returns>True if subform exist</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetFlexiTab(System.Int32)">
            <summary>
            Get flexi tab at number. The first flexi tab has number 0, the next 1 etc.
            </summary>
            <param name="flexiTabNumber">Number of flexitab (0 - based)</param>
            <returns>IFlexiForm subform, null if not found</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetFlexiTabWithSection(System.String)">
            <summary>
            Get flexi tab containing a specific flexi group definition
            </summary>
            <param name="sectionName">Flexi group name</param>
            <returns>IFlexiForm containing the section, null if not found</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetDataSet">
            <summary>
            Return a DataSet of all the values in this screen and it's tabs (if any).
            This is for screen scraping purposes.
            The DataSet will have one table with the ID of the form, containing all the single field values except titles.
            The individual field's values are put into a column named with the ID of the field.
            Any spreads will be added to the DataSet as a table with the ID of the spread. For example CU02:cu02tbl5.
            Tabs will get one table for single fields named by the tab number. For example CU02_tab_2
            Example spread in tab CU02_tab_2:addresstbl1
            </summary>
            <returns>DataSet with values</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.CreateField(System.String)">
            <summary>
            Create a new field on this form through a field builder
            </summary>
            <param name="id">Unique identifier</param>
            <returns>IFieldBuilder interface</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.CreateField">
            <summary>
            Create a new field on this form through a fieldbuilder. The field is automatically initialized with a unique id.
            </summary>
            <returns>IFieldBuilder interface</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.AddField(Agresso.ClientExtension.IFieldBuilder)">
            <summary>
            Add a field to this form
            </summary>
            <param name="field">field description</param>
            <returns>Added field</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GenericMethod(System.String,System.String)">
            <summary>
            Generic method, only aviable in specific forms and makes it possible
            to add specific methods later. (Not yet in use).
            </summary>
            <param name="method">Specific name. Makes it possible to distinguish between different generic methods</param>
            <param name="param">String parameter</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GenericMethod(System.String,System.Object[])">
            <summary>
            Generic method, only aviable in specific forms and makes it possible
            to add specific methods later. (Not yet in use).
            </summary>
            <param name="method">Specific name. Makes it possible to distinguish between different generic methods</param>
            <param name="param">Object parameters</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.StartNewForm(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Start form without menu id
            </summary>
            <param name="form">Form id, for example CU02</param>
            <param name="funcId">Function id (for example 7)</param>
            <param name="title">Title of the new form</param>
            <param name="type">Type/dll (may be empty)</param>
            <param name="module">Module of the form (for example AR)</param>
            <param name="arg">Argument to the new form</param>
            <returns>The IForm or null</returns>
            <example>
            <code>
            IForm iNewForm = iForm.StartNewForm(.....);
            if(iNewForm != null)
            {
            	...
            	//This will be true since it was started from this form
            	if(iNewForm.CallingForm == iForm)
            	{
            		...
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.CallTheGenericEvent(System.Object,Agresso.ClientExtension.CustomGenericEventArgs)">
            <summary>
            Raises the OnGenericEvent on the form. Can be used to communicate with other ACT projects.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns>
            <list type="ReturnValues">
            	<listheader>
            	    <item>retvalue</item>
            	    <item>description</item>
            	</listheader>
            	<item>-2</item>
            	<item>No listeners</item>
            	<item>-1</item>
            	<item>No calls made</item>
            	<item>0</item>
            	<item>Can not call the event</item>
            	<item>1</item>
            	<item>Default domain</item>
            	<item>2</item>
            	<item>All domains</item>
            	<item>3</item>
            	<item>Only current domain</item>
            </list>
            </returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetSubForm(System.String)">
            <summary>
            Get a specific splitter or other forms belonging to the form, but not as tabs.
            </summary>
            <example>
            An example of an IForm with a splitter is the document archive form, DS01.
            </example>
            <param name="name">ID on the form (for example "DS02")</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetSubForm(System.Int32)">
            <summary>
            Get a specific splitter or other forms belonging to the form, but not as tabs.
            </summary>
            <example>
            An example of an IForm with a splitter is the document archive form, DS01.
            </example>
            <param name="index">Index (0 based)</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.String@)">
            <summary>
            Get the string value of a field without making or using an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <returns>True if value was retrived</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.String@,System.String)">
            <summary>
            Get the string value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <param name="extraname">Extra field identificator. Generic ID name, section name and future use</param>
            <returns>true if a value was retrieved</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.Int64@)">
            <summary>
            Get the numeric value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <returns>True if value was retrived</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.Int64@,System.String)">
            <summary>
            Get the numeric value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <param name="extraname">Extra field identificator. Generic ID name, section name and future use</param>
            <returns>true if a value was retrieved</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.Double@)">
            <summary>
            Get the double value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <returns>True if value was retrived</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.Double@,System.String)">
            <summary>
            Get the double value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <param name="extraname">Extra field identificator. Generic ID name, section name and future use</param>
            <returns>true if a value was retrieved</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.Boolean@)">
            <summary>
            Get the boolean value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <returns>True if value was retrived</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.Boolean@,System.String)">
            <summary>
            Get the boolean value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <param name="extraname">Extra field identificator. Generic ID name, section name and future use</param>
            <returns>true if a value was retrieved</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.DateTime@)">
            <summary>
            Get the DateTime value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <returns>True if value was retrived</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetValue(System.String,System.DateTime@,System.String)">
            <summary>
            Get the DateTime value of a field without making or using  an IField instance.
            GetValue can be used to get values from a TopGen form running in the Smart Client without
            using TopGenExtension. This way you can have interaction between different FormTypes.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <param name="extraname">Extra field identificator. Generic ID name, section name and future use</param>
            <returns>True if a value was retrieved</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetDataType(System.String,System.String)">
            <summary>
            Get a field's datatype on of a field without making an IField instance.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="extraname">Extra field identificator. Generic ID name, section name and future use</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetAttributeId(System.String)">
            <summary>
            Gets the attribute value on a field without instantiate the field object
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetTabName">
            <summary>
            Get the name of the active tab, or if this is a tab itself the name of this tab
            </summary>
            <returns>Form with tabs: returns the TabName of the active tab, or string empty if it doesn't exsist. 
            When the form is inself a tab (ITabForm) the TabName property is returned</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.GetTabName(System.Int32)">
            <summary>
            Get the name of the tab at the specified index.
            </summary>
            <param name="tabIndex">Index of tab</param>
            <returns>Form with tabs: returns the TabName of tab at the given index. Ff there is no tab at the index, or no tabs at all String.Empty is returned.</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IForm.AddTab(System.String,System.String,System.String)">
            <summary>
            Adds a new form as a tab to the existing form
            </summary>
            <param name="assembly">Assembly name</param>
            <param name="type">Type name</param>
            <param name="title">Tab title</param>
            <returns>A <see cref="T:Agresso.ClientExtension.ITabForm"/></returns>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnClear">
            <summary>
            Raised when the form is cleared
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnDestroy">
            <summary>
            Raised when the form is closed
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnSave">
            <summary>
            Raised before the transaction is started, when the save button is pressed
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnFieldFocusChange">
            <summary>
            Raised when the focus changes from one field to another
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnGotFocus">
            <summary>
            Raised when this form recieves focus
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnInitialize">
            <summary>
            Raised when the form is initializing (OnInitialUpdate)
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnPostInitialize">
            <summary>
            Raised after initialization
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnLostFocus">
            <summary>
            Raised when this form looses focus
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnResize">
            <summary>
            Raised when this form is resized
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnPostSave">
            <summary>
            Raised after the transaction was aborted or committed
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnRealSave">
            <summary>
            Raised just after the transaction is started, before Agresso has saved anything
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnEndSave">
            <summary>
            Raised just before the transaction is committed, after Agresso has done it's things
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnTabSwitching">
            <summary>
            Raised when switching tabs
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnDocExternalViewer">
            <summary>
            Raised from the document handling screen when asked to view a document
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnDocExternalSearch">
            <summary>
            Raised from the document handling screen when asked to search a document
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnFlexiTabAdded">
            <summary>
            Raisen when a flexi tab is added to this form
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IForm.OnGeneric">
            <summary>
            Genric event. (Not yet in use). 
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.HasTabs">
            <summary>
            Do this form have tabs. <seealso cref="P:Agresso.ClientExtension.IForm.Tabs"/>
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.HasFlexiTabs">
            <summary>
            Do this form have flexi tabs. <seealso cref="P:Agresso.ClientExtension.IForm.FlexiTabs"/>
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.IsTabForm">
            <summary>
            Is this a tab form object
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.IsFlexiForm">
            <summary>
            Is this a flexi form object
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.ID">
            <summary>
            The ID and function name og this form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.MenuId">
            <summary>
            The menu id this form was started from
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Menu">
            <summary>
            Get interface to the menu of the application as well as the context tools menu for this form.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.HelpId">
            <summary>
            The help id of the form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Parent">
            <summary>
            The application this form was started in
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Application">
            <summary>
            The application this form was started in
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Client">
            <summary>
            Get the client information for the company that the form was started from
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.ClientCode">
            <summary>
            Client code that the screen is working with.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.FieldCount">
            <summary>
            Number of fields in this form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Fields">
            <summary>
            Collection of fields in this form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.ActiveField">
            <summary>
            Get the active field (the field having focus)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Parameter">
            <summary>
            Get the parameter that this form was started with
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Height">
            <summary>
            Get the height of the form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Width">
            <summary>
            Get the width of the form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.ActiveTabNumber">
            <summary>
            Get or set the active tab number (0 based)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.TabCount">
            <summary>
            Get the number of tabs on this form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.FlexiTabCount">
            <summary>
            Get the number of flexi tabs on this form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Tabs">
            <summary>
            The collection of proxytabs in this form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.FlexiTabs">
            <summary>
            The collection of flexitabs in this form
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.CallingForm">
            <summary>
            Gets the form that started this form. Returns null if the form was started from the menu.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.IsWindowForm">
            <summary>
            True if the IForm can be casted to IWindowForm and exposes the HWND handle 
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.NumberOfSubForms">
            <summary>
            Number of subforms
            </summary>
            <example>
            An example of an IForm with a splitter is the document archive form, DS01.
            </example>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.SubForms">
            <summary>
            Get a collection of subforms belonging to the form
            </summary>
            <example>
            An example of an IForm with a splitter is the document archive form, DS01.
            </example>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.Handle">
            <summary>
            The windows handle (HWND) of the form. <seealso cref="T:Agresso.ClientExtension.IWindowForm"/>.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.FormType">
            <summary>
            Returns the type of view this is.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.IntFormType">
            <summary>
            Returns the type of view this is as an integer (Internal)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.BrowserMode">
            <summary>
            True if the form is in browser mode. The property FormType is then FormType.AgressoBrowser as well.
            </summary>
            <remarks>Note that an IForm has the same ID in browser mode and normal mode. I.e. CU02
            for the customer master file. An IProjectForm has to be attributed with ID/BROWSER if you
            want it to be loaded in Browser mode. For example [View("CU02/BROWSER", "*", "*", "Browser project"]
            on CU02 in browser mode. Without the BROWSER switch form projects will not be loaded in browser mode
            </remarks>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.AliveAndKicking">
            <summary>
            Can be used if you have a reference to a form, but do not know if it is valid. This can happen whenever you
            reference an IForm from another IForm for example CallingForm, a form started by you through StartForm or more rarely Tabs or 
            SubViews in an IForm that has been removed or replaced by the form dynamics.
            </summary>
            <returns>Less than 0 not alive, equals 0 unstable and greater than 0 stable!</returns>
        </member>
        <member name="P:Agresso.ClientExtension.IForm.ActionGuid">
            <summary>
            Gets the actionGuid 
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabForm.InTab">
            <summary>
            True if this is a tab in another form, and thus has a ParentForm
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabForm.PartOfParent">
            <summary>
            True if this tab is a part of the parent form. This means that it's Fields collection are handled by
            and the same as it's parent's.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabForm.ParentForm">
            <summary>
            The parent form, null if IsTab is false
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabForm.TabName">
            <summary>
            This tab's name. If the InTab property is false, it is the same as IForm.ID.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ITabForm.TabIndex">
            <summary>
            The index of this tab. If the IntTab property is false the TabIndex is -1.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiForm.HasFlexiSection(System.String)">
            <summary>
            Ask if there exists a section with the given group name
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiForm.HasBrowserSection(System.String)">
            <summary>
            Ask if there exists a section with the given group name
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiForm.GetFlexiSection(System.Int32)">
            <summary>
            Get flexi section at given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiForm.GetFlexiSection(System.String)">
            <summary>
            Get IFlexiSection with the given group name
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiForm.GetBrowserSection(System.Int32)">
            <summary>
            Get browser section at given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiForm.GetBrowserSection(System.String)">
            <summary>
            Get the IBrowserSection with the given group name
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="E:Agresso.ClientExtension.IFlexiForm.OnFlexiSectionInitialized">
            <summary>
            Event raised when a defined flexi section is added to the tab and initialized.
            This can happen after OnPostInitialize on the form that hold the tabs.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiForm.IsFlexiView">
            <summary>
            True if this is a flexi view (!IsBrowserView)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiForm.IsBrowserView">
            <summary>
            True if this is a browser view (!IsFlexiView)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiForm.SectionCount">
            <summary>
            Number of flexi / browser sections on tab
            Note that not all flexi sections have been added before the OnPostInitialize event.
            You can use the OnFlexiSectionInitialized event to run code as sections are added.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnFlexiSectionSaveEventHandler">
            <summary>
            Handler for the flexi section save event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnFlexiSectionSaveRowEventHandler">
            <summary>
            Handler for the flexi section row save event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IFlexiSection">
            <summary>
            Interface to flexi groups used as sections in an IFlexiTab 
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiSection.GetField(System.Int32)">
            <summary>
            Get flexi field definition
            </summary>
            <param name="index">Sequence number</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IFlexiSection.GetField(System.String)">
            <summary>
            Get flexi field definition
            </summary>
            <param name="name">Field name</param>
            <returns></returns>
        </member>
        <member name="E:Agresso.ClientExtension.IFlexiSection.OnFlexiSectionSave">
            <summary>
            Event called before executing save of a flexi single field section
            Return cancel = true if you are saving it yourself and / or 
            do not want Agresso to save it.
             
            This event will be called even if the flexi group is of type <c>Existing Table</c>
            (existingTable = true). If existing table the sql will be a suggestion
            without WHERE clause and with placeholders for values (@field_name).
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IFlexiSection.OnFlexiSectionSaveRow">
            <summary>
            Event called befor executing save of a row in a flexi table section
            Return cancel = true if you are saving it yourself and / or
            do not want Agresso to save it. 
            
            This event will not be called when the flexi group is of type <c>Existing Table</c>
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.GroupName">
            <summary>
            Flexi field group
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.Title">
            <summary>
            Section title
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.TableName">
            <summary>
            Database tablename
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.AttributeTableName">
            <summary>
            Linked to tablename
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.TableFormat">
            <summary>
            True if the section is rendered as a spread. The Spread property will give you the ISpread.
            <seealso cref="P:Agresso.ClientExtension.IFlexiSection.Spread"/>
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.ExistingTable">
            <summary>
            True if the information in this section is gathered from an existing non-flexi table. Possibly
            another system than Agresso. Existing table sections are read only, but customisation can be
            written to support editing and saving.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.Updating">
            <summary>
            True if the information in the section is being updated (fetched from the database). Information only.
            This can help if you are writing an external table customisation.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.SectionNumber">
            <summary>
            Number of the section in the sequence of sections on this IFlexiForm
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.FieldCount">
            <summary>
            Number of fields in this section
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.FlexiTab">
            <summary>
            The parent IFlexiForm tab. <seealso cref="T:Agresso.ClientExtension.IFlexiForm"/>
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IFlexiSection.Spread">
            <summary>
            The spread of the section. If the property TableFormat is false this will be null. <seealso cref="T:Agresso.ClientExtension.ISpread"/>
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnClearEventHandler">
            <summary>
            Handler for the clear event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnDestroyEventHandler">
            <summary>
            Handler for the destroy event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnSaveEventHandler">
            <summary>
            Handler for the save event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnFieldFocusChangeEventHandler">
            <summary>
            Handler for the focus change event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnGotFocusEventHandler">
            <summary>
            Handler for the got focus event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnLostFocusEventHandler">
            <summary>
            Handler for the lost focus event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnResizeEventHandler">
            <summary>
            Handler for the resize event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnPostSaveEventHandler">
            <summary>
            Handler for the post save event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnRealSaveEventHandler">
            <summary>
            Handler for the real save event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnEndSaveEventHandler">
            <summary>
            Handler for the end save event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnTabSwitchingEventHandler">
            <summary>
            Handler for the tab switch event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnInitializeEventHandler">
            <summary>
            Handler for the initialize event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnPostInitializeEventHandler">
            <summary>
            Handler for the post initialize event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnDocExternalViewerEventHandler">
            <summary>
            Handler for the external document view event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnDocExternalSearchEventHandler">
            <summary>
            Handler for the external document search event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnFlexiTabAddedEventHandler">
            <summary>
            Handler for the flexi tab added event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.FormType">
            <summary>
            Types of forms in the Agresso smart client
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.Regular">
            <summary>
            Regular form
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.TopGen">
            <summary>
            TopGen form running in the WinForm renderer
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.Custom">
            <summary>
            Custom form
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.WinGen">
            <summary>
            WinGen Query Form
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.TabForm">
            <summary>
            Regular form containing tabs
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.Tab">
            <summary>
            Tab
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.FlexiTab">
            <summary>
            Flexi tab
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.WebBrowser">
            <summary>
            Web browser
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.AgressoBrowser">
            <summary>
            Agresso Query Browser
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.FormType.Unknown">
            <summary>
            Other 
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IWindowForm">
            <summary>
            An IWindowForm supports methods from the System.Windows.Forms namespace. Specifically it implements the IWin32Window interface
            that lets you use it as a parent for modal dialogs. In addition it supports convenience methods for modal messageboxes.
            
            <remarks>
            An IForm may be an IWindowForm. If IForm.IsWindowForm is true you can safely cast the IForm to IWindowForm.
            IForm does not implement the IWin32Window interface because that would force clients to reference the System.Windows.Forms assembly.
            In addition we might not be able to support the interface on all types of forms for all types of bespoke clients
            </remarks>
            
            <code>
            //This shows how to use an IForm as a modal parent of a custom System.Windows.Forms
            IForm form = ...;
            
            //Cast the IForm to IWindowForm (as returns null if it is not a legal cast)
            IWindowForm parent = form as IWindowForm;
            System.Windows.Forms myCustomForm = new MyCustomForm();
            myCustomForm.ShowDialog(parent);
            myCustomForm.Dispose() //Important to call Dispose() on windows in the Agresso smart client.
            </code>
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IWindowForm.ShowMessageBox(System.Int32,System.String,System.String)">
            <summary>
            Shows a messagebox
            </summary>
            <param name="modal"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IWindowForm.ShowMessageBox(System.Int32,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Shows a messagebox
            </summary>
            <param name="modal"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IWindowForm.ShowMessageBox(System.Int32,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
            Shows a messagebox
            </summary>
            <param name="modal"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <param name="defButton"></param>
            <param name="boxOption"></param>
            <returns></returns>
        </member>
        <member name="T:Agresso.ClientExtension.GenericIdType">
            <summary>
            The different types of generic id
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdType.Customer">
            <summary>
            Customer
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdType.Supplier">
            <summary>
            Supplier
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdType.Resource">
            <summary>
            Resource
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.GenericIdFields">
            <summary>
            Constants for the different field names legal in GetSpecialValue
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.ResourceId">
            <summary>
            Resource number. Legal for type Resource
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.BankAccount">
            <summary>
            Bank account. Legal for all types
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.ResourceName">
            <summary>
            Resource name. Legal for type Resource
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.SocialSecNumber">
            <summary>
            Social security number. Legal for type Resource
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.SupplierId">
            <summary>
            Supplier id. Legal for type Resource
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.ShortName">
            <summary>
            Short name. Legal for types Customer and Supplier
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.AparId">
            <summary>
            Ap/Ar id. Legal for types Customer and Supplier
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.AparName">
            <summary>
            Ap/Ar name. Legal for types Customer and Supplier
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.CompanyRegNumber">
            <summary>
            Company registration number. Legal for types Customer and Supplier
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.PostAccount">
            <summary>
            Post account. Legal for types Customer and Supplier
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.GenericIdFields.VatRegNumber">
            <summary>
            VAT registration number. Legal for types Customer and Supplier
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnValuesUpdatedEventHandler">
            <summary>
            Handler for the values updated event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IGenId">
            <summary>
            IGenId is a specialized text box control that have one value and several ways of finding that value.
            It consists of one combo box control "generic_text" where the different value types are selected, and
            one text box control that contain the value of the type selected in the combo box.
            
            For example for a customer the value type could at one point be bank account and then the value (displayed value)
            will contain the customer's bank account number. The value of the field will still be the customer's id. You can
            get the special values such as the bank account from the control using the GetSpecialValue method.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IGenId.GetSpecialValue(System.String)">
            <summary>
            Get a specific value in the generic id. For instances bank account or national reg. number.
            NOTE: These are not updated in the OnValidate event, but are in OnValuesUpdated.
            
            Valid fieldnames for the different types <seealso cref="T:Agresso.ClientExtension.GenericIdFields"/>:
            <list type="">
            <listheader>Resource</listheader>
            <item>resource_id</item>
            <item>bank_account</item>
            <item>name</item>
            <item>social_sec</item>
            <item>short_name</item>
            <item>supplier_id</item>
            </list>
            
            <list type="">
            <listheader>Customer and Supplier</listheader>
            <item>apar_id</item>
            <item>bank_account</item>
            <item>apar_name</item>
            <item>short_name</item>
            <item>comp_reg_no</item>
            <item>postal_acc</item>
            <item>vat_reg_no</item>
            </list>
            </summary>
            <param name="fieldName"></param>
            <returns>Value as string, an empty string if no result</returns>
        </member>
        <member name="E:Agresso.ClientExtension.IGenId.OnValuesUpdated">
            <summary>
            Occurs when the special values has been updated or cleared
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IGenId.GenericType">
            <summary>
            Get the type of entity this generic id contains
            Possible values are Customer, Supplier and Resource
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IGenId.DefaultFieldName">
            <summary>
            Get the default field name <seealso cref="M:Agresso.ClientExtension.IGenId.GetSpecialValue(System.String)"/>
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ILabel">
            <summary>
            ILabel is an interface to a static string or title on a form. May also be a hidden value.
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ILabel.IsFieldTitle">
            <summary>
            True if this is a title of another field
            like an edit or combo box. The ID of the field will then start with "f_".
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ILabel.DoubleValue">
            <summary>
            Get or set the double value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ILabel.CounterValue">
            <summary>
            Get or set the counter value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ILabel.DateValue">
            <summary>
            Get or set the date value
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ILabel.IntValue">
            <summary>
            Get or set the integer value
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames">
            <summary>
            This class defines the constant names and Id's of all the
            menu items in the application and context menu. For use in IMenu.
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.File">
            <summary>
            File menu names
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Edit">
            <summary>
            Edit menu names
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Data">
            <summary>
            Data menu names
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.View">
            <summary>
            View menu names
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Format">
            <summary>
            Format menu names
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Links">
            <summary>
            Links menu names (note: Actual links not available in ACT)
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Window">
            <summary>
            Window menu names
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Help">
            <summary>
            Help menu names
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Www">
            <summary>
            WWW menu names
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Tools">
            <summary>
            Tools menu names
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.MenuNames.Tools.GetToolsName(System.Int32)">
            <summary>
            Get tools menu name at given index
            </summary>
            <param name="index">1 based index between 1 and 30</param>
            <returns>Menu name of tools item at given index</returns>
        </member>
        <member name="T:Agresso.ClientExtension.MenuNames.Tools.Custom">
            <summary>
            Custom tools menu names. These are tools items added by ACT or VBA.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.MenuNames.Tools.Custom.GetToolsName(System.Int32)">
            <summary>
            Get custom tools menu name at given index
            </summary>
            <param name="index">1 based index between 1 and 16</param>
            <returns>Menu name of tools item at given index</returns>
        </member>
        <member name="T:Agresso.ClientExtension.IMenu">
            <summary>
            IMenu is the interface to the Agresso application menu, and a form's context tools menu and pane.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IMenu.GetMenuItem(System.String)">
            <summary>
            Get menu item
            The menu item is buildt up as such:
            "MainItem|SubItem" for example Edit->Clear: "Edit|Clear"
            
            The tools items are indexed as "Tools" + sequence number, for example: "Tools1"
            The custom added tools items are indexed as "CustomMenu" + sequence number, for example: "CustomTools1"
            </summary>
            <param name="menuName">Menu name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IMenu.GetMenuItem(System.Int32)">
            <summary>
            Get menu item by resource id.
            </summary>
            <param name="menuId">Resource id</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IMenu.AppendToolsMenu(System.String)">
            <summary>
            Add a new tools item
            </summary>
            <param name="menuName">Title of the new menu</param>
            <returns>Menu item added</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IMenu.RemoveMenuItem(Agresso.ClientExtension.ICustomMenuItem)">
            <summary>
            Remove a previously added tools menu item
            </summary>
            <param name="menuItem">Menu item to remove</param>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IMenu.AppendToolSeparator">
            <summary>
            Add a separator at the end of the custom items added in the tools menu
            </summary>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IMenu.GetMenuName(System.Int32)">
            <summary>
            Get the menu name for the item with the given resource id
            </summary>
            <param name="menuId">Resource id</param>
            <returns>Menu name</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IMenu.GetMenuId(System.String)">
            <summary>
            Get the resource id for the given menu name
            </summary>
            <param name="menuName">Menu name</param>
            <returns>Resource id</returns>
        </member>
        <member name="M:Agresso.ClientExtension.IMenu.GetStandardMenuXml">
            <summary>
            Get a xml string describing the menu items with their id's
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnMenuClickEventHandler">
            <summary>
            Handler for the click event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnMenuClickedEventHandler">
            <summary>
            Handler for the clicked event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnRemoveBespokeMenuItemEventHandler">
            <summary>
            Handler for the remove event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IMenuItem">
            <summary>
            IMenuItem is an interface to an item on the file, tools and similar menus.
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IMenuItem.ResetEnabled">
            <summary>
            Signal that you do not want to control if the item is enabled or disabled any longer
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IMenuItem.ResetChecked">
            <summary>
            Signal that you do not want to control if the item is checked or disabled any longer
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IMenuItem.Click">
            <summary>
            Click the menuitem
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.IMenuItem.Click(System.Int32)">
            <summary>
            Tricky click the menuitem
            </summary>
            <param name="special">If the value special is equals 0 you will execute Click() else special treatment.</param>
            <returns></returns>
        </member>
        <member name="E:Agresso.ClientExtension.IMenuItem.OnMenuClick">
            <summary>
            Raised when the item is clicked, may be aborted
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.IMenuItem.OnMenuClicked">
            <summary>
            Raised when the item is clicked, after the click event and may not be aborted
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IMenuItem.Enabled">
            <summary>
            Get or set whether the item is enabled. Some items can not be enabled if Agresso says it is disabled.
            <remarks>Especially save can not be enabled if Agresso has disabled it</remarks>
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IMenuItem.Checked">
            <summary>
            Get or set whether the item is checked
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.IMenuItem.Id">
            <summary>
            Resource id
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ICustomMenuItem">
            <summary>
            ICustomMenuItem is an IMenuItem that is added to the tools menu by customisation code (ACT or VBA)
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.ICustomMenuItem.OnRemoveBespokeMenuItem">
            <summary>
            Raised when a custom menu item is removed
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IProject">
            <summary>
            Base client project interface
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IProjectApp">
            <summary>
            Implement this to make an application project
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IProjectApp.Initialize(Agresso.ClientExtension.IApplication)">
            <summary>
            Implement this to hook on to the application that is started
            </summary>
            <param name="application">Interface to the application</param>
        </member>
        <member name="T:Agresso.ClientExtension.IProjectForm">
            <summary>
            Implement this to make a form project
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IProjectForm.Initialize(Agresso.ClientExtension.IForm)">
            <summary>
            Implement this to hook on the form when it is started
            </summary>
            <param name="form">Interface to the form</param>
        </member>
        <member name="T:Agresso.ClientExtension.IProjectCustomForm">
            <summary>
            Implement this to make a custom form project. You must inherit from System.Windows.Forms.UserControl.
            <remarks>
            There are several interfaces in the Hosting namespace in Agresso.TopGen.Common.dll that can be implemented to increase the
            integration with the Smart Client.
            </remarks>
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IProjectCustomForm.Initialize(Agresso.ClientExtension.ICustomFormState)">
            <summary>
            Implement this to hook on when you are started. You are given an interface to interact with
            the rest of the Agresso environment 
            </summary>
            <param name="state">Context and state of the customform container</param>
        </member>
        <member name="T:Agresso.ClientExtension.OnDoubleClickEventHandler">
            <summary>
            Handler for the double click event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnRightClickEventHandler">
            <summary>
            Handler for the right click event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnCellValidateEventHandler">
            <summary>
            Handler for the validate cell event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.OnCellValidatedEventHandler">
            <summary>
            Handler for the cell validated event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.ClientExtension.OnCellFocusChangeEventHandler">
            <summary>
            Handler for the cell focus change event
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ISpread">
            <summary>
            ISpread is an interface to Agresso Spreads
            Note: all row and column indexes are <c>one-based</c>
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.LastLegal(System.Int32,System.Int32)">
            <summary>
            Last legal value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.LastLegal(System.String,System.Int32)">
            <summary>
            Last legal value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SavedValue(System.Int32,System.Int32)">
            <summary>
            Database value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SavedValue(System.String,System.Int32)">
            <summary>
            Database value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetValue(System.Int32,System.Int32)">
            <summary>
            Get string value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetValue(System.String,System.Int32)">
            <summary>
            Get string value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetUnValue(System.Int32,System.Int32)">
            <summary>
            Get unified string value of cell. Unified value is always what is saved.
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetUnValue(System.String,System.Int32)">
            <summary>
            Get unified string value of cell. Unified value is always what is saved.
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetString(System.Int32,System.Int32)">
            <summary>
            Get string value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetString(System.String,System.Int32)">
            <summary>
            Get string value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetInt(System.Int32,System.Int32)">
            <summary>
            Get integer value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetInt(System.String,System.Int32)">
            <summary>
            Get integer value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetBool(System.Int32,System.Int32)">
            <summary>
            Get boolean value of cell (CheckBoxes)
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetBool(System.String,System.Int32)">
            <summary>
            Get boolean value of cell (CheckBoxes)
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetCounter(System.Int32,System.Int32)">
            <summary>
            Get counter / large integer value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetCounter(System.String,System.Int32)">
            <summary>
            Get counter / large integer value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDouble(System.Int32,System.Int32)">
            <summary>
            Get double value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDouble(System.String,System.Int32)">
            <summary>
            Get double value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDate(System.Int32,System.Int32)">
            <summary>
            Get date value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDate(System.String,System.Int32)">
            <summary>
            Get date value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.Int32,System.Int32,System.String)">
            <summary>
            Set string value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.String,System.Int32,System.String)">
            <summary>
            Set string value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set integer value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.String,System.Int32,System.Int32)">
            <summary>
            Set integer value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set boolean value of cell (CheckBoxes)
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.String,System.Int32,System.Boolean)">
            <summary>
            Set boolean value of cell (CheckBoxes)
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.Int32,System.Int32,System.Int64)">
            <summary>
            Set counter / large integer value
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.String,System.Int32,System.Int64)">
            <summary>
            Set counter / large integer value
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Set double value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.String,System.Int32,System.Double)">
            <summary>
            Set double value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Set date value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetValue(System.String,System.Int32,System.DateTime)">
            <summary>
            Set date value of cell
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetActiveCell(System.Int32,System.Int32)">
            <summary>
            Set what cell is active
            </summary>
            <param name="colIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetActiveCell(System.String,System.Int32)">
            <summary>
            Set what cell is active
            </summary>
            <param name="colID"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDataRow(System.Int32)">
            <summary>
            Get DataRow representation of all the columns in a row (including hidden columns)
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDataRow(System.Int32,System.Boolean)">
            <summary>
            Get DataRow representation of a row 
            </summary>
            <param name="rowIndex"></param>
            <param name="visibleOnly">If true only visible columns are inluded</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDataRow(System.Int32,System.Object[])">
            <summary>
            Get DataRow representation of the given columns in a row
            </summary>
            <param name="rowIndex">Index of row</param>
            <param name="colIndexes">Indexes of the columns you want</param>
            <returns>DataRow representation of the row</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDataSet">
            <summary>
            Get a DataSet with all the values of the spread (including hidden columns)
            </summary>
            <returns>DataSet representation</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDataSet(System.Boolean)">
            <summary>
            Get a DataSet with the values of the spread
            </summary>
            <param name="visibleOnly">If true only visible columns are included</param>
            <returns>DataSet representation</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetDataSet(System.Object[])">
            <summary>
            Get a DataSet with values of the given columns
            </summary>
            <param name="colIndexes">List of column indexes or IDs</param>
            <returns>DataSet representation</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetEmptyDataSet">
            <summary>
            Get an empty dataset with the same columns and datatypes as in the spread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetEmptyDataSet(System.Boolean)">
            <summary>
            Get an empty dataset with the same columns and datatypes as in the spread
            </summary>
            <param name="visibleOnly">If true only visible columns are included</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.FillSpread(System.Data.DataSet)">
            <summary>
            Clear the spread and fill it with values from a DataSet.
            The DataSet must contain a table with the same name as the spread.
            Columns in the spread that is not in the DataSet will be left blank.
            </summary>
            <param name="ds">DataSet to fill the spread with</param>
            <returns>True if the spread was filled</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.RefillSpread(System.Data.DataSet,System.Boolean@)">
            <summary>
            Clear the spread and fill it with values from a DataSet.
            The DataSet must contain a table with the same name as the spread.
            Columns in the spread that is not in the DataSet will be left blank.
            Returns a DataSet containing the old values of the spread.
            </summary>
            <param name="ds">DataSet to fill the spread with</param>
            <param name="success">True if the spread was filled</param>
            <returns>Old values of the spread</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetRow(System.Int32,System.Data.DataRow)">
            <summary>
            Sets values from a datarow into a row in the spread.
            Values will be set for each column in the DataRow that has a corresponding spread column.
            </summary>
            <param name="rowIndex"></param>
            <param name="row"></param>
            <returns>True if one or more values were set</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetColID(System.Int32)">
            <summary>
            ID of column with index
            </summary>
            <param name="index">Column number</param>
            <returns>ID of column, blank if not found</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetColNumber(System.String)">
            <summary>
            Index of column with ID
            </summary>
            <param name="colID">Column ID</param>
            <returns>Index of column, -1 if not found</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.HasColumn(System.String)">
            <summary>
            Does the spread contain a column with ID
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetColEnabled(System.Int32,System.Boolean)">
            <summary>
            Enable column
            </summary>
            <param name="index">Column index</param>
            <param name="setEnabled">Value to set</param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetColEnabled(System.String,System.Boolean)">
            <summary>
            Enable column
            </summary>
            <param name="colID">Column ID</param>
            <param name="setEnabled">Value to set</param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.ColEnabled(System.Int32)">
            <summary>
            Is column enabled
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.ColEnabled(System.String)">
            <summary>
            Is column enabled
            </summary>
            <param name="colID">Column ID</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetColVisible(System.Int32,System.Boolean)">
            <summary>
            Hide or show column
            </summary>
            <param name="index">Column index</param>
            <param name="setValue">Value to set</param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetColVisible(System.String,System.Boolean)">
            <summary>
            Hide or show column
            </summary>
            <param name="colID">Column ID</param>
            <param name="setValue">Value to set</param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.ColVisible(System.Int32)">
            <summary>
            Is column visible
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.ColVisible(System.String)">
            <summary>
            Is column visible
            </summary>
            <param name="colID">Column ID</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.LockCell(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Lock a cell
            </summary>
            <param name="colIndex">Column index</param>
            <param name="rowIndex">Row index</param>
            <param name="lockIt">True to lock the cell, false to unlock</param>
            <param name="grey">True to make the cell grey when locked, false to keep white even if the cell is locked</param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.LockCell(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Lock a cell
            </summary>
            <param name="colID">Column name</param>
            <param name="rowIndex">Row index</param>
            <param name="lockIt">True to lock the cell, false to unlock</param>
            <param name="grey">True to make the cell grey when locked, false to keep white even if the cell is locked</param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetType(System.Int32)">
            <summary>
            Get the type of the values in column
            </summary>
            <param name="colIndex">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetType(System.String)">
            <summary>
            Get the type of the values in column
            </summary>
            <param name="colID">Column ID</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.IsSearchRow(System.Int32)">
            <summary>
            Is row at index a search row?
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.IsSumRow(System.Int32)">
            <summary>
            Is row at index a sum row
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.IsSumCol(System.Int32)">
            <summary>
            Is column at index a summable column
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
            <remarks>Since Platform 3.3</remarks>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.IsEmptyRow(System.Int32)">
            <summary>
            Is row at index empty?
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.IsFiller(System.Int32)">
            <summary>
            The a column a "filler"?
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetRowState(System.Int32)">
            <summary>
            Get the RowState of a row
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.SetRowState(System.Int32,Agresso.ClientExtension.SpreadRowState)">
            <summary>
            Set the RowState of a row 
            </summary>
            <param name="rowIndex"></param>
            <param name="state"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.Validate">
            <summary>
            Perform standard validation and then move to next cell if validation ok
            </summary>
            <returns>True if validation succeded</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.ValidateSpread">
            <summary>
            Will validate the whole spread. The first cell with an error will recieve focus.
            </summary>
            <returns>True if the spread was validated</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.Clear(System.Int32,System.Boolean)">
            <summary>
            Clear the spread and fill it with the specified number of rows
            </summary>
            <param name="rows">Number of empty rows</param>
            <param name="redraw">Redraw after clear</param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.MoveNextRow">
            <summary>
            Move focus to next row, same column
            </summary>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.MovePreviousRow">
            <summary>
            Move focus to previous row, same column
            </summary>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.MoveNextCell">
            <summary>
            Move focus to next cell
            </summary>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.MovePreviousCell">
            <summary>
            Move focus to next cell
            </summary>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.AddRows(System.Int32)">
            <summary>
            Add empty rows to the end of the spread
            </summary>
            <param name="rows">Number of rows to add</param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.IsColDescription(System.Int32)">
            <summary>
            True if the column contains the description of the cells in another column
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetFHName">
            <summary>
            Get the field help name of the active column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetColRealName(System.Int32)">
            <summary>
            Get the real column name for the column index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetAttIdForTableColumn(System.String)">
            <summary>
            Get attribute id for a column id
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.GetColNameForRealName(System.String)">
            <summary>
            Get the column name for a column name. This special application is used when the column name
            is system generated and different from what you may think. For example attributes are often
            stored in a column named xattribute_id. Sending attribute_id to this function will then give
            you xattribute_id
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.CreateColumn">
            <summary>
            Create a new column in this spread through a column builder. The column is automatically initialized with a unique column name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.CreateColumn(System.String)">
            <summary>
            Create a new column in this spread through a column builder.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpread.AddColumn(Agresso.ClientExtension.IColumnBuilder)">
            <summary>
            Adds a column to the spread.
            </summary>
            <param name="column"></param>
            <returns>Index of added column. Index of already existing column if the id is not unique</returns>
        </member>
        <member name="E:Agresso.ClientExtension.ISpread.OnDoubleClick">
            <summary>
            Fired when spread is double clicked
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.ISpread.OnRightClick">
            <summary>
            Fired when spread is right clicked
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.ISpread.OnCellValidate">
            <summary>
            Fired when a cell is beeing validated
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.ISpread.OnCellValidated">
            <summary>
            Fired after a cell is validated
            </summary>
        </member>
        <member name="E:Agresso.ClientExtension.ISpread.OnCellFocusChange">
            <summary>
            Fired when focus changes inside the spread
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.VisibleColCount">
            <summary>
            Number of visible columns
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.VisibleRowCount">
            <summary>
            Number of visible rows
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.ColCount">
            <summary>
            Number of columns
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.RowCount">
            <summary>
            Number of rows
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.ActiveRow">
            <summary>
            Active row number
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.ActiveCol">
            <summary>
            Active column number
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.HasSumRow">
            <summary>
            Does the spread have a sum row?
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.Rows">
            <summary>
            Collection of the all the rows in the spread
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.VisibleRows">
            <summary>
            Collection of all the visible rows in the spread
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.Columns">
            <summary>
            Collection of all the columns in the spread
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpread.VisibleColumns">
            <summary>
            Collection of all the visible columns in the spread
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.IProjectCollection">
            <summary>
            IProjectCollection holds a collection of IProject objects residing in the same AppDomain
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.IProjectCollection.GetProject(System.Type)">
            <summary>
            Get project with a specific type
            </summary>
            <param name="type"></param>
            <returns>IProject instance, null if not found</returns>
        </member>
        <member name="P:Agresso.ClientExtension.IProjectCollection.Item(System.Int32)">
            <summary>
            Get project at specified index
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.SpreadRowState">
            <summary>
            The state of a rows in an AgressoSpread
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.SpreadRowState.New">
            <summary>
            Row is empty
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.SpreadRowState.UnChanged">
            <summary>
            Row is filled but its values not changed
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.SpreadRowState.ChangedValid">
            <summary>
            Row has been changed and the values are legal
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.SpreadRowState.ChangedUnvalid">
            <summary>
            Row has been changed and the values not yet validated
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.SpreadRowState.Deleted">
            <summary>
            Row is deleted
            </summary>
        </member>
        <member name="F:Agresso.ClientExtension.SpreadRowState.SumRow">
            <summary>
            Row contains the sums of numeric columns in the spread
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ISpreadRow">
            <summary>
            ISpreadRow represents an ISpread row
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.LastLegal(System.Int32)">
            <summary>
            Get last legal value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.LastLegal(System.String)">
            <summary>
            Get last legal value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SavedValue(System.Int32)">
            <summary>
            Get database value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SavedValue(System.String)">
            <summary>
            Get database value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetValue(System.Int32)">
            <summary>
            Get string value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetValue(System.String)">
            <summary>
            Get string value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetString(System.Int32)">
            <summary>
            Get string value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetString(System.String)">
            <summary>
            Get string value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetInt(System.Int32)">
            <summary>
            Get integer value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetInt(System.String)">
            <summary>
            Get integer value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetBool(System.Int32)">
            <summary>
            Get boolean value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetBool(System.String)">
            <summary>
            Get boolean value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetCounter(System.Int32)">
            <summary>
            Get counter / large integer value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetCounter(System.String)">
            <summary>
            Get counter / large integer value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetDouble(System.Int32)">
            <summary>
            Get double value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetDouble(System.String)">
            <summary>
            Get double value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetDate(System.Int32)">
            <summary>
            Get date value of cell
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.GetDate(System.String)">
            <summary>
            Get date value of cell
            </summary>
            <param name="colID"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.Int32,System.String)">
            <summary>
            Set string value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.String,System.String)">
            <summary>
            Set string value of cell
            </summary>
            <param name="colID"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.Int32,System.Int32)">
            <summary>
            Set integer value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.String,System.Int32)">
            <summary>
            Set integer value of cell
            </summary>
            <param name="colID"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.Int32,System.Boolean)">
            <summary>
            Set boolean value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.String,System.Boolean)">
            <summary>
            Set boolean value of cell
            </summary>
            <param name="colID"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.Int32,System.Int64)">
            <summary>
            Set counter / large integer value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.String,System.Int64)">
            <summary>
            Set counter / large integer value of cell
            </summary>
            <param name="colID"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.Int32,System.Double)">
            <summary>
            Set double value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.String,System.Double)">
            <summary>
            Set double value of cell
            </summary>
            <param name="colID"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.Int32,System.DateTime)">
            <summary>
            Set date value of cell
            </summary>
            <param name="colIndex"></param>
            <param name="val"></param>
        </member>
        <member name="M:Agresso.ClientExtension.ISpreadRow.SetValue(System.String,System.DateTime)">
            <summary>
            Set date value of cell
            </summary>
            <param name="colID"></param>
            <param name="val"></param>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadRow.Spread">
            <summary>
            Parent spread
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadRow.RowNumber">
            <summary>
            Row number
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadRow.Active">
            <summary>
            Row is active
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadRow.SumRow">
            <summary>
            Row is sum row
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadRow.SearchRow">
            <summary>
            Row is search row
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadRow.Empty">
            <summary>
            Row is empty
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadRow.RowState">
            <summary>
            Set or get the row state
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.SpreadRowCollection">
            <summary>
            Collection of ISpread rows. <seealso cref="P:Agresso.ClientExtension.ISpread.Rows"/>
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadRowCollection.#ctor(Agresso.ClientExtension.ISpread)">
            <summary>
            Create collection
            </summary>
            <param name="spread">ISpread</param>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadRowCollection.#ctor(Agresso.ClientExtension.ISpread,System.Boolean)">
            <summary>
            Create collection
            </summary>
            <param name="spread">ISpread</param>
            <param name="visibleOnly">Only visible rows</param>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadRowCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy to array
            </summary>
            <param name="array">Array to fill</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadRowCollection.GetEnumerator">
            <summary>
            Get RowEnumetator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadRowCollection.Item(System.Int32)">
            <summary>
            Get row at index (1-based)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadRowCollection.IsSynchronized">
            <summary>
            Collection is not synchronized
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadRowCollection.Count">
            <summary>
            Row count
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadRowCollection.SyncRoot">
            <summary>
            Synchronization root
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.SpreadRowCollection.RowEnumerator">
            <summary>
            ISpreadRow enumeratior
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadRowCollection.RowEnumerator.#ctor(Agresso.ClientExtension.ISpread,System.Boolean)">
            <summary>
            Create enumetator
            </summary>
            <param name="spread"></param>
            <param name="visibleOnly"></param>
        </member>
        <member name="T:Agresso.ClientExtension.ISpreadCol">
            <summary>
            ISpread is an interface to an ISpread column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.Spread">
            <summary>
            The spread
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.ColNumber">
            <summary>
            Index of this column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.ID">
            <summary>
            ID of this column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.DataType">
            <summary>
            The datatype of the values in this column
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.Active">
            <summary>
            True if this column is active
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.Special">
            <summary>
            True if this column contains the last legal or saved value of another column 
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.Filler">
            <summary>
            True if this column is a "filler"
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.Enabled">
            <summary>
            Get or set if this column is enabled
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.Visible">
            <summary>
            Get or set if this column is visible
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ISpreadCol.SumCol">
            <summary>
            True if column is summable
            </summary>
            <remarks>Since Platform 3.3</remarks>
        </member>
        <member name="T:Agresso.ClientExtension.SpreadColCollection">
            <summary>
            Collection of ISpreadColumn objects. <seealso cref="P:Agresso.ClientExtension.ISpread.Columns"/>
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadColCollection.#ctor(Agresso.ClientExtension.ISpread)">
            <summary>
            Create collection
            </summary>
            <param name="spread">ISpread</param>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadColCollection.#ctor(Agresso.ClientExtension.ISpread,System.Boolean)">
            <summary>
            Create collection
            </summary>
            <param name="spread">ISpread</param>
            <param name="visibleOnly">Only visible columns</param>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadColCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy to array
            </summary>
            <param name="array">Array to fill</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:Agresso.ClientExtension.SpreadColCollection.GetEnumerator">
            <summary>
            Get column enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadColCollection.Item(System.Int32)">
            <summary>
            Get column at index (1-based)
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadColCollection.Item(System.String)">
            <summary>
            Get column with ID
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadColCollection.IsSynchronized">
            <summary>
            Collection is not synchronized
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadColCollection.Count">
            <summary>
            Column count
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.SpreadColCollection.SyncRoot">
            <summary>
            Synchronization roow
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.SpreadColCollection.ColEnumerator">
            <summary>
            Column enumerator
            </summary>
        </member>
        <member name="T:Agresso.ClientExtension.ViewAttribute">
            <summary>
            Mark you class as an IProjectForm extension
            </summary>
        </member>
        <member name="M:Agresso.ClientExtension.ViewAttribute.#ctor(System.String)">
            <summary>
            Used to mark a class as a Form project that is to be loaded when a specific form is started. Some forms have normal mode and
            browser mode. To be loaded in browser mode specify funcName as "ID/BROWSER"
            </summary>
            <param name="funcName">Function name, for example "CU02"</param>
        </member>
        <member name="M:Agresso.ClientExtension.ViewAttribute.#ctor(System.String,System.String)">
            <summary>
            Used to mark a class as a Form project that is to be loaded when a specific form is started. Some forms have normal mode and
            browser mode. To be loaded in browser mode specify funcName as "ID/BROWSER"
            </summary>
            <param name="funcName">Function name, for example "CU02"</param>
            <param name="menuId">Menu id, for example "AR7"</param>
        </member>
        <member name="M:Agresso.ClientExtension.ViewAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Used to mark a class as a Form project that is to be loaded when a specific form is started. Some forms have normal mode and
            browser mode. To be loaded in browser mode specify funcName as "ID/BROWSER"
            </summary>
            <param name="funcName">Function name, for example "CU02"</param>
            <param name="menuId">Menu id, for example "AR7"</param>
            <param name="sysSetUpCode">System setup code</param>
        </member>
        <member name="M:Agresso.ClientExtension.ViewAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Used to mark a class as a Form project that is to be loaded when a specific form is started. Some forms have normal mode and
            browser mode. To be loaded in browser mode specify funcName as "ID/BROWSER"
            </summary>
            <param name="funcName">Function name, for example "CU02"</param>
            <param name="menuId">Menu id, for example "AR7"</param>
            <param name="sysSetUpCode">System setup code</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Agresso.ClientExtension.ViewAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Used to mark a class as a Form project that is to be loaded when a specific form is started. Some forms have normal mode and
            browser mode. To be loaded in browser mode specify funcName as "ID/BROWSER"
            </summary>
            <param name="funcName">Function name, for example "CU02"</param>
            <param name="menuId">Menu id, for example "AR7"</param>
            <param name="sysSetUpCode">System setup code</param>
            <param name="description">Description</param>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:Agresso.ClientExtension.ViewAttribute.FuncName">
            <summary>
            Function name, for example "CU02"
            </summary>
            <remarks>
            To be loaded on a form in browser mode, append "/BROWSER". 
            </remarks>
        </member>
        <member name="P:Agresso.ClientExtension.ViewAttribute.MenuId">
            <summary>
            Menu id, for example "AR7"
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ViewAttribute.SysSetUpCode">
            <summary>
            System setup code
            </summary>
        </member>
        <member name="P:Agresso.ClientExtension.ViewAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.ColumnDataType">
            <summary>
            Defines abstract data types used by Agresso.
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.Case">
            <summary>
            Case
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.AttributeMaintenance">
            <summary>
            Maintenance mode for attribute values
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.Data.AttributeMaintenance.Automatic">
            <summary>
            Updated by the system
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.Data.AttributeMaintenance.Manual">
            <summary>
            Manually updated
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.Data.AttributeMaintenance.Optional">
            <summary>
            Optional (all values legal)
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.IDimension">
            <summary>
            Information about an attribute
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.Client">
            <summary>
            Client
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.AttId">
            <summary>
            Attribute id
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.Name">
            <summary>
            Attribute name
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.Description">
            <summary>
            Attribute description
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.Status">
            <summary>
            Attribute status
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.DataControl">
            <summary>
            If true, the attribute is enabled for datacontrol
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.NumericValueText">
            <summary>
            Text for the free to use NumbericValue of attribute values
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.PeriodIntervals">
            <summary>
            If true, attribute values can be devided in period intervals
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.RelatedAttributeId">
            <summary>
            Attribute id of directly related values
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.Numeric">
            <summary>
            If true, the attribute values are numeric
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.Maintenance">
            <summary>
            Maintenance mode
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.AccountingPosition">
            <summary>
            How the attribute is used in accounting
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.DataLength">
            <summary>
            Max length of value data
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimension.Flag">
            <summary>
            Option flag
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.Dimension">
            <summary>
            Implementation of IDimension. 
            It is also Agresso.Interface.CoreServices.IAttributeInfo reflection class
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.Dimension.#ctor(System.String,System.String)">
            <summary>
            Create a new updateable instance with the provided attribute id
            </summary>
            <param name="client"></param>
            <param name="attributeId"></param>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.Client">
            <summary>
            Get client
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.AttId">
            <summary>
            Get attribute id
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.Name">
            <summary>
            Get or set the name
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.Description">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.Status">
            <summary>
            Get or set the status
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.DataControl">
            <summary>
            Get or set if the attribute is enabled for datacontrol
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.NumericValueText">
            <summary>
            Get or set the numeric value text
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.PeriodIntervals">
            <summary>
            Get or set if attribute values can be devided in period intervals
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.RelatedAttributeId">
            <summary>
            Get or set the attribute id
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.Numeric">
            <summary>
            Get or set if values are numeric
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.Maintenance">
            <summary>
            Get or set the maintenance mode
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.AccountingPosition">
            <summary>
            Get or set the accounting position
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.Flag">
            <summary>
            Get or set the option flag
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.Dimension.DataLength">
            <summary>
            Get or set max length of value data
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.IDimensionValue">
            <summary>
            Information about an attribute value.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.Value">
            <summary>
            Attribute value
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.AttributeId">
            <summary>
            Attribute id
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.Client">
            <summary>
            Client id
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.Description">
            <summary>
            Description in company language
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.ValidFrom">
            <summary>
            Valid from period
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.ValidTo">
            <summary>
            Valid to period
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.RelatedValue">
            <summary>
            Directly related attribute value
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IDimensionValue.NumberValue">
            <summary>
            Related number value
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.DimensionValue">
            <summary>
            Implementation of IDimensionValue. 
            It is also Agresso.Interface.CoreServices.IAttributeValueInfo reflection class
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.Value">
            <summary>
            Get the attribute value
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.AttributeId">
            <summary>
            Get the attribute id
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.Client">
            <summary>
            Get the client
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.Description">
            <summary>
            Get or set the description in the company language
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.Status">
            <summary>
            Get or set the status
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.ValidFrom">
            <summary>
            Get or set the period the value is valid from
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.ValidTo">
            <summary>
            Get or set the period the value is valid to
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.RelatedValue">
            <summary>
            Get or set the directly related value
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.DimensionValue.NumberValue">
            <summary>
            Get or set the related number value
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.IAgressoLicense">
            <summary>
            Software license API so local products can check for the required modules. 
            </summary>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAgressoLicense.IsModuleLicensed(System.String,System.Int32)">
            <summary>
            Check if a module is licensed or not.
            </summary>
            <param name="moduleCode">The code of the module to check.</param>
            <param name="userCount">Optional argument to check if the module is licensed for the requested user count. Use 1 to see if the module is licensed at all</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAgressoLicense.GetUserCountForModule(System.String)">
            <summary>
            Get the number of users allowed to use the module.
            </summary>
            <param name="moduleCode">The code of the module to check.</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAgressoLicense.GuardIsModuleLicensed(System.String,System.Int32)">
            <summary>
            Throws an AgressoLicenseModuleException when the module has not been licensed.
            </summary>
            <param name="moduleCode"></param>
            <param name="userCount">Default value of 1 checks if the module is licensed at all.</param>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IAgressoLicense.Modules">
            <summary>
            The list of modules availables.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IAgressoLicense.CustomerName">
            <summary>
            The customer this license is registered to.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IAgressoLicense.UserName">
            <summary>
            The user this license is registered to.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IAgressoLicense.DateOfIssue">
            <summary>
            The date of license issue. The value has no time information, only the date information.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IAgressoLicense.DatabaseType">
            <summary>
            The database type this license applies to.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IAgressoLicense.IsDemoLicense">
            <summary>
            Returns true when the license is a demo license.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IAgressoLicense.IsLicenseExpired">
            <summary>
            Returns true when the license has been expired.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.IAttribute">
            <summary>
            This service retrieves information about attribute, attribute value and access to the attribute
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAttribute.GetAttribute(System.String,System.String)">
            <summary>
            Get attribute information
            </summary>
            <param name="attId">Attribute id</param>
            <param name="client">Client</param>
            <returns>Attribute information, null if nonexisting</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAttribute.GetValue(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Get information about attribute value.
            </summary>
            <param name="client">Client</param>
            <param name="attId">Attribute id</param>
            <param name="dimValue">Value, wildcards (*,?,%,_) allowed.</param>
            <param name="period">Period to check validity for, 0 to not check period.</param>
            <param name="status">Status to check, default "N", Use "*" to not check status.</param>
            <returns>Attribute value information. Null if mandatory or automatic maintenance and not found.</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAttribute.CreateValue(Agresso.Interface.CommonExtension.Data.IDimensionValue,System.String@)">
            <summary>
            Store attribute value information.
            </summary>
            <param name="info">Attribute value information</param>
            <param name="errorMessage">Error message if failed</param>
            <returns>True if saved, false if not saved.</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAttribute.DeleteValue(System.String,System.String,System.String)">
            <summary>
            Remove an attribute value
            </summary>
            <param name="client">Client id</param>
            <param name="value">Attribute value to remove</param>
            <param name="attId">Attribute id</param>
            <returns>True if deleted, false if not.</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAttribute.UpdateStatus(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Activate or deactivate an attribute value
            </summary>
            <param name="client">Client id</param>
            <param name="value">Attribute value to update</param>
            <param name="attId">Attribute id</param>
            <param name="period">Period to match the update on</param>
            <param name="status">New status to set</param>
            <returns>True if value was updated, false if not</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IAttribute.IsLegal(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Is the user allowed to use or see the given attribute value?
            The check can be done for new values. If relations check is set up, 
            it will not be done when the attribute value does not exists.
            </summary>
            <param name="userId">User</param>
            <param name="usageId">Menu id</param>
            <param name="value">Attribute value</param>
            <param name="attId">Attribute is</param>
            <param name="client">Client id</param>
            <returns>True if legal, false if not</returns>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.CurrentContext">
            <summary>
            CurrentContext has access to the current database interface, session and titles. The context is the
            same as the Agresso environment is working with. For instance the CurrentContext.Database gives you
            an interface to the same datasource that Agresso is working with at the moment.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.CurrentContext.Database">
            <summary>
            Current database interface
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.CurrentContext.Session">
            <summary>
            Current session interface
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.CurrentContext.Titles">
            <summary>
            Current titles interface
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.CurrentContext.Message">
            <summary>
            Current message interface to display messages
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.CurrentContext.Log">
            <summary>
            Current log interface
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.CurrentContext.Services">
            <summary>
            Current Services interface
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.ChildRelation">
            <summary>
            A child relation. When implementing ITableDefintion, used to set 
            relation to a child 
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.IChildRelation">
            <summary>
            Interface for a ChildRelation
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.IChildRelation.AddRelatedColumns(System.String,System.String)">
            <summary>
            Add a new related pair of columns
            </summary>
            <param name="parentColumn">Parent column (must be a column in Owner)</param>
            <param name="childColumn">Child column (must be a column in RelatedTable)</param>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IChildRelation.RelationName">
            <summary>
            Name of relation (parent table name [Owner.TableName] + "_" + child table name [RelatedTable])
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IChildRelation.NumRelations">
            <summary>
            Number of related columns in this relation
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IChildRelation.Owner">
            <summary>
            Relation owner (parent)
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IChildRelation.RelatedTable">
            <summary>
            Related table name (child relation table name)
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.IChildRelation.Child">
            <summary>
            Related child definition (table)
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ChildRelation.#ctor(Agresso.Interface.CommonExtension.Data.ITableDefinition,Agresso.Interface.CommonExtension.Data.ITableDefinition)">
            <summary>
            Constructor
            </summary>
            <param name="owner">The tabledefinition owner, typically 'this'</param>
            <param name="child">Child table name for owner</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ChildRelation.AddRelatedColumns(System.String,System.String)">
            <summary>
            Add related columns
            </summary>
            <param name="parentColumn">Column belonging to Owner (parent)</param>
            <param name="childColumn">Column belonging to RelatedTable (child)</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ChildRelation.GetEnumerator">
            <summary>
            The enumerator
            </summary>
            <returns>the enumerator</returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ChildRelation.RelatedTable">
            <summary>
            Related table (child table)
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ChildRelation.Child">
            <summary>
            Child relation
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ChildRelation.RelationName">
            <summary>
            Name of relation (owner.TableName_RelatedTable)
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ChildRelation.Owner">
            <summary>
            ChildRelation owner (parent)
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ChildRelation.NumRelations">
            <summary>
            Get num relations in this ChildRelation
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.DataSetBuilder">
            <summary>
            Class for creation of DataSets by ITableDefinitions
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.Data.DataSetBuilder.RowIdCol">
            <summary>
            System column to store the unique row identifier
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.Data.DataSetBuilder.RowMarkCol">
            <summary>
            System column to mark the row
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.Data.DataSetBuilder.RowStateCol">
            <summary>
            System column to store the custom row state flag
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetBuilder.CreateDataSetStructure(Agresso.Interface.CommonExtension.Data.ITableDefinition)">
            <summary>
            Based upon given ITableDefinition, creates a new DataSet holding 
            main DataTable with columns from definition. If the definition contains 
            related tables these tables are also created, and related columns are mapped together.
            </summary>
            <param name="definition">ITabledefinition holding a table structure to build</param>
            <returns>A new dataset with proper strucutre as defined by ITableDefinition definition</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetBuilder.AppendDataSetStructure(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition)">
            <summary>
            Based upon given ITableDefinition, appends to the given DataSet. If the table 
            already exist in the set, it is not appended. If the definition contains 
            related tables these tables are also created, and related columns are mapped together.
            </summary>
            <param name="ds">DataSet to append to</param>
            <param name="definition">ITabledefinition holding a table structure to build</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetBuilder.AddSystemColumns(System.Data.DataTable)">
            <summary>
            TopGen and Agresso has some features that require system columns on data tables
            This method will assure that they are added.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetBuilder.CreateDataSetStructure(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition)">
            <summary>
            Recursivly, create datatables, columns and create relations on given dataset.
            </summary>
            <param name="ds">DataSet to hold tables as defined in definition</param>
            <param name="definition">The definition to create a datatable from</param>
            <returns>dataset with </returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetBuilder.AddDataTableWithColumns(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition)">
            <summary>
            Add DataTable with columns to given dataset by given ITableDefintion
            </summary>
            <param name="ds">Dataset to add table to</param>
            <param name="definition">definition to create datatable from</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetBuilder.AddParentChildRelation(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.IChildRelation)">
            <summary>
            Add parent - child relation. Dataset ds must already hold columns defined in relation.
            </summary>
            <param name="ds">Dataset to create relations on</param>
            <param name="relation">Childrelation holding parent-child relations</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetBuilder.CreateDataColumns(System.Data.DataTable,Agresso.Interface.CommonExtension.Data.ITableColumnCollection)">
            <summary>
            Create datacolumn on DataTable dt based upon column definitions in the collection
            </summary>
            <param name="dt">DataTable to create column within</param>
            <param name="collection">Collection of column definitions.</param>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.DataSetSaver">
            <summary>
            Class for saving datasets.
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetSaver.SaveDataSet(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Save modified contents of DataSet ds to database (CurrentContext.Database.Execute) based upon 
            input from ITableDefinition defintion. In other words, the ITableDefinition states which 
            DataTable(s), situated in the DataSet, that will be processed (headertable + any related table(s)).
            In addition, the ITableDefinition also hold primary columns, virtual fields => information used
            when building SQL statements. Rowstate on Rows that are processed can be of type Added, Updated
            or Deleted. Else, they are ignored. Finally, accepts changes on edited tables and returns number of updated rows.
            If an error occurs and startLocalTransaction = true => aborts transaction and throws exception.
            </summary>
            <param name="ds">Dataset holding DataTable.Rows of type Updated, Added, or Deleted.</param>
            <param name="definition">Definition stating what to process + child relations to process</param>
            <param name="updateByPrimaryKeys">update by primarykeys or not (where clause built with primary keys as defined in ITableDefintion)</param>
            <param name="deleteByPrimaryKeys">delete by primarykeys or not (where clause built with primary keys as defined in ITableDefintion)</param>
            <param name="startLocalTransaction">Start and commit transaction inbetween save</param>
            <returns>Number of edited rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetSaver.SaveDataSet(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition,System.Boolean,System.Boolean)">
            <summary>
            Save modified contents of DataSet ds to database (CurrentContext.Database.Execute) based upon 
            input from ITableDefinition defintion. In other words, the ITableDefinition states which 
            DataTable(s), situated in the DataSet, that will be processed (headertable + any related table(s)).
            In addition, the ITableDefinition also hold primary columns, virtual fields => information used
            when building SQL statements. Rowstate on Rows that are processed can be of type Added, Updated
            or Deleted. Else, they are ignored. Finally, accepts table changes and returns number of updated rows.
            No transaction is started.
            </summary>
            <param name="ds">Dataset holding DataTable.Rows of type Updated, Added, or Deleted.</param>
            <param name="definition">Definition stating what to process + child relations to process</param>
            <param name="updateByPrimaryKeys">update by primarykeys or not (where clause built with primary keys as defined in ITableDefintion)</param>
            <param name="deleteByPrimaryKeys">delete by primarykeys or not (where clause built with primary keys as defined in ITableDefintion)</param>
            <returns>Number of edited rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetSaver.SaveSet(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition,System.Boolean,System.Boolean)">
            <summary>
            Save contents of dataset to db
            </summary>
            <param name="ds">DataSet holding tablerows that are updated/deleted/added (rowstate)</param>
            <param name="definition">definition holding information about table to save</param>
            <param name="updateByPrimaryKeys">update by primarykeys or not (where clause)</param>
            <param name="deleteByPrimaryKeys">delete by primarykeys or not (where clause)</param>
            <returns>num changed rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetSaver.SaveTable(System.Data.DataTable,Agresso.Interface.CommonExtension.Data.ITableDefinition,System.Boolean,System.Boolean)">
            <summary>
            Save/update/delete contents of datatable dt to database (based upon rowstate on rows in table)
            </summary>
            <param name="dt">DataTable holding rows to save/update/delete</param>
            <param name="definition">Defintion stating type of rows (excludes rows of type virtual from sql statements that are created)</param>
            <param name="updateByPrimaryKeys">update by primarykeys or not (where clause)</param>
            <param name="deleteByPrimaryKeys">delete by primarykeys or not (where clause)</param>
            <returns>num changed rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetSaver.AddRow(System.Data.DataRow,Agresso.Interface.CommonExtension.Data.ITableDefinition)">
            <summary>
            Add a new row to database
            </summary>
            <param name="row">The row to add</param>
            <param name="def">The table defintion for this row (to avoid deleting virtual columns)</param>
            <returns>Number of created rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetSaver.UpdateRow(System.Data.DataRow,Agresso.Interface.CommonExtension.Data.ITableDefinition,System.Boolean,System.Boolean)">
            <summary>
            Update database table row
            </summary>
            <param name="row">The row to update</param>
            <param name="def">The table defintion for this row (to avoid deleting virtual columns)</param>
            <param name="useOriginalValues">If true, WHERE clause values will be set with DataRowVersion.Original, else DataRowVersion.Current</param>
            <param name="byPrimaryKeys">If true, WHERE restriction will only contain primary key values, and SET will only contain non-primary keys.</param>
            <returns>number of updated rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.DataSetSaver.DeleteRow(System.Data.DataRow,Agresso.Interface.CommonExtension.Data.ITableDefinition,System.Boolean)">
            <summary>
            Delete rows from the database.
            </summary>
            <param name="row">The row to delete</param>
            <param name="def">The table defintion for this row (to avoid deleting virtual columns)</param>
            <param name="deleteByPrimaryKeys">If true, create deletestatement based upon primary keys only</param>
            <returns>Number of deleted rows</returns>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.ITableColumn">
            <summary>
            Interface for a table column structure. Used by DataSetBuilder
            to build a DataTable holding one or more ITableColumns
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableColumn.ColumnName">
            <summary>
            Name of column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableColumn.IsPrimaryKey">
            <summary>
            Is, or is part of primary key
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableColumn.ColumnType">
            <summary>
            Column type
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableColumn.DataLength">
            <summary>
            Max length of column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableColumn.DefaultValue">
            <summary>
            Column default value
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableColumn.IsVirtual">
            <summary>
            If field is virtual, e.g. not part of actual datatable.
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.ITableColumnCollection">
            <summary>
            Collection of ITableColumns
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableColumnCollection.Item(System.String)">
            <summary>
            Get ITableColumn by columnName
            </summary>
            <param name="columnName">Name of column</param>
            <returns>The TableColumn</returns>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.ITableDefinition">
            <summary>
            Interface for creation of a DataTable structure
            when creating a new DataSet with DataSetBuilder 
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableDefinition.TableName">
            <summary>
            Name of table
            </summary>
            <returns>string tableName</returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableDefinition.ChildRelation">
            <summary>
            Parent-child relation.
            Define columns that represent a parent-child relation
            Should be null in child, ChildRelation in parent.
            </summary>
            <returns>
            A ChildRelation structure holding child relation table name and 
            related columns. All columns must be part of both parent and child.
            </returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ITableDefinition.TableColumns">
            <summary>
            List of TableColumns. Each tablecolumn represent a DataColumn on the DataTable this
            type represents.
            </summary>
            <returns>List of tablecolumns</returns>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.SelectHandler">
            <summary>
            Class for creation of SELECT queries
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.SelectHandler.BuildSelect(System.String,System.String,System.String[])">
            <summary>
            Build a new select IStatement
            </summary>
            <param name="fromTableName">From table</param>
            <param name="whereRestriction">Where restriction. If empty string => No WHERE clause</param>
            <param name="selectFields">Which columns to return, if null => *</param>
            <returns>IStatement object that can be used with CurrentContext.DataBase.Read</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.SelectHandler.BuildSelect(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            Build a new select IStatement
            </summary>
            <param name="selectFields">Which fields to select. If null => SELECT *</param>
            <param name="fromTableName">FROM fromTableName</param>
            <param name="whereRestriction">Key = column name, Value = Column value. If empty dictionary => No WHERE clause</param>
            <returns>Parameterized IStatement object that can be used with CurrentContext.DataBase.Read</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.SelectHandler.Select(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Runs select * on table given by ITableDefintion definition and where restriction.
            If an entry is found and the definition contains child relations, run select 
            on the child relations also. DataSet ds is filled with values found => when entering method 
            dataset should hold empty table structures (parent+childrelations).
            Finally, accepts any change on dataset.
            </summary>
            <param name="ds">Empty datastructure with parent+childrelation as in definition</param>
            <param name="definition">ITableDefiniton for parent</param>
            <param name="whereRestriction">where clause</param>
            <returns>true, if any entry is found, else false</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.SelectHandler.Select(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition,System.String)">
            <summary>
            Runs select * on table given by ITableDefintion definition and where restriction.
            If an entry is found and the definition contains child relations, run select 
            on the child relations also. DataSet ds is filled with values found => when entering method 
            dataset should hold empty table structures (parent+childrelations).
            Finally, accepts any change on dataset.
            </summary>
            <param name="ds">Empty datastructure with parent+childrelation as in definition</param>
            <param name="definition">ITableDefiniton for parent</param>
            <param name="whereRestriction">where clause</param>
            <returns>true, if any entry is found, else false</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.SelectHandler.RunSelect(Agresso.Interface.CommonExtension.IStatement,System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition)">
            <summary>
            Runs the given SELECT * statement with CurrentContext.Database.Read and fills values
            in dataset ds on defintion.TableName. If any value is found, tries to run selects on
            childrelations as well. Returns true if an entry is found when running the original statement.
            </summary>
            <param name="statement">Statement to run</param>
            <param name="ds">DataSet to fill values in</param>
            <param name="definition">Definition holding table name and potentially any relations.</param>
            <returns>true if an header entry is found</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.SelectHandler.FillDataSetWithRelatedData(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.ITableDefinition)">
            <summary>
            Iterate through childrelations in search for related data.
            </summary>
            <param name="ds">DS to fill related data in</param>
            <param name="definition">Definition holding relations</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.SelectHandler.RunSelectStatementsOnChildRelations(System.Data.DataSet,Agresso.Interface.CommonExtension.Data.IChildRelation)">
            <summary>
            Runs select on related table
            <example>Runs 'SELECT * FROM 'relation.RelatedTable' WHERE 
            'relation.RelatedColum(s)' = 'ds.Tables[relation.Owner.TableName].ColumValue(s)'.
            </example>
            In other words, DataSet ds holds parent/Owner table with specific values to search for 
            in the relation. DataSet ds should also hold data table stuctures for the related tables, and
            is also filled with values according to relation.
            </summary>
            <param name="ds">DataSet holding table with parent data to search for, and structure for child relation table</param>
            <param name="relation">Childrelation holding related table name, owner table name, and related columns</param>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.TableColumn">
            <summary>
            TableColumn. Default implementation of a ITableColumn
            
            NOTE: 
            If you set a ITableColumn as primary key, you must supply a default value
            because ACT adds rows to it's datatable before you get the chance to add  
            any value on it.
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.TableColumn.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            DataLength set to 0
            DefaultValue set to null
            PrimaryKey set to false
            IsVirtual set to false
            </summary>
            <param name="colName">Name of column</param>
            <param name="colType">Column type</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.TableColumn.#ctor(System.String,System.Type,System.Int32)">
            <summary>
            Constructor
            DefaultValue set to null
            PrimaryKey set to false
            IsVirtual set to false
            </summary>
            <param name="colName">Name of column</param>
            <param name="colType">Column type</param>
            <param name="dataLength">Max length of colum</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.TableColumn.#ctor(System.String,System.Type,System.Int32,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="colName">Name of column</param>
            <param name="colType">Column type</param>
            <param name="dataLength">Max length of colum</param>
            <param name="defaultValue">Default column value</param>
            <param name="isPrimaryKey">Is this column part of a primary key or not</param>
            <param name="isVirtual">Is the column virtual, e.g not actually part of the datatable</param>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableColumn.ColumnName">
            <summary>
            Name of column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableColumn.IsPrimaryKey">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableColumn.ColumnType">
            <summary>
            Type of column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableColumn.DataLength">
            <summary>
            Max length on column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableColumn.DefaultValue">
            <summary>
            Column default value
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableColumn.IsVirtual">
            <summary>
            If field is virtual, e.g. not part of actual datatable.
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.TableDefinition">
            <summary>
            Base class for creation of a DataTable structure
            when creating a new DataSet with DataSetBuilder 
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.TableDefinition.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tableName">Name of table which this definition represents.</param>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableDefinition.TableName">
            <summary>
            Name of table
            </summary>
            <returns>table name</returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableDefinition.ChildRelation">
            <summary>
            Parent-child relation.
            Define columns that represent a parent-child relation
            Should be null in child, ChildRelation in parent.
            </summary>
            <returns>
            A ChildRelation structure holding child relation table name and 
            related columns. All columns must be part of both parent and child.
            </returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.TableDefinition.TableColumns">
            <summary>
            List of ITableColumns. Each tablecolumn represent a DataColumn on the DataTable this
            type represents.
            </summary>
            <returns>List of ITableColumns</returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IRequest.Client">
            <summary>
            Get the current logged on client
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IRequest.MenuId">
            <summary>
            Get the menu id of the running topgen screen
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IRequest.InRequest">
            <summary>
            Returns true if inside a request
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IRequest.Cache">
            <summary>
            Get the request cache
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IRequestCache.Get(System.String)">
            <summary>
            Retrieve object from the cache
            </summary>
            <param name="key">Key</param>
            <returns>The cached content</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IRequestCache.Set(System.String,System.Object)">
            <summary>
            Add object to the cache
            </summary>
            <param name="key">Key</param>
            <param name="value">The content to add to cache</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ICounter.Get(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Gets counter value from database.
            </summary>
            <param name="name">Name of column</param>
            <param name="module">Name of module</param>
            <param name="client">Current client</param>
            <param name="cntInc">Number of numbers that will be used</param>
            <param name="startNo">The counter will start on this value if it has to be created</param>
            <returns>Returns a long holding the requested counter value</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ICounter.Get(System.String,System.String,System.String,System.Int64)">
            <summary>
            Gets counter value from database.
            </summary>
            <param name="name">Name of column</param>
            <param name="module">Name of module</param>
            <param name="client">Current client</param>
            <param name="cntInc">Number of numbers that will be used</param>
            <returns>Returns a long holding the requested counter value</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ICounter.Get(System.String,System.String,System.String)">
            <summary>
            Gets counter value from database.
            </summary>
            <param name="name">Name of column</param>
            <param name="module">Name of module</param>
            <param name="client">Current client</param>
            <returns>Returns a long holding the requested counter value</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ICounter.Get(System.String,System.String)">
            <summary>
            Gets client independent counter value from database.
            </summary>
            <param name="name">Name of column</param>
            <param name="module">Name of module</param>
            <returns>Returns a long holding the requested counter value</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ICounter.GetChecked(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get a new counter, based on the values which are already in use.
            </summary>
            <param name="counter"></param>
            <param name="module"></param>
            <param name="client"></param>
            <param name="table"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IServices.GetCounter">
            <summary>
            Creates counter service
            </summary>
            <returns>Counter service</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IServices.GetAttribute">
            <summary>
            Creates attributes service 
            </summary>
            <returns>Attribute service</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IServices.GetLicense">
            <summary>
            Creates Agresso license service
            </summary>
            <returns>Agresso license service</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IServices.GetExecutionEngine">
            <summary>
            Creates the tasks execution engine
            </summary>
            <returns>Execution engine</returns>
        </member>
        <member name="T:ACT.Common.NamedEvents.INamedHooks">
            <summary>
            Event publisher for named events. This interface raises one event and the event arguments contains information to
            differenciate between them. ACT projects are registered on specific names and will only be loaded for those.
            </summary>
            <seealso cref="T:ACT.Common.NamedEvents.NamedEventArgs"/>
        </member>
        <member name="E:ACT.Common.NamedEvents.INamedHooks.OnNamedEvent">
            <summary>
            Raised when a named event is called out to from Agresso code.
            Use the event arguments to inspect the input parameters and set return values.
            </summary>
        </member>
        <member name="T:ACT.Common.NamedEvents.IParameterCollection">
            <summary>
            Collection of parameters given as input to named events.
            </summary>
        </member>
        <member name="M:ACT.Common.NamedEvents.IParameterCollection.IndexOf(System.String)">
            <summary>
            Get the index of parameter with the given name.
            </summary>
            <param name="key">Parameter name (case in-sensitive)</param>
            <returns>Index of parameter with the given name, -1 if no parameter exists.</returns>
        </member>
        <member name="P:ACT.Common.NamedEvents.IParameterCollection.Count">
            <summary>
            Number of parameters
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.IParameterCollection.Item(System.String)">
            <summary>
            Get parameter value by parameter name.
            </summary>
            <param name="key">Parameter name (case in-sentitive)</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="P:ACT.Common.NamedEvents.IParameterCollection.Item(System.Int32)">
            <summary>
            Get parametervalue by index
            </summary>
            <param name="index">Parameter index.</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="P:ACT.Common.NamedEvents.IParameterCollection.Keys">
            <summary>
            Collection of the parameter names.
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.IParameterCollection.Values">
            <summary>
            Collection of the parameter values.
            </summary>
        </member>
        <member name="T:ACT.Common.NamedEvents.IProjectNamedEvent">
            <summary>
            <para>
            Interface for ACT extension projects that are handlers for named events</para>
            <para>
            Named events are a generic way for Agresso logic to create hooks for ACT.
            The events are organized in families, i.e. "AUTHENTICATION", and event names, i.e. "LDAP".
            When a project is registered on a family and event name, it will be notified whenever that event occurs.
            Using the event arguments, parameters can be inspected and return values provided.
            </para>
            <para>
            Agresso code can create events at any place in the code, but must expect certain types and names of return values.
            These must be communicated between product developers and customisation developers.
            </para>
            </summary>
            <seealso cref="T:ACT.Common.NamedEvents.INamedHooks"/>
        </member>
        <member name="T:ACT.Common.NamedEvents.IReturnValues">
            <summary>
            Return value structure for named event subscribers to return to the event raising code.
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.IReturnValues.Cancel">
            <summary>
            Set to true if event raiser should abort its operation.
            Set to false if event raiser should continue.
            Set to null to reset the value and let the system treat the operation as unhandled.
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.IReturnValues.Count">
            <summary>
            Number of return values
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.IReturnValues.Item(System.String)">
            <summary>
            Get or set/add named return value.
            The event raising code must know about or expect the named return value and its type.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Common.NamedEvents.NamedEventArgs">
            <summary>
            Event arguments for named events in the ACT system.
            Subscribers registered for the event family and name can inspect input parameters and place return values on this object.
            </summary>
        </member>
        <member name="M:ACT.Common.NamedEvents.NamedEventArgs.#ctor(System.String,System.String,ACT.Common.NamedEvents.IParameterCollection)">
            <summary>
            Create a new instance of the event arguments.
            </summary>
            <param name="eventFamily">Family of events</param>
            <param name="eventName">Name within family</param>
            <param name="parameters">Collection of parameters</param>
        </member>
        <member name="M:ACT.Common.NamedEvents.NamedEventArgs.OnCreateReturnValues">
            <summary>
            Implement to return a new instance of the <see cref="T:ACT.Common.NamedEvents.IReturnValues"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:ACT.Common.NamedEvents.NamedEventArgs.EventFamily">
            <summary>
            Get the family name for this event.
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.NamedEventArgs.EventName">
            <summary>
            Get the event name
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.NamedEventArgs.Parameters">
            <summary>
            Input parameters for the event.
            </summary>
            <seealso cref="T:ACT.Common.NamedEvents.IParameterCollection"/>
        </member>
        <member name="P:ACT.Common.NamedEvents.NamedEventArgs.ReturnValues">
            <summary>
            Return values for the event
            </summary>
            <seealso cref="T:ACT.Common.NamedEvents.IReturnValues"/>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.DbProviderType">
            <summary>
            Kind of driver
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.DbProviderType.MsSqlServer">
            <summary>
            Microsoft SQL Server
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.DbProviderType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.DbProviderType.Other">
            <summary>
            Other vendor
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.DbEnvironmentType">
            <summary>
            Kind of driver implementation
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.DbEnvironmentType.Managed">
            <summary>
            Implemented in ADO.NET using the managed driver patterns
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.DbEnvironmentType.NativeClient">
            <summary>
            Implemented in native code using the smart client driver API
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.DbEnvironmentType.NativeServer">
            <summary>
            Implemented in native code using the server driver API
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.DbEnvironmentType.Other">
            <summary>
            Another, unknown implementation of IDatabase
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.IDbConnectionInfo">
            <summary>
            Provides information about the current database
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IDbConnectionInfo.Provider">
            <summary>
            Get the provider type
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IDbConnectionInfo.Environment">
            <summary>
            Get the database environment
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IDbConnectionInfo.Server">
            <summary>
            The database server hostname.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IDbConnectionInfo.ServerVersion">
            <summary>
            The database server version
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IDbConnectionInfo.Database">
            <summary>
            The name of the database schema we're connected to.
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.IDatabase">
            <summary>
            IDatabase can be used to issue sql statements against the database. The database connection will be the
            same as the one Agresso uses internally for all environments. IE. in ServerExtension the connection is the
            same as the server process uses and in ClientExtension the same as the Agresso Office Client uses.
            	
            Use CreateStatement to get an IStatement you can use to create parameterized queries
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.CreateStatement">
            <summary>
            Creates a parameterized statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.CreateStatement(System.String)">
            <summary>
            Creates a parameterized statement
            </summary>
            <param name="sql">Initial statement</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.Read(Agresso.Interface.CommonExtension.IStatement,System.Data.DataTable)">
            <summary>
            Executes a select and fills the given datatable
            </summary>
            <param name="sql">Select statement</param>
            <param name="dt">Datatable to fill</param>
            <returns>Number of rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.Read(System.String,System.Data.DataTable)">
            <summary>
            Executes a select and fills the given datatable
            </summary>
            <param name="sql">Select statement</param>
            <param name="dt">Datatable to fill</param>
            <returns>Number of rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.GetReader(Agresso.Interface.CommonExtension.IStatement)">
            <summary>
            Get a forward read only cursor
            </summary>
            <param name="sql">Select statement</param>
            <returns>Forward read only cursor</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.GetReader(System.String)">
            <summary>
            Get a forward read only cursor
            </summary>
            <param name="sql">Select statement</param>
            <returns>Forward read only cursor</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.Read(Agresso.Interface.CommonExtension.IStatement,System.String,System.Data.DataSet)">
            <summary>
            Executes a select and fills the specified table within the dataset
            </summary>
            <param name="sql">Select statement</param>
            <param name="tableName">Data table to fill</param>
            <param name="ds">Dataset containing the datatable</param>
            <returns>Number of rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.Read(System.String,System.String,System.Data.DataSet)">
            <summary>
            Executes a select and fills the specified table within the dataset
            </summary>
            <param name="sql">Select statement</param>
            <param name="tableName">Data table to fill</param>
            <param name="ds">Dataset containing the datatable</param>
            <returns>Number of rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.Execute(Agresso.Interface.CommonExtension.IStatement)">
            <summary>
            Executes a non-query
            </summary>
            <param name="sql">Update, delete or insert statement</param>
            <returns>Number of affected rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.Execute(System.String)">
            <summary>
            Executes a non-query
            </summary>
            <param name="sql">Update, delete or insert statement</param>
            <returns>Number of affected rows</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(Agresso.Interface.CommonExtension.IStatement,System.Object@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(Agresso.Interface.CommonExtension.IStatement,System.String@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(Agresso.Interface.CommonExtension.IStatement,System.Int32@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(Agresso.Interface.CommonExtension.IStatement,System.Double@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(Agresso.Interface.CommonExtension.IStatement,System.DateTime@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(Agresso.Interface.CommonExtension.IStatement,System.Int64@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(Agresso.Interface.CommonExtension.IStatement,System.Byte[]@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(Agresso.Interface.CommonExtension.IStatement,System.Guid@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(System.String,System.Object@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(System.String,System.String@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(System.String,System.Int32@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(System.String,System.Double@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(System.String,System.DateTime@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(System.String,System.Int64@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(System.String,System.Byte[]@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.ReadValue(System.String,System.Guid@)">
            <summary>
            Read the value in the first column of the first row in the result a select statement
            </summary>
            <param name="sql"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.SelectArray(Agresso.Interface.CommonExtension.IStatement,System.Object[]@)">
            <summary>
            Select an array of values.
            </summary>
            <param name="sql">SQL statement.</param>
            <param name="values">Resulting values.</param>
            <returns>Number of rows.</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.BeginTransaction">
            <summary>
            Begins a database transaction
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.CommitTransaction">
            <summary>
            Commits a database transaction
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.AbortTransaction">
            <summary>
            Aborts the database transaction
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.IsInTransaction">
            <summary>
            Is a transaction active
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.AssertTransaction">
            <summary>
            Starts a transaction if not already started. 
            Returns if a new transaction was started or if a transaction already was started.
            </summary>
            <returns>
            1 if a new transaction was started. 
            0 if a transaction already was started. 
            -1 if not able to tell or not allowed to start transaction
            </returns>
            <example>
            <code>
            byte[] blob = GenerateBlob();
            IStatement insert = CurrentContext.Database.CreateStatement();
            insert.Assign("INSERT INTO aagblob (blob_id, blob_size, description");
            insert.Append(    " VALUES (@id, @size, @desc)");
            insert["id"]   = 678739;
            insert["size"] = 200123;
            insert["desc"] = "My bespoke blob";
            
            bool commit = CurrentContext.Database.AssertTransaction() == 1;
            try
            {
            	CurrentContext.Database.Execute(insert);
            	CurrentContext.Database.UpdateBlob("aagblob", "blob_image", "blob_id = 678739", blob);
            	if(commit)
            		CurrentContext.Database.CommitTransaction();
            }
            catch
            {
            	CurrentContext.Database.AbortTransaction();
            	throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.IsTable(System.String)">
            <summary>
            Checks if a table exists or not
            </summary>
            <param name="tableName">The name of the table</param>
            <returns>true if the table exists, otherwise false</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.IsColumn(System.String,System.String)">
            <summary>
            Returns true if the table has a column with the given name
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.GetBlob(System.String,System.String,System.String)">
            <summary>
            Retreves one and only blob value from a blob column.
            </summary>
            <param name="table">The table containing the blob</param>
            <param name="column">The column containing the blob</param>
            <param name="where">The where clause to retreve a single row</param>
            <returns>The blob or null if the row does not exist</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.UpdateBlob(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Updates a blob on an existing row. That means that the row has to exist
            </summary>
            <param name="table">The table that contains a blob col</param>
            <param name="column">The column containing the blob</param>
            <param name="where">The where clause to retreve a single row</param>
            <param name="blob">The blob to insert</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.UpdateLongText(System.String,System.String,System.String,System.String)">
            <summary>
            Updates a long text on an existing row. That means that the row has to exist
            </summary>
            <param name="table">The table that contains a long text col</param>
            <param name="column">The column containing the long text</param>
            <param name="where">The where clause to retreve a single row</param>
            <param name="longText">The long text to insert</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDatabase.GetServerTime">
            <summary>
            Get database server's time
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.ISecuredDatabase">
            <summary>
            Extended IDataBase interface for internal use only
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ISecuredDatabase.CanAccess">
            <summary>
            True if the calling code can access the database
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.IDbCursor">
            <summary>
            IDbCursor is an interface to a database forward, readonly cursor
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.Read">
            <summary>
            Fetch
            </summary>
            <returns>true if a row was fetched, otherwise false</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetBool(System.Int32)">
            <summary>
            Gets the boolean value at the given position
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetBool(System.String)">
            <summary>
            Gets the boolean value at the given position
            </summary>
            <param name="column">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetDateTime(System.Int32)">
            <summary>
            Gets the DateTime value at the given position
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetDateTime(System.String)">
            <summary>
            Gets the DateTime value at the given position
            </summary>
            <param name="column">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetDouble(System.Int32)">
            <summary>
            Gets the double value at the given position
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetDouble(System.String)">
            <summary>
            Gets the double value at the given position
            </summary>
            <param name="column">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetInt(System.Int32)">
            <summary>
            Gets the integer value at the given position
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetInt(System.String)">
            <summary>
            Gets the integer value at the given position
            </summary>
            <param name="column">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetCounter(System.Int32)">
            <summary>
            Gets the Int64 value at the given position
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetCounter(System.String)">
            <summary>
            Gets the Int64 value at the given position
            </summary>
            <param name="column">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetString(System.Int32)">
            <summary>
            Gets the string value at the given position
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetString(System.String)">
            <summary>
            Gets the string value at the given position
            </summary>
            <param name="column">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetGuid(System.Int32)">
            <summary>
            Gets the System.Guid value at the given position
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetGuid(System.String)">
            <summary>
            Gets the System.Guid value at the given position
            </summary>
            <param name="column">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetValues(System.Object[])">
            <summary>
            Get all the values at the current row
            </summary>
            <param name="values">Object array to fill</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetFieldType(System.Int32)">
            <summary>
            Get datatype of the given position
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetFieldType(System.String)">
            <summary>
            Get datatype of the given position
            </summary>
            <param name="name">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.IsDBNull(System.Int32)">
            <summary>
            Is value in given column a null value
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.IsDBNull(System.String)">
            <summary>
            Is value in given column a null value
            </summary>
            <param name="name">Column name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.Close">
            <summary>
            Close cursor
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.GetName(System.Int32)">
            <summary>
            Name of column at given index
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IDbCursor.IndexOf(System.String)">
            <summary>
            Index of column with given name
            </summary>
            <param name="name">Column name</param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IDbCursor.Count">
            <summary>
            The number of clumns in the result.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IDbCursor.Item(System.Int32)">
            <summary>
            Gets the value at the given position
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IDbCursor.Item(System.String)">
            <summary>
            Gets the value at the given position
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.MessageDisplayType">
            <summary>
            Type of display when message are shown.
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.MessageDisplayType.Information">
            <summary>
            Information message. Visual hint is a lowercase i in a circle.
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.MessageDisplayType.Error">
            <summary>
            Error message. Visual hint is a white X with a red background.
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.MessageDisplayType.Warning">
            <summary>
            Warning or missing setup message. Visual hint is an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.MessageDisplayType.Confirmation">
            <summary>
            Confirmation message. Visual hint is a check mark in a green circle.
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.IMessage">
            <summary>
            This interface displays an informational message in the way that is appropriate for the application.
            For example in the smart client application it is a messagebox, in TopGen an asynchronous message buffer and
            on the server it writes to the server log.
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IMessage.Display(System.String)">
            <summary>
            Display information message
            </summary>
            <param name="message">Message to display</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IMessage.Display(System.String,System.Object[])">
            <summary>
            Display information message
            </summary>
            <param name="message">Message to display</param>
            <param name="formattingArguments">Formatting parameters</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IMessage.Display(System.Int32)">
            <summary>
            Display information message
            </summary>
            <param name="titleNo">Title number of message to display</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IMessage.Display(System.Int32,System.Object[])">
            <summary>
            Display information message
            </summary>
            <param name="titleNo">Title number of message to display</param>
            <param name="formattingArguments">Formatting parameters</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IMessage.Display(Agresso.Interface.CommonExtension.MessageDisplayType,System.Int32,System.Object[])">
            <summary>
            Display message of certain type. This can be an Information, Error, Warning or Confirmation
            </summary>
            <param name="type">Message type</param>
            <param name="titleNo">Title number of message to display</param>
            <param name="formattingArguments">Formatting parameters</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IMessage.Display(Agresso.Interface.CommonExtension.MessageDisplayType,System.String,System.Object[])">
            <summary>
            Display message of certain type. This can be an Information, Error, Warning or Confirmation
            </summary>
            <param name="type">Message type</param>
            <param name="message">Message</param>
            <param name="formattingArguments">Formatting parameters</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IMessage.Clear">
            <summary>
            Clear buffered messages
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IMessage.QueueMessages">
            <summary>
            Get if messages are queued
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Internal.CommonFactoryProxy">
            <exclude/>
            <summary>
            Internal CommonFactoryProxy proxy
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory">
            <exclude/>
            <summary>
            An interface to classes that can give you the implemenation of concrete CommonExtenstion objects
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory.GetDatabaseInterface">
            <summary>
            Get interface to the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory.GetSessionInterface">
            <summary>
            Get interface to the session state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory.GetTitlesInterface">
            <summary>
            Get the interface to Agresso titles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory.GetMessageInterface">
            <summary>
            Get the interface to the Messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory.GetLogInterface">
            <summary>
            Get the interface to logsystem
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory.GetRequestInterface">
            <summary>
            Get the interface to a Request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory.GetServicesInterface">
            <summary>
            Get the interface to the Services
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.CommonFactoryProxy.ChangeFactory(Agresso.Interface.CommonExtension.Internal.ICommonExtensionFactory)">
            <summary>
            Changes the real wrapper factory used by this proxy.
            </summary>
            <param name="newFactory">New wrapper factory</param>
            <returns>The previous wrapper factory</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.CommonFactoryProxy.GetDatabaseInterface">
            <summary>
            Returns interface to the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.CommonFactoryProxy.GetSessionInterface">
            <summary>
            Returns interface to the session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.CommonFactoryProxy.GetTitlesInterface">
            <summary>
            Returns interface to the titles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.CommonFactoryProxy.GetRequestInterface">
            <summary>
            Returns an interface to the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Internal.CommonFactoryProxy.GetServicesInterface">
            <summary>
            Returns an interface to the services
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.ISessionState">
            <summary>
            ISessionState is an interface to the current session's state. It will also give you access to system parameters.
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ISessionState.GetProperty(System.String)">
            <summary>
            Get a property set on the session
            </summary>
            <param name="propertyName">Name of property</param>
            <returns>Property string value, null if not found</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ISessionState.SetProperty(System.String,System.String)">
            <summary>
            Set a property string value
            </summary>
            <param name="propertyName">Name of property</param>
            <param name="propertyValue">Property value</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ISessionState.GetSystemParameter(System.String,System.String,System.String@)">
            <summary>
            Get system or common parameter.
            </summary>
            <param name="parameterName">System or common parameter name</param>
            <param name="clientCode">Current client code</param>
            <param name="parameterValue">System parameter value returned</param>
            <returns>True if the parameter is found and is on</returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.ISessionState.Client">
            <summary>
            Company code (the company the user is logged into).
            Agresso is a multicompany environment, the logged on client does not always correspond to the client
            that the user now is working with. 
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.ISessionState.UserId">
            <summary>
            Current user id
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.ISessionState.UserName">
            <summary>
            Current user name
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.ISessionState.SysSetupCode">
            <summary>
            Current system setup code
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.ISessionState.Language">
            <summary>
            Current language
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.IStatement">
             <summary>
             Summary description for IStatement.
            		Uses internaly a stringbuilder to store the sql query and a hash table to store the 
            		parameters.
            		
             Recommended SQL syntax:
            
              Capitalized SQL known words. 
              Space at the beginning of a new Append.
              Add alignment if it makes it easier to understand your SQL.
              Try to minimize white spaces in the SQL query; 
                 eg. "SELECT    aname     FROM atable" == "SELECT aname FROM atable".
            
             </summary>
             <example>
            		Recommended SQL syntax:
            		<code>
            		    IStatement sql = CurrentContext.Database.CreateStatement();
            			sql.Assign("SELECT ace_code, attribute_id, dim_value, inc_cat");
            			sql.Append( " FROM entabel");
            			sql.Append(" WHERE client = @client");
            			sql.Append(  " AND dim_value = @resource_id");
            			sql.Append(  " AND attribute_id = @attributeId"); 
            			sql.Append(  " AND @period BETWEEN period_from AND period_to");
            			sql.Append(  " AND status = @status");
            
            			sql["resource_id"] = resourceId;
            			sql["period"]      = period;
            			sql["client"]      = CurrentContext.Session.Client;
            			sql["status"]      = status;
            			sql["attributeId"] = "C1";
            		</code>
             </example>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IStatement.Assign(System.String)">
            <summary>
            Clears the statement and assigns a new SQL string.
            Parameters are specified as @parametername and can be assigned using
            ["parametername"] = parametervalue or SetParameter("parametername", parametervalue)
            </summary>
            <param name="sql">New SQL string</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IStatement.Append(System.String)">
            <summary>
            Append the statement
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IStatement.Clear">
            <summary>
            Clear the statement
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IStatement.GetSqlString">
            <summary>
            Returns the SQL with the parameter values inserted as string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IStatement.SetParameter(System.String,System.Object)">
            <summary>
            Set parameter value
            </summary>
            <param name="parameter">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IStatement.GetParameter(System.String)">
            <summary>
            Get parameter value
            </summary>
            <param name="parameter">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IStatement.IsEmpty">
            <summary>
            True if the statement is empty
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IStatement.Item(System.String)">
            <summary>
            Get or set parameters
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IStatement.CommandText">
            <summary>
            Get or set the parameterized query, the command text
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IStatement.ParameterNames">
            <summary>
            The collection of defined parameter names
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IStatement.UseAgrParser">
            <summary>
            Set or get whether the statement will be parsed as Agresso SQL syntax.
            Default is false.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.IStatement.Parse">
            <summary>
            Set or get whether the statement will be parsed at all. Default true.
            Set to false only if you use pure parameterized queries, or execute provider specific SQL that does not need parsing.
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.ITitles">
            <summary>
            Interface to Agresso titles
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ITitles.GetTitle(System.Int32)">
            <summary>
            Get title with the given title number for the current language
            </summary>
            <param name="titleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.ITitles.GetTitle(System.Int32,System.String)">
            <summary>
            Get title with the given title number for the current language. Return a default title if the title is not found.
            </summary>
            <param name="titleNumber"></param>
            <param name="defaultTitle"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Common.NamedEvents.NamedEventAttribute">
            <summary>
            Marks a class as a subscriber of named events. Family and event name can not be wildcarded (*).
            </summary>
        </member>
        <member name="M:ACT.Common.NamedEvents.NamedEventAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Mark a class as a subscriber of named events.
            </summary>
            <param name="familyName">Customisation family i.e. "AUTHENTICATION"</param>
            <param name="eventName">Event name i.e. "LDAP"</param>
            <param name="description">Description</param>
        </member>
        <member name="M:ACT.Common.NamedEvents.NamedEventAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Mark a class as a subscriber of named events.
            </summary>
            <param name="familyName">Customisation family i.e. "AUTHENTICATION"</param>
            <param name="eventName">Event name i.e. "LDAP"</param>
            <param name="description">Description</param>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:ACT.Common.NamedEvents.NamedEventAttribute.Family">
            <summary>
            Customisation family. I.e. "AUTHENTICATION"
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.NamedEventAttribute.Event">
            <summary>
            Event name. I.e. "LDAP"
            </summary>
        </member>
        <member name="P:ACT.Common.NamedEvents.NamedEventAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.IExecutionEngine">
            <summary>
            Performs execution of tasks collection wrapped in a <see cref="T:Agresso.Interface.CommonExtension.Tasks.IJob"/>
            </summary>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IExecutionEngine.CreateJob">
            <summary>
            Create a new job
            </summary>
            <returns>The job created</returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.IExecutionEngine.Execute(Agresso.Interface.CommonExtension.Tasks.IJob)">
            <summary>
            Execute all tasks in given job
            </summary>
            <param name="job">Job to be executed</param>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.ExecutionStatus">
            <summary>
             The result of execution of <see cref="T:Agresso.Interface.CommonExtension.Tasks.IJob"/> by <see cref="T:Agresso.Interface.CommonExtension.IExecutionEngine"/>
            </summary>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.ExecutionStatus.Canceled">
            <summary>
            Task has been canceled
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.ExecutionStatus.Exception">
            <summary>
            Task has been canceled because of an exception
            </summary>
        </member>
        <member name="F:Agresso.Interface.CommonExtension.ExecutionStatus.Finished">
            <summary>
            Task completed succesfully
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.IJob">
            <summary>
            Complete piece of work that can be executed by <see cref="T:Agresso.Interface.CommonExtension.IExecutionEngine"/>
            </summary>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IJob.AddTask(Agresso.Interface.CommonExtension.Tasks.ITask)">
            <summary>
            Adds a new task to the job. While executing the job, it will be executed after all previously added tasks
            </summary>
            <param name="task">Task to be added to tasks execution list</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IJob.AddTasks(Agresso.Interface.CommonExtension.Tasks.ITask[])">
            <summary>
            Adds a list of tasks to the job. While executing the job, these tasks will be executed one by one
            </summary>
            <param name="tasks">List of tasks to be added to tasks execution list</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IJob.AddParallelTasks(Agresso.Interface.CommonExtension.Tasks.IParallelTaskCollection)">
            <summary>
            Adds a parallel tasks collection to the job. 
            While executing the job, all the tasks in parallelTasks collection will be executed in parallel after all previously added tasks.
            </summary>
            <param name="parallelTasks">The collection of tasks to be executed in parallel</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IJob.CreateParallelTasks">
            <summary>
            Creates a collection of parallel tasks
            </summary>
            <returns>The parallel tasks collection created</returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Tasks.IJob.MaxParallelism">
            <summary>
            Maximum number of threads run in parallel. If there is no limit, set to 0 (default)
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.IParallelTaskCollection">
            <summary>
            Collection of tasks to be executed in parallel
            </summary>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IParallelTaskCollection.AddTask(Agresso.Interface.CommonExtension.Tasks.ITask)">
            <summary>
            Add a parallel task
            </summary>
            <param name="task">The task to add</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IParallelTaskCollection.AddTasks(Agresso.Interface.CommonExtension.Tasks.ITask[])">
            <summary>
            An array of parallel tasks to add
            </summary>
            <param name="tasks">Tasks to execute in parallel</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IParallelTaskCollection.ToArray">
            <summary>
            Get the parallel task collection as an array
            </summary>
            <returns>Array of parallel tasks</returns>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.IParentTask">
            <summary>
            Task that can contain subtasks
            </summary>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.ITask">
            <summary>
            Basic task structure
            </summary>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.ITask.Execute">
            <summary>
            Operation to execute for this task
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Tasks.ITask.Name">
            <summary>
            Name of the task
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IParentTask.OnSetupSubTasks">
            <summary>
            Setup sub tasks if necessary
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IParentTask.AddSubTask(Agresso.Interface.CommonExtension.Tasks.ITask)">
            <summary>
            Add a sub task
            </summary>
            <param name="subTask">The task to add as a child task</param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.IParentTask.GetSubTasks">
            <summary>
            Gets the sub task collection
            </summary>
            <returns>The collection of tasks</returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Tasks.IParentTask.SubTasks">
            <summary>
            The sub tasks managed by this task.
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.ParentTaskBase`1">
            <summary>
            Initializable parent task that can contain subtasks which gives a result
            </summary>
            <typeparam name="T">Initial argument and result data type</typeparam>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.ParentTaskBase`2">
            <summary>
            Initializable parent task that can contain subtasks which gives a result
            </summary>
            <typeparam name="T">Initial argument and result data type</typeparam>
            <typeparam name="TO">Result data type</typeparam>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.TaskBase`2">
            <summary>
            Initializable task base class to inherit from which gives a result
            </summary>
            <typeparam name="T">Initial argument data type</typeparam>
            <typeparam name="TO">Output data type</typeparam>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.FireTaskCompleted(`1)">
            <summary>
            Notifies any subscribers to the <see cref="E:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.TaskCompleted"/> event. Call this method when the task is done. 
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.Initialize(System.Object,Agresso.Interface.CommonExtension.Tasks.TaskCompletedEventArgs{`0})">
            <summary>
            Initialize the task
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.OnInitialized(System.Object,Agresso.Interface.CommonExtension.Tasks.TaskCompletedEventArgs{`0})">
            <summary>
            Hook for adding initialization behavior. It will be called from <see cref="M:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.Initialize(System.Object,Agresso.Interface.CommonExtension.Tasks.TaskCompletedEventArgs{`0})"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.Execute">
            <summary>
            Execute the task.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.Name">
            <summary>
            Task name used for identification
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.InitArg">
            <summary>
            Initial argument for the task
            </summary>
        </member>
        <member name="E:Agresso.Interface.CommonExtension.Tasks.TaskBase`2.TaskCompleted">
            <summary>
            This event will be raised once the task completes
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.ParentTaskBase`2.OnSetupSubTasks">
            <summary>
            Template method for setting up the sub tasks.
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.ParentTaskBase`2.AddSubTask(Agresso.Interface.CommonExtension.Tasks.ITask)">
            <summary>
            Template method for adding a sub task
            </summary>
            <param name="subTask"></param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.ParentTaskBase`2.GetSubTasks">
            <summary>
            Template method for getting a sub task.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Tasks.ParentTaskBase`2.SubTasks">
            <summary>
            The sub tasks managed by this task.
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.TaskBase`1">
            <summary>
            Initializable task base class to inherit from which gives a result
            </summary>
            <typeparam name="T">Initial argument and result data type</typeparam>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Tasks.TaskCompletedEventArgs`1">
            <summary>
            Task completed event argument
            </summary>
            <typeparam name="T">The type of result</typeparam>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Tasks.TaskCompletedEventArgs`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Tasks.TaskCompletedEventArgs`1.Result">
            <summary>
            Output result of task
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.ICallContext">
            <summary>
            Call context tells you in what context the client has called the code
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ICallContext.Client">
            <summary>
            Client code
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ICallContext.SysSetupCode">
            <summary>
            System setup code
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ICallContext.Version">
            <summary>
            Version (for Agresso Planner module only)
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ICallContext.MenuId">
            <summary>
            Menu id of the Agresso menu item this call is coming from (may be empty)
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ICallContext.MenuModule">
            <summary>
            The Agresso module we currently are working with (may be empty)
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.ComponentBase">
            <summary>
            Internal base class for implementations of IManagerComponent
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.IManagerComponent">
            <summary>
            Interface to a representation of an Agresso component (called managers in Agresso)
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.IManagerComponent.RegisterFieldValidationDelegate(System.String,System.String,Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler)">
            <summary>
            Register an <see cref="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler"/> for the specified 
            <paramref name="table"/> and <paramref name="column"/>
            </summary>
            <param name="table">Name of the current table</param>
            <param name="column">Name of the column to be validated</param>
            <param name="handler">The <see cref="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler"/> for the defined <paramref name="table"/> and <paramref name="column"/></param>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.IManagerComponent.RegisterPostFieldValidationDelegate(System.String,System.String,Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler)">
            <summary>
            Register an <see cref="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler"/> for the specified 
            <paramref name="table"/> and <paramref name="column"/> to be executed after standard validation is performed.
            </summary>
            <param name="table">Name of the current table</param>
            <param name="column">Name of the column to be validated</param>
            <param name="handler">The <see cref="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler"/> for the defined <paramref name="table"/> and <paramref name="column"/></param>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnBeforeSave">
            <summary>
            The event is raised during save, before the transaction is started and the data is validated
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnPreSave">
            <summary>
            The event is raised during save, after the transaction has started but before anything has
            been saved.
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnSave">
            <summary>
            Real save
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnPostSave">
            <summary>
            The event is raised after data has been saved, but before the transaction is comitted
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnAfterSave">
            <summary>
            The event is raised after a successful commit of the transaction
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnSelect">
            <summary>
            The event is raised when selecting data
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnValidate">
            <summary>
            Raised when validating the data
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnGeneric">
            <summary>
            Generic event. Some managers raises this event on special occations.
            For example the Agresso.Module.TravelExpenseManager raises this event
            when calculating allowence (CalcAllow)
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.IManagerComponent.OnNew">
            <summary>
            Raised when getting a new dataset or creating a dataset structure
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.IManagerComponent.IsInSave">
            <summary>
            True if we currently are in a save
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.IManagerComponent.Manager">
            <summary>
            The component (Agresso.Foundation.ManagerBase) that triggers the events on this class
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ComponentBase.RegisterFieldValidationDelegate(System.String,System.String,Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler)">
            <summary>
            Register an <see cref="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler"/> for the specified 
            <paramref name="table"/> and <paramref name="column"/>
            </summary>
            <param name="table">Name of the current table</param>
            <param name="column">Name of the column to be validated</param>
            <param name="handler">The <see cref="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler"/> for the defined <paramref name="table"/> and <paramref name="column"/></param>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ComponentBase.RegisterPostFieldValidationDelegate(System.String,System.String,Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler)">
            <summary>
            Register an <see cref="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler"/> for the specified 
            <paramref name="table"/> and <paramref name="column"/> to be executed after standard validation is performed.
            </summary>
            <param name="table">Name of the current table</param>
            <param name="column">Name of the column to be validated</param>
            <param name="handler">The <see cref="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler"/> for the defined <paramref name="table"/> and <paramref name="column"/></param>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnBeforeSave">
            <summary>
            The event is raised during save, before the transaction is started and the data is validated
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnPreSave">
            <summary>
            The event is raised during save, after the transaction has started but before anything has
            been saved.
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnSave">
            <summary>
            Real save
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnPostSave">
            <summary>
            The event is raised after data has been saved, but before the transaction is comitted
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnAfterSave">
            <summary>
            The event is raised after a successful commit of the transaction
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnSelect">
            <summary>
            The event is raised when selecting data
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnValidate">
            <summary>
            Raised when validating the data
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnGeneric">
            <summary>
            Generic event. Some managers raises this event on special occations.
            For example the Agresso.Module.TravelExpenseManager raises this event
            when calculating allowence (CalcAllow)
            </summary>
        </member>
        <member name="E:Agresso.Interface.FrameworkExtension.ComponentBase.OnNew">
            <summary>
            Raised when getting a new dataset or creating a dataset structure
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ComponentBase.IsInSave">
            <summary>
            True if we currently are in a save
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ComponentBase.Manager">
            <summary>
            The component (Agresso.Foundation.ManagerBase) that triggers the events on this class
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.ComponentAttribute">
            <summary>
            Mark a class as a Component extension
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ComponentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of ComponentAttribute class describing a component extension
            </summary>
            <param name="managerName">Name of manager (type name)</param>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ComponentAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of ComponentAttribute class describing a component extension
            </summary>
            <param name="managerName">Name of manager (type name)</param>
            <param name="managedEntity">Manager's managed entity</param>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ComponentAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of ComponentAttribute class describing a component extension
            </summary>
            <param name="managerName">Name of manager (type name)</param>
            <param name="managedEntity">Manager's managed entity</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ComponentAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of ComponentAttribute class describing a component extension
            </summary>
            <param name="managerName">Name of manager (type name)</param>
            <param name="managedEntity">Manager's managed entity</param>
            <param name="description">Description</param>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ComponentAttribute.ManagerName">
            <summary>
            The System.Type name of the manager to customise, wildcard (*) allowed
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ComponentAttribute.ManagedEntity">
            <summary>
            The System.Type name of the manager's managed entity, wildcard (*) allowed
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ComponentAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnBeforeSaveEventHandler">
            <summary>
            Handler for the before save event
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnPreSaveEventHandler">
            <summary>
            Handler for the pre save event
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnSaveEventHandler">
            <summary>
            Handler for the save event
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnPostSaveEventHandler">
            <summary>
            Handler for the post save event
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnAfterSaveEventHandler">
            <summary>
            Handler for the after save event
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnNewEventHandler">
            <summary>
            Handler for the new event
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnGenericEventHandler">
            <summary>
            Handler for generic events
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnValidateEventHandler">
            <summary>
            Handler for validate events
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnValidateFieldEventHandler">
            <summary>
            Handler for validate field events
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.OnSelectEventHandler">
            <summary>
            Handler for the select event
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.FrameWorkExtensionEventArgs">
            <summary>
            Base class for all event arguments in FrameWorkExtension
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.FrameWorkExtensionEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext)">
            <exclude/>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.FrameWorkExtensionEventArgs.Context">
            <summary>
            Current call context.
            <seealso cref="T:Agresso.Interface.FrameworkExtension.ICallContext"/>
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.BeforeSaveEventArgs">
            <summary>
            Event arguments for the before save event
            </summary>
        </member>
        <member name="F:Agresso.Interface.FrameworkExtension.BeforeSaveEventArgs.abort">
            <summary>
            Cancel the event
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.BeforeSaveEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext)">
            <exclude/>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.BeforeSaveEventArgs.Cancel">
            <summary>
            Cancel the event by setting Cancel = true
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.BeforeSaveEventArgs.DS">
            <summary>
            DataSet being saved
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.PostSaveEventArgs">
            <summary>
            Event arguments for the post save event
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.PostSaveEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext)">
            <exclude/>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.PostSaveEventArgs.DS">
            <summary>
            DataSet saved
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.SaveEventArgs">
            <summary>
            Event arguments for the save event
            </summary>
        </member>
        <member name="F:Agresso.Interface.FrameworkExtension.SaveEventArgs._abort">
            <summary>
            Cancel the event
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.SaveEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext)">
            <exclude/>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.SaveEventArgs.Cancel">
            <summary>
            Abort the operation by setting Cancel = true
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.SaveEventArgs.DS">
            <summary>
            DataSet being changed
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.SelectEventArgs">
            <summary>
            Event arguments for the selec event
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.SelectEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext)">
            <exclude/>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.SelectEventArgs.DS">
            <summary>
            DataSet retrieved
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.ValidateEventArgs">
            <summary>
            Event arguments for the validate event
            </summary>
        </member>
        <member name="F:Agresso.Interface.FrameworkExtension.ValidateEventArgs._abort">
            <summary>
            Cancel the event
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ValidateEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext)">
            <exclude/>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ValidateEventArgs.Cancel">
            <summary>
            Abort the operation by setting Cancel = true (Tell that the DS is invalid)
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ValidateEventArgs.DS">
            <summary>
            DataSet being validated
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs">
            <summary>
            Event arguments 
            </summary>
        </member>
        <member name="F:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs._abort">
            <summary>
            Cancel the event
            </summary>
        </member>
        <member name="F:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs._originalValidation">
            <summary>
            The Agresso standard validation result.
            </summary>
        </member>
        <member name="F:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs._row">
            <summary>
            The DataRow being validated
            </summary>
        </member>
        <member name="F:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs._column">
            <summary>
            The column being validated
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext,System.Data.DataRow,System.String,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs.SetValidationError(System.String)">
            <summary>
            Sets a validation error defined by the <paramref name="errorMsg"/> on the current field
            </summary>
            <param name="errorMsg">The error message to be set on the current field</param>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs.ClearValidationError">
            <summary>
            Clears any errors on the current field
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs.FieldName">
            <summary>
            The name of the column in the data row being validated
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs.Row">
            <summary>
            The data row containing the value to be validated
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs.Cancel">
            <summary>
            Abort the operation by setting Cancel = true (Tell that the Field is invalid)
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.ValidateFieldEventArgs.OriginalValidationResult">
            <summary>
            The result of the original validation in Agresso.
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.GenericEventArgs">
            <summary>
            Event arguments for the generic events
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.GenericEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext)">
            <exclude/>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.GenericEventArgs.Identifier">
            <summary>
            Generic event idetifier fex "CalcAllow"
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.GenericEventArgs.DS">
            <summary>
            Dataset
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.GenericEventArgs.Param">
            <summary>
            Generic event parameters
            </summary>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.GenericEventArgs.Continue">
            <summary>
            Get or set whether Agresso should continue or stop further processing
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.NewEventArgs">
            <summary>
            Event arguments for the new event
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.NewEventArgs.#ctor(Agresso.Interface.FrameworkExtension.ICallContext)">
            <exclude/>
        </member>
        <member name="P:Agresso.Interface.FrameworkExtension.NewEventArgs.DS">
            <summary>
            DataSet containing the structure
            </summary>
        </member>
        <member name="T:Agresso.Interface.FrameworkExtension.IProjectFrameWork">
            <summary>
            IProjectFrameWork must be implemented to create framework extensions
            </summary>
        </member>
        <member name="M:Agresso.Interface.FrameworkExtension.IProjectFrameWork.Initialize(Agresso.Interface.FrameworkExtension.IManagerComponent)">
            <summary>
            Initialize the framework extension
            </summary>
            <param name="component">Component being customised</param>
        </member>
        <member name="T:Agresso.ServerExtension.ServerProgramAttribute">
            <summary>
            Defines a standalone server program
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.ServerProgramAttribute.#ctor(System.String)">
            <summary>
            Defines a standalone server program
            </summary>
            <param name="name">Report name</param>
        </member>
        <member name="P:Agresso.ServerExtension.ServerProgramAttribute.Name">
            <summary>
            Report name
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.ColumnDescriptor">
            <summary>
            Description of a column
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.#ctor(System.String,Agresso.Interface.CommonExtension.Data.ColumnDataType,System.Int32)">
            <summary>
            Default constructor with int captionId
            </summary>
            <param name="name"></param>
            <param name="dataType"></param>
            <param name="captionId"></param>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.#ctor(System.String,Agresso.Interface.CommonExtension.Data.ColumnDataType,System.String)">
            <summary>
            Costructor with string caption
            </summary>
            <param name="name"></param>
            <param name="dataType"></param>
            <param name="caption"></param>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.Name">
            <summary>
            The name of a column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.DefaultValue">
            <summary>
            Default value for a column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.DataType">
            <summary>
            The data type of a column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.Caption">
            <summary>
            The caption of a column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.IsReadonly">
            <summary>
            Is this column readonly 
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.IsHidden">
            <summary>
            Is this column hidden 
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.IsGlobal">
            <summary>
            Is this column Global column.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.Value">
            <summary>
            Sets a value for this column
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.PixelWidth">
            <summary>
            Sets a pixel width for this column (user interface hint)
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptor.TextCase">
            <summary>
            Sets a pixel width for this column (user interface hint)
            </summary>
        </member>
        <member name="T:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList">
            <summary>
            A list of columns
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.Add(System.String,Agresso.Interface.CommonExtension.Data.ColumnDataType,System.Int32)">
            <summary>
            Adds a column to the list. There is no check on uniqueness of the name.
            </summary>
            <param name="columnName"></param>
            <param name="dataType"></param>
            <param name="captionId"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.Add(System.String,Agresso.Interface.CommonExtension.Data.ColumnDataType,System.String)">
            <summary>
            Adds a column to the list. There is no check on uniqueness of the name.
            </summary>
            <param name="columnName"></param>
            <param name="dataType"></param>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.Lookup(System.String)">
            <summary>
            Looks up the column by its Name property. Returns null when the column isn't found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.IndexOf(System.String)">
            <summary>
            Looks up the column by its Name property. Returns -1 when the column isn't found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.Count">
            <summary>
            Returns the number of columns in the list
            </summary>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.Item(System.Int32)">
            <summary>
            Returns the column at the specified index. If the index is invalid, null will be returned.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.CommonExtension.Data.ColumnDescriptorList.Columns">
            <summary>
            Returns the defined columns
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IActionCommand">
            <summary>
            Execute named action. For instance button and menu clicks.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ITopGenCommand">
            <summary>
            Base class for all commands
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommand.Execute">
            <summary>
            Executes command. TopGen will raise the same events as if a user performed the command.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionCommand.Section">
            <summary>
            Section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionCommand.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionCommand.ActionResult">
            <summary>
            Action result.
            True if action was not cancelled, false otherwise.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IAddRowCommand">
            <summary>
            Adds a new row to a tablesection
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IAddRowCommand.AddedRow">
            <summary>
            The row added. It is null before the Execute() method is called.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IAddRowCommand.AddRowResult">
            <summary>
            True if row added was successfuly, false otherwise.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IClearScreenCommand">
            <summary>
            Clears the screen.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IClearScreenCommand.ClearScreenResult">
            <summary>
            True if screen was successfully cleared.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.DataLoadState">
            <summary>
            The state of loaded data
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ILoadCommand">
            <summary>
            Performs a load with key value pairs against the underlying business logic.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ILoadCommand.AddFilter(System.String,System.Object)">
            <summary>
            Add field name and associated value for data search. Internally  this uses a "LIKE" operator, so wildcards are allowed.
            </summary>
            <param name="name">name of the field</param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ILoadCommand.AddFilters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add field names and associated values for data search. Internally  this uses a "LIKE" operator, so wildcards are allowed.
            </summary>
            <param name="filters">Dictionary containing names of fields as keys and values of fields as dictionary values</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ILoadCommand.Section">
            <summary>
            Section containing query fields
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ILoadCommand.LoadState">
            <summary>
            Result of loaded data
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISaveCommand">
            <summary>
            Save the form data. Calls OnSaving, IUseCase.Save and OnSaved.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISaveCommand.SaveResult">
            <summary>
            True if data was successfully saved.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ITopGenCommandFactory">
            <summary>
            TopGen command factory is used to create commands.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommandFactory.CreateLoadCommand(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Create a load command. Used to simulate the user filling out key fields or loading a table section with UseFilterForLoading = true.
            </summary>
            <param name="section">Section with key fields</param>
            <returns>LoadCommand object</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommandFactory.CreateActionCommand(Agresso.Interface.TopGenExtension.IMenuItem)">
            <summary>
            Create action command. Used to simulate the user clicking a menu item.
            </summary>
            <param name="menuItem">Menu item to "click"</param>
            <returns>ActionCommand object</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommandFactory.CreateActionCommand(Agresso.Interface.TopGenExtension.IField,System.Data.DataRow)">
            <summary>
            Creates action command. Used to simulate the user clicking a button or similar action.
            </summary>
            <param name="field">Field / Button</param>
            <param name="row">Current row (may be null)</param>
            <returns>ActionCommand object</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommandFactory.CreateActionCommand(System.String,Agresso.Interface.TopGenExtension.ISection,Agresso.Interface.TopGenExtension.IField,System.String,System.Data.DataRow)">
            <summary>
            Creates action command. Used to simulate the user clicking a button or similar action.
            </summary>
            <param name="action">Action name, like defined in the TopGen editor. For instance 'action:uploadfiles'.</param>
            <param name="section">Section (may be null)</param>
            <param name="field">Field / Button (may be null)</param>
            <param name="tableName">Table</param>
            <param name="row">Current row (may be null)</param>
            <returns>ActionCommand object</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommandFactory.CreateAddRowCommand(Agresso.Interface.TopGenExtension.ISection,System.String,System.Data.DataRow)">
            <summary>
            Creates add row command. Used to simulate the user clicking the add row button of a table section.
            </summary>
            <param name="section">Section</param>
            <param name="tableName">Table name</param>
            <param name="row">Parent row</param>
            <returns>AddRowCommand object</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommandFactory.CreateValidateFieldCommand(Agresso.Interface.TopGenExtension.IField,System.Data.DataRow)">
            <summary>
            Creates validate field command. Used to simulate the user leaving a field. The field's HasValidation property must be true.
            </summary>
            <param name="field">Field to be validated</param>
            <param name="row">Validation context</param>
            <returns>ValidateFieldCommand object</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommandFactory.CreateSaveCommand">
            <summary>
            Creates save command. Used to simulate the user clicking the save button.
            </summary>
            <returns>SaveCommand object</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITopGenCommandFactory.CreateClearScreenCommand">
            <summary>
            Creates clear screen command. Used to simulate the user clicking the clear button.
            </summary>
            <returns>ClearScreenCommand object</returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IValidateFieldCommand">
            <summary>
            Validates a field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IValidateFieldCommand.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IValidateFieldCommand.ValidateFieldResult">
            <summary>
            Validation result
            true - field valid
            false - field invalid
            null - field has not been validated
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IDialogHandler">
            <summary>
            Handler for simple dialogs.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDialogHandler.GetOrCreate(System.String)">
            <summary>
            Looks up the dialog or creates it when it doesn't exist.
            </summary>
            <param name="dialogId"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDialogHandler.Remove(System.String)">
            <summary>
            Removes the dialog from the collection
            </summary>
            <param name="dialogId"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDialogHandler.Open(Agresso.Interface.TopGenExtension.IDialog)">
            <summary>
            Open simple dialog
            </summary>
            <param name="dialog"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDialogHandler.Open(System.String,System.Int32,System.String,Agresso.Interface.TopGenExtension.DialogButtonCollection)">
            <summary>
            Open simple dialog
            </summary>
            <param name="dialogId">Unique id of dialog to create or get</param>
            <param name="dialogTitleId">Title id of dialog</param>
            <param name="dialogText">Text in dialog</param>
            <param name="buttonCollection">Button combination</param>
            <returns>Dialog to be opened</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDialogHandler.Open(System.String,System.String,System.String,Agresso.Interface.TopGenExtension.DialogButtonCollection)">
            <summary>
            Open simple dialog
            </summary>
            <param name="dialogId">Unique id of dialog to create or get</param>
            <param name="dialogTitle">Title of dialog</param>
            <param name="dialogText">Text in dialog</param>
            <param name="buttonCollection">Button combination</param>
            <returns>Dialog to be opened</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDialogHandler.Open(System.String,System.Int32,System.String,System.Int32,Agresso.Interface.TopGenExtension.DialogButtonCollection)">
            <summary>
            Open simple dialog
            </summary>
            <param name="dialogId">Unique id of dialog to create or get</param>
            <param name="dialogTitleId">Title id of dialog</param>
            <param name="dialogText">Text in dialog</param>
            <param name="inputBoxTitleId">Title of input field</param>
            <param name="buttonCollection">Button combination</param>
            <returns>Dialog to be opened</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDialogHandler.Open(System.String,System.String,System.String,System.String,Agresso.Interface.TopGenExtension.DialogButtonCollection)">
            <summary>
            Open simple dialog
            </summary>
            <param name="dialogId">Unique id of dialog to create or get</param>
            <param name="dialogTitle">Title of dialog</param>
            <param name="dialogText">Text in dialog</param>
            <param name="inputBoxTitle">Title of input field</param>
            <param name="buttonCollection">Button combination</param>
            <returns>Dialog to be opened</returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialogHandler.Item(System.String)">
            <summary>
            Looks up the dialog
            </summary>
            <param name="dialogId"></param>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IFormViewState">
            <summary>
            Access to the view state of the form.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.GetGridFilter(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Gets the filter from a grid.
            </summary>
            <param name="tableSection"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.SetGridFilter(Agresso.Interface.TopGenExtension.ISection,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Sets a filter in a grid.
            </summary>
            <param name="tableSection"></param>
            <param name="filters"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.ClearGridFilter(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Clear the filter of a grid.
            </summary>
            <param name="tableSection"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.ClosePage">
            <summary>
            Ask the renderer to close the current page.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.SetFocus(Agresso.Interface.TopGenExtension.IField)">
            <summary>
            Ask the renderer to set the focus to a specific field on the page.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.GetRestriction(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Gets the restriction string for a specific section definition.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.GetSelectedRow(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Returns the row originally set by the renderer via InitializeSelectedRow.
            This method does not take in consideration SetSelectedRow, SelectNextRow, SelectPreviousRow calls!
            </summary>
            <param name="section"></param>
            <returns>Returns the row originally set by the renderer</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.SetSelectedRow(Agresso.Interface.TopGenExtension.ISection,System.Data.DataRow)">
            <summary>
            Changes the selected row which has been initialized by the renderer via InitializeSelectedRow.
            This method should be used by the UI-controller to inform the renderer a new row has been selected.
            </summary>
            <remarks>
            This method should be used by the UI-controller to change the original selected row.
            </remarks>
            <param name="section"></param>
            <param name="row"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.SelectNextRow(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Changes the selected row which has been initialized by the renderer via InitializeSelectedRow.
            This method should be used by the UI-controller to inform the renderer to select the next row.
            This method will override a previous call to SelectPreviousRow or SetSelectedRow.
            </summary>
            <remarks>
            This method should be used by the UI-controller to change the original selected row.
            </remarks>
            <param name="section"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.SelectPreviousRow(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Changes the selected row which has been initialized by the renderer via InitializeSelectedRow.
            This method should be used by the UI-controller to inform the renderer to select the previous row.
            This method will override a previous call to SelectNextRow or SetSelectedRow.
            </summary>
            <remarks>
            This method should be used by the UI-controller to change the original selected row.
            </remarks>
            <param name="section"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.GetSectionRows(System.Data.DataRow,Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Returns all the sibling rows for a section filtered by ISectionDef.Restriction and sorted by ISectionDef.SortString.
            This corresponds to the order the UI-presents the rows on screen.
            The siblings for an orderline 2 for order "ORD1" in an order/detail relationship, are all the orderlines for order "ORD1".
            </summary>
            <param name="siblingRow">The row that's part of the collection (the orderline in the eaxmple)</param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.GetSortedAndFilteredSectionData(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            use this to get a sorted and filtered IRow collection of the data  the section 
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.ClearSelectedRow(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Removes the selected row override of the UI-controller.
            For the renderer this means that the selected row has not been changed by the UI-controller.
            </summary>
            <remarks>
            This method should be used by the UI-controller to undo a SetSelectedRow.
            </remarks>
            <param name="section"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.OpenDialog(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Ask the renderer to open a specific dialog section when the renderer gains control.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.ShowPrintPreview">
            <summary>
            The renderer will open the print preview screen.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.CloseDialog">
            <summary>
            Ask the renderer to close the active dialog section when the renderer gains control.
            Call this once for each dialog the renderer should close 
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.ForceRepaint(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Make sure that a specific section is repainted by the renderer.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.SetCheckBoxHeader(Agresso.Interface.TopGenExtension.ISection,System.Boolean)">
            <summary>
            Sets or clears the header-checkbox for a Table Section.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.RunFieldHelp(Agresso.Interface.TopGenExtension.IField)">
            <summary>
            Execute fieldhelp for requested field
            </summary>
            <param name="field">Field</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.GetActiveTab">
            <summary>
            Returns the curretly selected page tab.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.GetActiveInlineTab(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Returns the selected inline tabe in a tab group. 
            </summary>
            <param name="tabContainer">The tab group section definition</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.Open(System.String)">
            <summary>
            Open a new screen from the UI Controller.  The param argument can be either "topgen:menu_id=AB123" or just the menu ID "AB123".
            To open 'external' data, use "external:MyFile.doc" (used by Reporting).
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.ClearScreen">
            <summary>
            Clear the screen contents from UI Controller. Fires the ClearScreen event.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.SaveScreen">
            <summary>
            Save the screen contents from UI Controller. Fires the SaveScreen event.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.RefreshMenu">
            <summary>
            Refresh menu pane
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.RefreshTaskList">
            <summary>
            Refresh task list pane
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.SetFocusToSystemButton(Agresso.Interface.TopGenExtension.ISection,Agresso.Interface.TopGenExtension.SystemButtonType)">
            <summary>
            Force focus to a system button within a section
            </summary>
            <param name="section"></param>
            <param name="systemButtonType"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.WebReloadData">
            <summary>
            Ask the WEB-renderer to trigger a load event after field help assigns the selected row to a key-field.
            </summary>
            <remarks>Only supported by the WEB-renderer</remarks>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.WebUnlockScreen">
            <summary>
            Specify that web renderer should unclock screen regardless of state of key values (filled in or not)
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.OpenLink(System.String,System.Boolean,System.Boolean)">
            <summary>
            Ask the WEB-renderer to open the url in a browser. Provided URL can be opened as a new activity, as a step in the current activity or as an overlay.
            By default the url is opened as a step in the current activity if no more parameters are provided.
            </summary>
            <param name="url">The url to open</param>
            <param name="newActivity">True to open in a new activity tab. False (Default) to open in the current activity</param>
            <param name="overlay">True to open as an overlay in the current activity. False to open as a step. <b>NOTE: </b> this parameter only applies when <b>currentActivity</b> is true</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFormViewState.WinAdjustColumnsToData(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Ask the WIN-renderer to perform a size-to-fit on the requested table section.
            </summary>
            <param name="section"></param>
            <returns></returns>
            <remarks>Only supported by the WIN-renderer for table sections</remarks>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormViewState.LookForDocuments">
            <summary>
            Ask the Renderer to look for documents in the archive based on current screen context.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormViewState.DialogDefinition">
            <summary>
            the renderer can use the uidialogentity directly instead of having to create a topgen definition 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormViewState.ActivateTab">
            <summary>
            Set selected page tab
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormViewState.ActivateInlineTab">
            <summary>
            Set selected inline tab.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormViewState.CurrentDialog">
            <summary>
            Returns the section of the active, shown dialog.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormViewState.WebInLockMode">
            <summary>
            Used by the WEB-renderer internally to flag if the active form can be saved or not.
            When not all primary keys are filled in, the InLockMode is true.
            </summary>
            <remarks>Only supported by the WEB-renderer</remarks>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISectionTransferList">
            <summary>
            Multicolumn transferlist model
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.AddRow">
            <summary>
            Add a new row to the <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/>. Returns a new <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/>
            When you add a new row, it is appended to available rows collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.SelectedRows(System.Boolean)">
            <summary>
            All selected rows within one of the <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> views (available or transferred).
            </summary>
            <param name="available">if it is true method returns selected rows from available view, otherwise from transferred view</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.ClearRows">
            <summary>
            Remove all <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> from current <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> (both from available rows transferred rows)
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.SelectRows(System.Boolean)">
            <summary>
            Mark all <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> in a specific transferlist view (available rows or transferred rows) as selecteed
            </summary>
            <param name="available">if it is true method selects all rows in available view, otherwise in transferred view</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.RemoveSelection(System.Boolean)">
            <summary>
            From within a specific transferlist view (available rows or transferred rows), remove selection from all rows
            </summary>
            <param name="available">if it is true method clears selection in available view, otherwise in transferred view</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.MoveToAvailable">
            <summary>
            Move all selected <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> in transferred rows view to available rows view
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.MoveToTransferred">
            <summary>
            Move all selected <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> in available rows view to transferres rows view
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.FillFromDataSet(System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            Fill current <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> from given <see cref="T:System.Data.DataSet"/> based upon mapped <see cref="P:Agresso.Interface.TopGenExtension.ISection.TableName"/>
            Sort by given <paramref name="sortColumn"/>.
            </summary>
            <param name="ds"></param>
            <param name="sortColumn"></param>
            <param name="descending">default value is false</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.FillDataSetFromTransferList(System.Data.DataSet)">
            <summary>
            Fill passed <see cref="T:System.Data.DataSet"/> with data from current <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/>.
            <see cref="P:Agresso.Interface.TopGenExtension.ISection.TableName"/> determines which table to fill.
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.AcceptChanges">
            <summary>
            Apply changes to transfer list. Will set <see cref="P:Agresso.Interface.TopGenExtension.ISectionTransferList.HasChanges"/> to false.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.Reset">
            <summary>
            Resets current <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> to it's initial state:
            All <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> objects will be moved to available rows, with no selected rows.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTransferList.LocateNodeByColumnNameAndValue(System.String,System.String)">
            <summary>
            Locate a specific <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> by columnName and value
            </summary>
            <param name="columnName">The column to search</param>
            <param name="value">Row value to search for</param>
            <returns>The located row object, else null</returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTransferList.Options">
            <summary>
            Options for the current <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> object.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTransferList.Columns">
            <summary>
            <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> columns
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTransferList.RowCount">
            <summary>
            Total number of <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> in current <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/>.Sum of available rows and transferred rows.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTransferList.AvailableRows">
            <summary>
            Readonly collection of transfer list row located in the available view (left-most view)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTransferList.TransferredRows">
            <summary>
            Readonly collection of transfer list row located in the transferred view (right-most view)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTransferList.HasChanges">
            <summary>
            Flag stating if the different transferlist rows (available rows
            and transferred rows) have been modified since the last time 
            all changes were applied to the transferlist with use of <see cref="M:Agresso.Interface.TopGenExtension.ISectionTransferList.AcceptChanges"/>.
            When you initialize the transferlist for the first time, <see cref="P:Agresso.Interface.TopGenExtension.ISectionTransferList.HasChanges"/> 
            is false.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListOptions.AvailableTitle">
            <summary>
            Title for available/left view
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListOptions.TransferredTitle">
            <summary>
            Title for transferred/right view.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListOptions.KeyboardLookupColumn">
            <summary>
            The default column used when trying to locate a specific row with use of the keyboard. If not specified, will be defaulted
            to the first visible column of type Label
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListOptions.FilterOptions">
            <summary>
            Filter options for the current <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> object. If you set a filter
            on the current transferlist, the collections available rows and transferred rows will be filtered accordingly.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITransferListFilterOptions.ClearFilter">
            <summary>
            Clear filter for all columns
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListFilterOptions.FilteredColumns">
            <summary>
            List of columns that are filtered
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListFilterOptions.Item(System.String)">
            <summary>
            Get filtervalue for give column name
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ITransferListColumnCollection">
            <summary>
            All columns within a <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/>
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITransferListColumnCollection.AddColumn(Agresso.Interface.TopGenExtension.IField)">
             <summary>
             Add a new column to the current <see cref="T:Agresso.Interface.TopGenExtension.ITransferListColumnCollection"/>
             </summary>
            <param name="fieldDef"></param>
             <returns>name of new column</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITransferListColumnCollection.Contains(System.String)">
            <summary>
            Check to see if a column belongs to this <see cref="T:Agresso.Interface.TopGenExtension.ITransferListColumnCollection"/>
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListColumnCollection.TransferList">
            <summary>
            Get the "parent" <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> object for this collection
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListColumnCollection.Count">
            <summary>
            Number of columns in current <see cref="T:Agresso.Interface.TopGenExtension.ITransferListColumnCollection"/>
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListColumnCollection.Item(System.Int32)">
            <summary>
            Get a specific column name by index
            </summary>
            <param name="index"></param>
            <returns>column name</returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ITransferListRow">
            <summary>
            A transferlist row.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITransferListRow.SetValue(System.String,System.String)">
            <summary>
            Set value of current cell for given column in this row
            </summary>
            <param name="columnName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ITransferListRow.SetIconValue(System.String,System.Int32,System.Int32)">
            <summary>
            Convenience method for setting icon text ([iconid]=[iconTitleId]).
            </summary>
            <param name="columnName"></param>
            <param name="iconId"></param>
            <param name="iconTitle"></param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListRow.TransferList">
            <summary>
            Tne <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/> containing this <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/>
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListRow.IsRowAvailable">
            <summary>
            True if this <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> belong to transferred rows
            false if it belongs to available rows
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListRow.Selected">
            <summary>
            Is this <see cref="T:Agresso.Interface.TopGenExtension.ITransferListRow"/> selected or not.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListRow.Columns">
            <summary>
            Collection of transfer list column within this <see cref="T:Agresso.Interface.TopGenExtension.ISectionTransferList"/>
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListRow.Item(System.String)">
            <summary>
            Get or set value of current cell for given column in this row
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ITransferListRow.Index">
            <summary>
            Current row index (Note: Two rows can have the same index, 
            but they will always be in different transferlist views 
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISectionTreeNode">
            <summary>
            A node in a TopGen tree section
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTreeNode.AddChild(System.String,System.Int32,System.String,System.String)">
            <summary>
            Add a new childnode to this node
            </summary>
            <param name="title">Node title</param>
            <param name="icon">Node icon id</param>
            <param name="tag">Tag the node with additional data</param>
            <param name="command">Node command.</param>
            <returns>The new child of this node</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTreeNode.ExpandAll(System.Boolean)">
            <summary>
            Expand ourself and the node's children. Optionally the children will be expanded recursively.
            </summary>
            <param name="recursively">Expand all the children recursively as well</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTreeNode.CollapseAll(System.Boolean)">
            <summary>
            Collapse ourself and the node's children. Optionally the children will be expanded recursively.
            </summary>
            <param name="recursively">Collapse all the children recursively as well</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTreeNode.Remove">
            <summary>
            remove a node
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTreeNode.GetProperty(System.String)">
            <summary>
            Get property value by key
            </summary>
            <param name="key">Key name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTreeNode.SetProperty(System.String,System.String)">
            <summary>
            Set property value by key
            </summary>
            <param name="key">Key name</param>
            <param name="value">Value</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Key">
            <summary>
            return the node key value
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Tree">
            <summary>
            The tree this node belongs to
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Parent">
            <summary>
            Get parent of the node
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Children">
            <summary>
            Return children collection
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Title">
            <summary>
            get and set node title
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Command">
            <summary>
            Get and set node command
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Icon">
            <summary>
            Get and set node icon
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Tag">
            <summary>
            Get and set node tag
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Expanded">
            <summary>
            Get and set node expand state
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Selected">
            <summary>
            Get or set if node is selected 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.IsMarked">
            <summary>
            get and set node flag "isMarked
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNode.Properties">
            <summary>
            Enumerate properties
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISectionTreeNodeCollection">
            <summary>
            Collection of section tree nodes
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNodeCollection.Count">
            <summary>
            Return node children number
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTreeNodeCollection.Item(System.Int32)">
            <summary>
            Get a specific ISectionTreeNode by the position it holds in the ISectionTreeNodeCollection.
            </summary>
            <param name="position">Position in collection</param>
            <returns>Null or the found node item</returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISectionTree">
            <summary>
            Definition of the data in a tree section.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTree.Clear">
            <summary>
            Remove all nodes
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTree.GetNode(System.Int32)">
            <summary>
            Return a specific node by id
            </summary>
            <param name="key">int</param>
            <returns>INodeItem</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionTree.AddChild(System.String,System.Int32,System.String,System.String)">
            <summary>
            Add a new node to the tree root
            </summary>
            <param name="title">Node title</param>
            <param name="icon">Node icon id</param>
            <param name="tag">Tag the node with additional data</param>
            <param name="command">Node command.</param>
            <returns>The new child of this tree</returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTree.Section">
            <summary>
            The tree section 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTree.Count">
            <summary>
            Number of nodes
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionTree.Children">
            <summary>
            Return children collection
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.IProjectServer">
            <summary>
            Interface for extensions on existing server reports or services
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IProjectServer.Initialize(Agresso.ServerExtension.IReport)">
            <summary>
            Initialize 
            </summary>
            <param name="report">Interface to the report / service</param>
        </member>
        <member name="T:Agresso.ServerExtension.IServerProgram">
            <summary>
            Interface for standalone server programs as .NET assemblies
            Enter your server programs in aagfunction with:
            argument = 'TYPE_NAME', assembly = 'ASSEMBLY_NAME', func_name = 'REPORT_NAME' and func_type = 32
            Example:
            argument = MyNameSpace.MyClass, assembly = MyAssembly (no .dll), func_name = MYPROGRAM, func_type = 32
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerProgram.Initialize(Agresso.ServerExtension.IReport)">
            <summary>
            Initialize
            </summary>
            <param name="report">IReport interface to yourself</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerProgram.Run">
            <summary>
            Main routine
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerProgram.End">
            <summary>
            Called when the report ends
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.ServerProgramBase">
            <summary>
            Base class for standalone server programs
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.ServerProgramBase.Initialize(Agresso.ServerExtension.IReport,System.String)">
            <summary>
            Implementation of the Initialize event with given report name
            </summary>
            <param name="report">IReport interface</param>
            <param name="reportName">Report name</param>
        </member>
        <member name="M:Agresso.ServerExtension.ServerProgramBase.Initialize(Agresso.ServerExtension.IReport)">
            <summary>
            Initialize
            </summary>
            <param name="report">IReport interface to yourself</param>
        </member>
        <member name="M:Agresso.ServerExtension.ServerProgramBase.Run">
            <summary>
            Default implementation of Run
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.ServerProgramBase.End">
            <summary>
            Default implementation of End
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerProgramBase.Me">
            <summary>
            IReport interface to myself
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerProgramBase.Name">
            <summary>
            Report name
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.IParameters">
            <summary>
            Interface to the report / service parameters. Get and Set as well as the [] accessor gets or sets
            parameters to the running batch program or service. GetReportParameter and SetReportParameter on 
            the other hand gets or sets parameters to the report printout / arw files. To use GetReportParameter
            or SetReportParameter you have to call InitReportParameters first.
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IParameters.Get(System.String)">
            <summary>
            Get parameter with given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IParameters.Set(System.String,System.String)">
            <summary>
            Set parameter with given name
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.ServerExtension.IParameters.GetReportParameter(System.String)">
            <summary>
            Get report parameter
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IParameters.SetReportParameter(System.String,System.String)">
            <summary>
            Set report parameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.ServerExtension.IParameters.InitReportParameters">
            <summary>
            Initialize report parameters
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IParameters.ParameterNames">
            <summary>
            The names of all the parameters
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IParameters.Item(System.String)">
            <summary>
            Get or set parameter with the given name as string value
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.OnStartEventHandler">
            <summary>
            Handler for the start event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.ServerExtension.OnStopEventHandler">
            <summary>
            Handler for the stop event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.ServerExtension.OnCallReportEventHandler">
            <summary>
            Handler for the call report event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.ServerExtension.OnGenericEventHandler">
            <summary>
            Handler for generic events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.ServerExtension.OnUserQueryEventHandler">
            <summary>
            Handler for OnUserQuery event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.ServerExtension.QueryHandlerDelegate">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="queryDelegate"></param>
        </member>
        <member name="T:Agresso.ServerExtension.IReport">
            <summary>
            IReport is an interface to the running report or service. 
            Access the server API with the API or DbAPI property, or through ServerAPI.Current
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IReport.StopReport(System.String)">
            <summary>
            Stop this report. Write the specified message to the log.
            </summary>
            <param name="message">Message describing why you stopped</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IReport.SetMessage(System.String)">
            <summary>
            Set a message that will appear in 'Maintenance of ordered reports' - Tools - Show message
            </summary>
            <param name="message">Message to put in the MOO screen</param>
        </member>
        <member name="M:Agresso.ServerExtension.IReport.RegisterQueryHandler(System.String,Agresso.ServerExtension.QueryHandlerDelegate)">
            <summary>
            Add a delegate that will be called when specific queries are run.
            </summary>
            <param name="queryId">Id of query that will be handled</param>
            <param name="handler">Handler method for the query</param>
        </member>
        <member name="M:Agresso.ServerExtension.IReport.RaiseGeneric(System.String,System.String[])">
            <summary>
            Raise the generic server event
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
        </member>
        <member name="E:Agresso.ServerExtension.IReport.OnStart">
            <summary>
            Raised when the report starts (after initialization)
            </summary>
        </member>
        <member name="E:Agresso.ServerExtension.IReport.OnCallReport">
            <summary>
            Raised when creating the report
            </summary>
        </member>
        <member name="E:Agresso.ServerExtension.IReport.OnStop">
            <summary>
            Raised when the report stops (before shutting down)
            </summary>
        </member>
        <member name="E:Agresso.ServerExtension.IReport.OnUserQuery">
            <summary>
            Raised by reports when running user defined queries through the AG16 functionality.
            Usually this implies that the report is ordered with the "query" parameter set.
            </summary>
        </member>
        <member name="E:Agresso.ServerExtension.IReport.OnGeneric">
            <summary>
            Raised by reports when special things happen
            </summary>
            <remarks>
            An example of a generic event is the named event "XML_IMPORTING" and "XML_IMPORTED" raised upon import from xml files.
            </remarks>
        </member>
        <member name="E:Agresso.ServerExtension.IReport.OnHelpTableCreated">
            <summary>
            Raised when new help tables are created in the process
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IReport.Client">
            <summary>
            Client code. Not all reports / services have client set (Multiclient).
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IReport.IsService">
            <summary>
            True if this is a service (i.e. TPS)
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IReport.ReportName">
            <summary>
            Report or service name
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IReport.SysSetupCode">
            <summary>
            System setup code. Not all reports / services have system setup code set.
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IReport.Module">
            <summary>
            Module. Not all reports / services have module set.
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IReport.Variant">
            <summary>
            Report variant. Default 0.
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IReport.API">
            <summary>
            Access the server API
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IReport.DbAPI">
            <summary>
            Access the server database API
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.IServerAPI">
            <summary>
            Interface to the server API. This API gives you access to the server parameters and environment variables.
            Use IServerDbAPI for database specific operations.
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.WriteLog(System.String,System.Object[])">
            <summary>
            Write to the server log
            </summary>
            <param name="formatString">Format string</param>
            <param name="contents">Contents to format with</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.WriteLog(System.String)">
            <summary>
            Write to the server log
            </summary>
            <param name="message">Message to write</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.WriteLogUF(System.String)">
            <summary>
            Write unformatted string to the log
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetParameter(System.String)">
            <summary>
            Get parameter with given name. Returns null if the parameter does not exist
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.SetParameter(System.String,System.String)">
            <summary>
            Set parameter with given name
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetParameterNames">
            <summary>
            Gets the names of all the parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetServerQueue">
            <summary>
            Get server queue name
            </summary>
            <returns>The server queue name</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetReportParameterNames">
            <summary>
            Get all report parameter names
            </summary>
            <returns>Report parameter names as a string array</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetReportParameterType(System.String,System.String)">
            <summary>
            Get the report parameter type
            </summary>
            <param name="name">The report parameter name</param>
            <param name="defaultType">The default type to return if none found</param>
            <returns>The datatype as string</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetReportParameter(System.String)">
            <summary>
            Get report parameter with given name as string. Returns null if the parameter does not exist.
            Report parameters are set and can be used in .arw files (report printout).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetReportParameter(System.String,System.String,System.String@)">
            <summary>
            Get report parameter with given name and type as string
            Report parameters are set and can be used in .arw files (report printout).
            </summary>
            <param name="name"></param>
            <param name="type">one of d, t, c, n, p, i, m or f</param>
            <param name="value">value as string</param>
            <returns>Returns true if found, else false</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.SetReportParameter(System.String,System.String)">
            <summary>
            Set report parameter with given name. Important - call InitReportParameters first!
            Report parameters are set and can be used in .arw files (report printout).
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.InitReportParameters">
            <summary>
            Initialize report parameters.
            Report parameters are set and can be used in .arw files (report printout).
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetServerEnv(System.String)">
            <summary>
            Get environment variable. For example AGRESSO_EXE
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.GetSystemParameter(System.String,System.String@)">
            <summary>
            Get system parameter
            </summary>
            <param name="name">System parameter name</param>
            <param name="value">System parameter value</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.CallReport(System.String)">
            <summary>
            Call report writer
            </summary>
            <param name="reportName">Report name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.CallReport(System.String,System.String,System.String,System.Int32,System.Int64,System.Int64)">
            <summary>
            Call report writer
            </summary>
            <param name="reportName">Report name</param>
            <param name="language">Language</param>
            <param name="lisFile">List file</param>
            <param name="printFlag">0 - </param>
            <param name="rows"></param>
            <param name="cols"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.SendMail(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send mail
            </summary>
            <param name="messageText"></param>
            <param name="attachFile"></param>
            <param name="displayName"></param>
            <param name="subject"></param>
            <param name="addressList"></param>
            <param name="mailType"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.CreateJob(Agresso.ServerExtension.JobInitParameters)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="parameters">Initialization parameters</param>
            <returns>Job to be ordered</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.CreateJob(System.String)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="menuId">Menu id to order</param>
            <returns>Job to be ordered</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.CreateJob(System.String,System.Int32)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="menuId">Menu id to order</param>
            <param name="variant">Report variant (can be 0)</param>
            <returns>Job to be ordered</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.CreateJob(System.String,System.String,System.Int32)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="reportName">Report name to order (fex "LG04")</param>
            <param name="module">Module. Can be blank, will then default to current module</param>
            <param name="funcId">Function id in menu. Can be 0, will then be looked up.</param>
            <returns>Job to be ordered</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.CreateJob(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="reportName">Report name to order (fex "LG04")</param>
            <param name="module">Module. Can be blank, will then default to current module</param>
            <param name="funcId">Function id in menu. Can be 0, will then be looked up.</param>
            <param name="variant">Report variant (can be 0)</param>
            <returns>Job to be ordered</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.RunUserQueries">
            <summary>
            Runs AG16
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerAPI.RunUserQueries(System.String,System.String,System.Boolean)">
            <summary>
            Runs AG16 with parameters
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IServerAPI.Parameters">
            <summary>
            Parameters to the server program and the report
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IServerAPI.DatabaseAPI">
            <summary>
            Database specific functions.
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.IServerDbAPI">
            <summary>
            Interface to the database specific API for Agresso Server. 
            This is meant as a server specific addition to the database functionality in
            Agresso.Interface.CommonExtension.
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CreateTable(System.String,System.String,System.String)">
            <summary>
            Create help table
            </summary>
            <param name="tableName">Help table name</param>
            <param name="sql">Select statement</param>
            <param name="message">Log message</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CreateTable(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Create help table
            </summary>
            <param name="tableName">Help table name</param>
            <param name="sql">Select statement</param>
            <param name="message">Log message</param>
            <param name="rows">Rows affected</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CreateTable(System.String,System.String,System.String,System.String)">
            <summary>
            Create help table
            </summary>
            <param name="tableName">Help table name</param>
            <param name="sql">Select statement</param>
            <param name="id">Index name (for tuning)</param>
            <param name="message">Log message</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CreateTable(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Create help table
            </summary>
            <param name="tableName">Help table name</param>
            <param name="sql">Select statement</param>
            <param name="id">Index name (for tuning)</param>
            <param name="message">Log message</param>
            <param name="rows">Rows affected</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CreateIndex(System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create index on a table
            </summary>
            <param name="indexName">Index name</param>
            <param name="tableName">Table name</param>
            <param name="location">Index location</param>
            <param name="unique">Unique index</param>
            <param name="structure">Structure (for example btree)</param>
            <param name="cols">Columns</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.DropIndex(System.String)">
            <summary>
            Drop an index
            </summary>
            <param name="indexName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.IsIndex(System.String)">
            <summary>
            Query an index for existence
            </summary>
            <param name="indexName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.DropTable(System.String)">
            <summary>
            Drop table
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.IsTable(System.String)">
            <summary>
            Query a table for existence
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.UpdateTable(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Update table rows
            </summary>
            <param name="tableName">Update table</param>
            <param name="from">From clause</param>
            <param name="setValue">Set statement</param>
            <param name="where">Where clause</param>
            <param name="index">Index name (for tuning)</param>
            <param name="message">Log message</param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CreateUpdate(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Create a help table from a select statement and update another table with results from that.
            You can index the result set columns with a :colname.
            </summary>
            <param name="select">Select statement</param>
            <param name="table">Update table</param>
            <param name="setValue">Set statement</param>
            <param name="where">Where clause</param>
            <param name="index">Index for the new table (tuning)</param>
            <param name="message">Log message</param>
            <param name="rows">Rows affected</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CreateUpdate(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a help table from a select statement and update another table with results from that.
            You can index the result set columns with a :colname.
            </summary>
            <param name="select">Select statement</param>
            <param name="table">Update table</param>
            <param name="setValue">Set statement</param>
            <param name="where">Where clause</param>
            <param name="id">Index</param>
            <param name="message">Log message</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.AddSequence(System.String,System.String,System.Int32,System.String)">
            <summary>
            This function will create sequence numbers on a table according to the parameters 
            startNo and orderList. The sequence number will start with the value given by startNo. 
            Every time one of the columns listed in orderList changes value, the sequence number is 
            reset to startNo. This means that for row in the table where the columns listed in orderList 
            has the same value, the value for the sequence number will be different.
            </summary>
            <param name="table">Table name.</param>
            <param name="seqCol">Name of column where sequence number is to be generated.</param>
            <param name="startNo">The sequence number starts with this number.</param>
            <param name="orderList">Comma separated list of column names. When any of these columns changes values, the sequence number is reset to lStart.</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.AddSequence(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            This function will create sequence numbers on a table according to the parameters 
            startNo and orderList. The sequence number will start with the value given by startNo. 
            Every time one of the columns listed in orderList changes value, the sequence number is 
            reset to startNo. This means that for row in the table where the columns listed in orderList 
            has the same value, the value for the sequence number will be different.
            </summary>
            <param name="table">Table name.</param>
            <param name="seqCol">Name of column where sequence number is to be generated.</param>
            <param name="startNo">The sequence number starts with this number.</param>
            <param name="orderList">Comma separated list of column names. When any of these columns changes values, the sequence number is reset to lStart.</param>
            <param name="where">Where statement.</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.ExecSql(System.String,System.String,System.Int32@)">
            <summary>
            Execute an sql statement
            </summary>
            <param name="stmt">SQL statement</param>
            <param name="message">Log message</param>
            <param name="rows">Rows affected</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.ExecSql(System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            Execute an sql statement
            </summary>
            <param name="stmt">SQL statement</param>
            <param name="message">Log message</param>
            <param name="rows">Rows affected</param>
            <param name="newSession">Whether a new session should be created</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.ExecSql(System.String,System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            Execute an sql statement
            </summary>
            <param name="stmt">SQL statement</param>
            <param name="id">Query id (for tuning)</param>
            <param name="message">Log message</param>
            <param name="rows">Rows affected</param>
            <param name="newSession">Whether a new session should be created</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.SelectLoop(System.String,System.String,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Issue a select statement, then run through the result and run an sql command, if the first fails then
            run a second command. The first may be an update statement, and the second an insert statement.
            </summary>
            <param name="select">Select statement</param>
            <param name="stmt1">Primary statement</param>
            <param name="stmt2">Secondary statement</param>
            <param name="message">Log message</param>
            <param name="rows1">Rows affected statement1</param>
            <param name="rows2">Rows affected statement2</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.GetDescription(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Get description for dimension value and put it in the table
            </summary>
            <param name="tableName">Table to update</param>
            <param name="descrColumn">Column that will be updated with description</param>
            <param name="client">Client code. If blank or '*' the client column in the table will be used</param>
            <param name="language">Language</param>
            <param name="flag1">0 means that attId contains a real value. 1 means it contain a column reference.</param>
            <param name="attId">Attribute id or column containing attribute id</param>
            <param name="flag2">0 means that dimValue contains a real value. 1 means it contain a column reference.</param>
            <param name="dimValue">Dimension value or column containing dimension value</param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.BeginTransaction">
            <summary>
            Start a transaction
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.EndTransaction">
            <summary>
            End current transaction
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.AbortTransaction">
            <summary>
            Abort current transaction
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CommitTransaction">
            <summary>
            Commit current transaction
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.OpenCursor(System.String,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Open a cursor against the database
            </summary>
            <param name="query">Select query</param>
            <param name="cols">Number of columns</param>
            <param name="message">Log message</param>
            <param name="readOnly">Read only or update cursor</param>
            <param name="updCols">Names of columns to update</param>
            <returns>Cursor id</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CloseCursor(System.Int32)">
            <summary>
            Close cursor
            </summary>
            <param name="id">Cursor id</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.FetchCursor(System.Int32)">
            <summary>
            Advance the cursor to the next database row
            </summary>
            <param name="id">Cursor id</param>
            <returns>0 if not ok, 1 if ok, 100 if no more rows, 101 if more data needed</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.ColumnType(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get type of column in a cursor. The type can be used in GetValue
            </summary>
            <param name="id">Cursor id</param>
            <param name="col">Column index</param>
            <param name="len">Length of column</param>
            <returns>Type</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.GetValue(System.Int32,System.String,System.String)">
            <summary>
            Get value from cursor as string
            </summary>
            <param name="id">Cursor id</param>
            <param name="colName">Column name</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.GetValue(System.Int32,System.Int32,System.String)">
            <summary>
            Get value from cursor as string
            </summary>
            <param name="id">Cursor id</param>
            <param name="column">Column index</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.UpdateRow(System.Int32,System.String,System.String)">
            <summary>
            Update current row in a cursor
            </summary>
            <param name="id">Cursor id</param>
            <param name="table">Table name</param>
            <param name="setValue">Set statement</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.DeleteRow(System.Int32,System.String)">
            <summary>
            Delete current row in cursor
            </summary>
            <param name="id">Cursor id</param>
            <param name="table">Tablename</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.ColumnName(System.Int32,System.Int32)">
            <summary>
            Get column name by index in a cursor
            </summary>
            <param name="id">Cursor id</param>
            <param name="column">Column index</param>
            <returns>Column name</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.NumberOfColumns(System.Int32)">
            <summary>
            Get number of columns in a cursor
            </summary>
            <param name="id">Cursor id</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.GetNextTempTableName">
            <summary>
            Generate an unused and unique help table name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.GetHelpTableNames">
            <summary>
            Get a list of all the temporary help tablenames that has been allocated. Note that it may be that the tablenames has not yet been
            used by the server process to create a physical table. You can check this with IsTable(string tableName).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.LookupLogicalTableName(System.String)">
            <summary>
            Get real name of a help table by its friendly name. Use GetLogicalNames() to get all the logical names.
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.GetLogicalNames">
            <summary>
            Get a list of all logical tablenames. These can be passed to LookupLogicalTableName(string) to get the real help table name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.ReadFromFlatFile(System.String,System.String,System.String,System.Char,System.Char,System.String)">
            <summary>
            Import lines from a flat file into a database (help) table
            </summary>
            <remarks>The database table must match the columns string</remarks>
            <example>Example columns string
            <code>
            //Help table 'helptable' contains three columns, a (vchar 15) and b (vchar 25) and c where you want a sequence number
            //The columns in the file 'file.txt' are separated with tabs and the lines with linebreaks.
            string columns = "a = 15, b = 25, c = s0";
            ServerAPI.Current.ReadFromFlatFile("file.txt", "helptable", columns, '\t', '\n', "Importing from files.txt into helptable");
            </code>
            </example>
            <param name="fileName">Filename</param>
            <param name="targetTable">Target table for import</param>
            <param name="columns">Specification of columns</param>
            <param name="columnSeparator">Column separator character (often '\t')</param>
            <param name="rowSeparator">Line separator character (often '\n')</param>
            <param name="message">Log message</param>
            <returns>Rows imported</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.ReadFromXmlFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Read from xml file into a database (help) table
            </summary>
            <remarks>The xml nodes will be matched against the database table's columns using the mapping in asysxmlnodes</remarks>
            <param name="fileName">Xml file name</param>
            <param name="type">Type of xml (Schema, fex ABWOrder)</param>
            <param name="targetTable">Target table for import</param>
            <param name="converter">Xml converter (Stylesheet), can be blank</param>
            <param name="extraColumns">Extra calculated or statically values columns added to the table</param>
            <returns>Rows imported</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.CreateHelpTable(System.String,System.Data.DataTable)">
            <summary>
            Creates help table from DataTable
            </summary>
            <param name="databaseTableName">Name of table in database</param>
            <param name="dt">Structure of the table</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.FillHelpTable(System.String,System.Data.DataTable)">
            <summary>
            Fills help table with data in DataTable
            </summary>
            <param name="databaseTableName">Name of temporary table in database</param>
            <param name="dt">data to be inserted into help table</param>
        </member>
        <member name="M:Agresso.ServerExtension.IServerDbAPI.ClearHelpTable(System.String)">
            <summary>
            Clears help table in database
            </summary>
            <param name="databaseTableName">Name of temporary table in database</param>
        </member>
        <member name="P:Agresso.ServerExtension.IServerDbAPI.AgrDBCon">
            <summary>
            Database connection name
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IServerDbAPI.UserName">
            <summary>
            Current database user name
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IServerDbAPI.RealDBName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.IServerDbAPI.AgrDatabase">
            <summary>
            Datasource name
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.IServerJob">
            <summary>
            Represents a report order, ordered from another server process or report. Create with IServerAPI.CreateJob().
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.IServerJob.Execute(System.Int32@)">
            <summary>
            Place the report order
            </summary>
            <param name="orderNumber">Report order number</param>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerJob.Execute(System.Int32@,System.String)">
            <summary>
            Place the report order
            </summary>
            <param name="orderNumber">Report order number</param>
            <param name="status">Staus (N,P or I), default value is N</param>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerJob.Execute(System.Int32@,System.String,System.String)">
            <summary>
            Place the report order
            </summary>
            <param name="orderNumber">Report order number</param>
            <param name="status">Staus (N,P or I), default value is N</param>
            <param name="description">Description of report order (override the one from asysmenu)</param>
            <returns>Success indicator</returns>
        </member>
        <member name="M:Agresso.ServerExtension.IServerJob.Execute(System.Int32@,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Place the report order
            </summary>
            <param name="orderNumber">Report order number</param>
            <param name="printer"></param>
            <param name="serverQue"></param>
            <param name="status">Staus (N,P or I), default value is N</param>
            <param name="outputId">acrrepord.output_id, default value is 0</param>
            <param name="copies">acrrepord.copies, default value is 1</param>
            <param name="priority">acrrepord.priority, default value is 0</param>
            <param name="description">Description of report order (override the one from asysmenu)</param>
            <returns>Success indicator</returns>
        </member>
        <member name="P:Agresso.ServerExtension.IServerJob.Parameters">
            <summary>
            Report parameters for the report to order
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.IServerJobParameters">
            <summary>
            Interface to report parameters for jobs to be started from other server processes and reports
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.JobInitParameters">
            <summary>
            Parameters to creating server jobs from other server processes and reports.
            You either specify the report name or the menu id.
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.JobInitParameters.#ctor(System.String)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="menuId">Menu id to order</param>
        </member>
        <member name="M:Agresso.ServerExtension.JobInitParameters.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="menuId">Menu id to order</param>
            <param name="variant">Report variant (can be 0)</param>
        </member>
        <member name="M:Agresso.ServerExtension.JobInitParameters.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="reportName">Report name to order (fex "LG04")</param>
            <param name="module">Module. Can be blank, will then default to current module</param>
            <param name="funcId">Function id in menu. Can be 0, will then be looked up.</param>
        </member>
        <member name="M:Agresso.ServerExtension.JobInitParameters.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="reportName">Report name to order (fex "LG04")</param>
            <param name="module">Module. Can be blank, will then default to current module</param>
            <param name="funcId">Function id in menu. Can be 0, will then be looked up.</param>
            <param name="variant">Report variant (can be 0)</param>
        </member>
        <member name="M:Agresso.ServerExtension.JobInitParameters.#ctor(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="reportName">Report name to order (fex "LG04")</param>
            <param name="variant">Report variant (can be 0)</param>
            <param name="module">Module. Can be blank, will then default to current module</param>
            <param name="funcId">Function id in menu. Can be 0, will then be looked up.</param>
            <param name="priority">Priority, 1 for master report, 0 for other reports. Is not used when menu id is given</param>
            <param name="useRepCountMacro">Default to false. If true, default values in parameters will be checked to find a matching report counter macro.</param>
            <param name="source">Source, used to check validation of macros. Default value is REPORD</param>
            <param name="userId">User id, default value is the current user</param>
            <param name="client">Client, default value is the current client</param>
        </member>
        <member name="M:Agresso.ServerExtension.JobInitParameters.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initialize a report to be ordered.
            </summary>
            <param name="menuId">Menu id to order</param>
            <param name="variant">Report variant (can be 0)</param>
            <param name="useRepCountMacro">Default to false. If true, default values in parameters will be checked to find a matching report counter macro.</param>
            <param name="source">Source, used to check validation of macros. Default value is REPORD</param>
            <param name="userId">User id, default value is the current user</param>
            <param name="client">Client, default value is the current client</param>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.ReportName">
            <summary>
            Report name
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.MenuId">
            <summary>
            Menu id of the report to order
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.Module">
            <summary>
            Module, default value is the current module
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.UserId">
            <summary>
            User id, default value is the current user
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.Client">
            <summary>
            Client, default value is the current client
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.Source">
            <summary>
            Source, used to check validation of macros. Default value is REPORD
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.Priority">
            <summary>
            Priority, 1 for master report, 0 for other reports. Is not used when menu id is given
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.Variant">
            <summary>
            Report variant. 0 can be used
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.FuncId">
            <summary>
            Func id for lookup of the report to be used. 0 can be used. Is not used when menu id is given
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.JobInitParameters.UseRepCountMacro">
            <summary>
            Default to false. If true, default values in parameters will be checked to find a matching report counter macro.
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.ReportEventArgs">
            <summary>
            Base arguments for events on the server
            </summary>
            <remarks>Internal usage</remarks>
        </member>
        <member name="M:Agresso.ServerExtension.ReportEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>Internal usage</remarks>
        </member>
        <member name="M:Agresso.ServerExtension.ReportEventArgs.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="reportName">Report name</param>
            <param name="variant">Report variant</param>
            <param name="service">Is service</param>
            <param name="parameter">Event parameter</param>
            <param name="module">Module code</param>
            <remarks>Internal usage</remarks>
        </member>
        <member name="M:Agresso.ServerExtension.ReportEventArgs.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reportName">Report name</param>
            <param name="variant">Report variant</param>
            <param name="service">Is service</param>
            <param name="parameter">Event parameter</param>
            <param name="module">Module code</param>
            <param name="canCancel">Allowed to cancel</param>
            <remarks>Internal usage</remarks>
        </member>
        <member name="M:Agresso.ServerExtension.ReportEventArgs.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reportName">Report name</param>
            <param name="variant">Report variant</param>
            <param name="service">Is service</param>
            <param name="parameter">Event parameter</param>
            <param name="module">Module code</param>
            <param name="canCancel">Allowed to cancel</param>
            <param name="error">Error has occurred</param>
            <remarks>Internal usage</remarks>
        </member>
        <member name="P:Agresso.ServerExtension.ReportEventArgs.ReportName">
            <summary>
            Name of report or service
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportEventArgs.Variant">
            <summary>
            Variant of report
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportEventArgs.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportEventArgs.Parameter">
            <summary>
            Parameter ("START", "RUN, "END", "GENERIC", "AG16")
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportEventArgs.CanCancel">
            <summary>
            If the event is abortable
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportEventArgs.Cancel">
            <summary>
            Abort further processing by setting cancel to true
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportEventArgs.Error">
            <summary>
            Indicates that the report or service has encountered an error and will stop
            after the event is processed.
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.UserQueryEventArgs">
            <summary>
            Arguments to user query events (AG16)
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.UserQueryEventArgs.#ctor(System.String,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reportName">Report name</param>
            <param name="reportFile">Report file</param>
            <param name="variant">Variant</param>
            <param name="service">Is service</param>
            <param name="module">Module</param>
        </member>
        <member name="P:Agresso.ServerExtension.UserQueryEventArgs.ReportFile">
            <summary>
            Report file name
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.UserQueryEventArgs.Query">
            <summary>
            Name of the user query (AG16 query name)
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.UserQueryEventArgs.QueryParameter1">
            <summary>
            Parameter to the user defined query
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.UserQueryEventArgs.QueryParameter2">
            <summary>
            Parameter to the user defined query
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.UserQueryEventArgs.QueryParameter3">
            <summary>
            Parameter to the user defined query
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.GenericEventArgs">
            <summary>
            Arguments to generic events
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.GenericEventArgs.#ctor(System.String,System.String,System.Int32,System.Boolean,System.String,System.String[])">
            <summary>
            Create new instance of the GenericEventArgs parameters
            </summary>
            <param name="eventName">Generic event name</param>
            <param name="reportName">Report name</param>
            <param name="variant">Report variant</param>
            <param name="service">Is service</param>
            <param name="module">Module code</param>
            <param name="param">Generic parameters</param>
        </member>
        <member name="M:Agresso.ServerExtension.GenericEventArgs.#ctor(System.String,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Create new instance of the GenericEventArgs parameters
            </summary>
            <param name="eventName">Generic event name</param>
            <param name="reportName">Report name</param>
            <param name="variant">Report variant</param>
            <param name="service">Is service</param>
            <param name="module">Module code</param>
            <param name="paramString">Generic parameters as string</param>
        </member>
        <member name="P:Agresso.ServerExtension.GenericEventArgs.Parameters">
            <summary>
            Generic event parameters
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.GenericEventArgs.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.HelpTableCreatedEventArgs">
            <summary>
            Agruments to the OnHelpTableCreated event
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.HelpTableCreatedEventArgs.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Create a new instance of the parameters
            </summary>
            <param name="reportName">Report name</param>
            <param name="variant">Variant number</param>
            <param name="service">Is this a service</param>
            <param name="module">Module</param>
            <param name="tableName">Table name</param>
            <param name="query">Query or creation command</param>
            <param name="id">Query id</param>
            <param name="rows">Rows inserted in the new table</param>
        </member>
        <member name="P:Agresso.ServerExtension.HelpTableCreatedEventArgs.TableName">
            <summary>
            Name of table created
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.HelpTableCreatedEventArgs.Query">
            <summary>
            Query or creation command
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.HelpTableCreatedEventArgs.Id">
            <summary>
            Query id
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.HelpTableCreatedEventArgs.RowsInserted">
            <summary>
            Rows inserted in the new table
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.QueryEventArgs">
            <summary>
            Arguments to the Query event
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.QueryEventArgs.#ctor(System.String,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="queryId"></param>
            <param name="reportName"></param>
            <param name="variant"></param>
            <param name="service"></param>
            <param name="module"></param>
        </member>
        <member name="P:Agresso.ServerExtension.QueryEventArgs.QueryId">
            <summary>
            Unique query ID
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.ReportAttribute">
            <summary>
            Defines the report(s) to customize
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.ReportAttribute.#ctor(System.String)">
            <summary>
            Defines the report to customize
            </summary>
            <param name="reportName">Name of report</param>
        </member>
        <member name="M:Agresso.ServerExtension.ReportAttribute.#ctor(System.String,System.String)">
            <summary>
            Defines the report to customize
            </summary>
            <param name="reportName">Name of report</param>
            <param name="sysSetupCode">System setup code</param>
        </member>
        <member name="M:Agresso.ServerExtension.ReportAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Defines the report to customize
            </summary>
            <param name="reportName">Name of report</param>
            <param name="sysSetupCode">System setup code</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Agresso.ServerExtension.ReportAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Defines the report to customize
            </summary>
            <param name="reportName">Name of report</param>
            <param name="sysSetupCode">System setup code</param>
            <param name="description">Description</param>
            <param name="variant">Report variant (-1 = All)</param>
        </member>
        <member name="M:Agresso.ServerExtension.ReportAttribute.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Defines the report to customize
            </summary>
            <param name="reportName">Name of report</param>
            <param name="sysSetupCode">System setup code</param>
            <param name="description">Description</param>
            <param name="variant">Report variant (-1 = All)</param>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:Agresso.ServerExtension.ReportAttribute.ReportName">
            <summary>
            Name of report
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportAttribute.SysSetupCode">
            <summary>
            System setup code
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ReportAttribute.Variant">
            <summary>
            Report variant
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.ServerAPI">
            <summary>
            Entry point and base class for the server API
            </summary>
        </member>
        <member name="F:Agresso.ServerExtension.ServerAPI.serverAPI">
            <summary>
            Current serverAPI
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerAPI.Current">
            <summary>
            Access the current IServerAPI interface
            </summary>
        </member>
        <member name="T:Agresso.ServerExtension.ServerException">
            <summary>
            Exception class for exceptions in the server environment
            </summary>
        </member>
        <member name="F:Agresso.ServerExtension.ServerException.machine">
            <summary>
            Machine name
            </summary>
        </member>
        <member name="F:Agresso.ServerExtension.ServerException.dateInit">
            <summary>
            Exception time
            </summary>
        </member>
        <member name="F:Agresso.ServerExtension.ServerException.threadId">
            <summary>
            Thread id
            </summary>
        </member>
        <member name="F:Agresso.ServerExtension.ServerException.windowsIdent">
            <summary>
            Windows identity
            </summary>
        </member>
        <member name="F:Agresso.ServerExtension.ServerException.errorNo">
            <summary>
            Error number
            </summary>
        </member>
        <member name="F:Agresso.ServerExtension.ServerException.lineNo">
            <summary>
            Line number
            </summary>
        </member>
        <member name="F:Agresso.ServerExtension.ServerException.errorFileName">
            <summary>
            Error file
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.ServerException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Agresso.ServerExtension.ServerException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Agresso.ServerExtension.ServerException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Agresso.ServerExtension.ServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for deserialization of the exception class.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:Agresso.ServerExtension.ServerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override the GetObjectData method to serialize custom values.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:Agresso.ServerExtension.ServerException.InitException">
            <summary>
            Initialize the exception
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerException.Date">
            <summary>
            Date and Time the exception was created.
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerException.MachineName">
            <summary>
            Machine name where the exception occurred.
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerException.ThreadIdentityName">
            <summary>
            Identity of the executing thread on which the exception was created.
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerException.WindowsIdentityName">
            <summary>
            Windows identity under which the code was running.
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerException.ErrorNumber">
            <summary>
            Error Number
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerException.LineNumber">
            <summary>
            Line number where the error occurred
            </summary>
        </member>
        <member name="P:Agresso.ServerExtension.ServerException.FileName">
            <summary>
            File name where the error occurred
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.InterfaceCreatedHandler">
            <summary>
            Handler for manipulating the interface after it's created
            </summary>    
        </member>
        <member name="T:ACT.ServiceExtension.InboundHandler">
            <summary>
            Handler for inbound data
            </summary>    
        </member>
        <member name="T:ACT.ServiceExtension.OutboundHandler">
            <summary>
            Handler for outbound data
            </summary>    
        </member>
        <member name="T:ACT.ServiceExtension.ServiceExtensionEventArgs">
            <summary>
            Base class for all ServiceExtension event arguments
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.InterfaceCreatedEventArgs">
            <summary>
            Arguments for when the interface has been created
            </summary>
        </member>
        <member name="F:ACT.ServiceExtension.InterfaceCreatedEventArgs.Version">
            <summary>
            The version that has currently been created
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.InboundEventArgs">
            <summary>
            Agruments for the inbound data
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.InboundEventArgs.Parameters">
            <summary>
            Returns the parameters of the called web service method
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.OutboundEventArgs">
            <summary>
            Arguments for the inbound data
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.OutboundEventArgs.Parameters">
            <summary>
            Returns the parameters of the called web service method
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IElement">
            <summary>
            A representation of a field/value that is passed to the web service. (E.g. the contents of the SOAP)
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IElement.Name">
            <summary>
            The name of the field
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IProperties">
            <summary>
            A list of IFields or sub classes
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IProperties.Item(System.Int32)">
            <summary>
            Retrieves a field in the list
            </summary>
            <param name="index">The index in the list</param>
            <returns>The field</returns>
        </member>
        <member name="P:ACT.ServiceExtension.IProperties.Item(System.String)">
            <summary>
            Retrieves a field in the list;
            </summary>
            <param name="fieldName">Name of the field</param>
            <returns>The field</returns>
        </member>
        <member name="P:ACT.ServiceExtension.IProperties.Count">
            <summary>
            Returns the number of fields in the list
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IListElement">
            <summary>
            A representation of a field/value that is passed to the web service. (E.g. the contents of the SOAP).
            This field is represents a list.
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.IListElement.AddElement">
            <summary>
            Adds a new child field of a certain element type
            </summary>       
            <returns>The newly added field</returns>
        </member>
        <member name="M:ACT.ServiceExtension.IListElement.RemoveElement(ACT.ServiceExtension.IElement)">
            <summary>
            Removes a child field from this list
            </summary>
            <param name="element">The field to remove</param>
        </member>
        <member name="P:ACT.ServiceExtension.IListElement.ChildElementType">
            <summary>
            Retrieves the child element of this field
            </summary>
            <returns></returns>
        </member>
        <member name="P:ACT.ServiceExtension.IListElement.Properties">
            <summary>
            Retrieves the list items of this list
            </summary>
            <returns>A list of child fields</returns>
        </member>
        <member name="T:ACT.ServiceExtension.IParameters">
            <summary>
            The parameters of a web service method
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.IParameters.AddInputParameter(ACT.ServiceExtension.IElementType)">
            <summary>
            Creates a new input parameter and adds it to the input parameter list
            </summary>
            <param name="element">The element type of the input parameter</param>
            <returns>The newly created input parameter</returns>
        </member>
        <member name="M:ACT.ServiceExtension.IParameters.AddReturnParameter">
            <summary>
            Creates a new return parameter and adds it to the parameters
            </summary>
            <returns>The newly created return parameter</returns>
        </member>
        <member name="M:ACT.ServiceExtension.IParameters.RemoveInputParameter(ACT.ServiceExtension.IElement)">
            <summary>
            Removes an input parameter from the input parameter list
            </summary>
            <param name="element">The input parameter field to remove</param>
        </member>
        <member name="M:ACT.ServiceExtension.IParameters.RemoveReturnParameter">
            <summary>
            Removes the return parameter
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.IParameters.GetInputChildElementTypes">
            <summary>
            Returns a dictionary containing the input parameter child elements
            </summary>
            <returns>The dictionary containing child elements</returns>
        </member>
        <member name="M:ACT.ServiceExtension.IParameters.GetReturnChildElementType">
            <summary>
            Returns the return parameter child element
            </summary>
            <returns>The child element</returns>
        </member>
        <member name="P:ACT.ServiceExtension.IParameters.MethodName">
            <summary>
            The method name to which these parameters belong
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IParameters.InputParameters">
            <summary>
            The list of inpur parameters
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IParameters.ReturnParameter">
            <summary>
            The return parameter
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IPropertyElement">
            <summary>
            A representation of a field/value that is passed to the web service. (E.g. the contents of the SOAP).
            This field is represents a property.
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IPropertyElement.Value">
            <summary>
            The value of the property
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IClassElement">
            <summary>
            A representation of a field/value that is passed to the web service. (E.g. the contents of the SOAP).
            This field is represents a property.
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.IClassElement.RestoreElement(ACT.ServiceExtension.IElementType)">
            <summary>
            Adds a new child field to this type field
            </summary>
            <param name="childElementType">The element representing the new field</param>
            <returns>The newly created field</returns>
        </member>
        <member name="M:ACT.ServiceExtension.IClassElement.RemoveElement(ACT.ServiceExtension.IElement)">
            <summary>
            Removes a child field
            </summary>
            <param name="element">The field to remove</param>
        </member>
        <member name="P:ACT.ServiceExtension.IClassElement.Properties">
            <summary>
            The list of property fields attached to this type field
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IClassElement.ChildElementTypes">
            <summary>
            Returns a dictionary of child elements available for this field
            </summary>
            <returns></returns>
        </member>
        <member name="T:ACT.ServiceExtension.IElementType">
            <summary>
            A representation of a web service interface. This is one of the building blocks int the interface. The building blocks
            make up a hierachy and reference each other.
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IElementType.DataType">
            <summary>
            The data type of the element
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IEnumElementType">
            <summary>
            A representation of a web service interface. This is one of the building blocks int the interface. The building blocks
            make up a hierachy and reference each other. This is an enum building block.
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IEnumElementType.Values">
            <summary>
            The string values in the enum
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IListElementType">
            <summary>
            A representation of a web service interface. This is one of the building blocks int the interface. The building blocks
            make up a hierachy and reference each other. This is a list building block.
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IListElementType.ChildElementType">
            <summary>
            The child element of the current element
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IPropertyElementType">
            <summary>
            A representation of a web service interface. This is one of the building blocks int the interface. The building blocks
            make up a hierachy and reference each other. This is a type property building block.
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IClassElementType">
            <summary>
            A representation of a web service interface. This is one of the building blocks int the interface. The building blocks
            make up a hierachy and reference each other. This is a type building block.
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.IClassElementType.AddClassElementType(System.Type,System.String)">
            <summary>
            Extends the type element with some custom type
            </summary>
            <param name="elementType">The System.Type to extend with</param>
            <param name="name">The name of the new type property</param>
            <returns>The newly created type element</returns>
        </member>
        <member name="P:ACT.ServiceExtension.IClassElementType.ElementTypes">
            <summary>
            A dictionary containing the properties on this type element
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IMethod">
            <summary>
            A representation of a web service method interface
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.IMethod.AddMethodParameter(System.Type,System.String)">
            <summary>
            Extends a method with an extra input parameter
            </summary>
            <param name="type">A System.Type which represents the input parameter</param>
            <param name="typeName">The name of the input parameter</param>
            <returns>The newly created input parameter type element</returns>
        </member>
        <member name="P:ACT.ServiceExtension.IMethod.MethodName">
            <summary>
            The name of the web service method
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IMethod.InputParameters">
            <summary>
            The input parameters
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IMethod.ReturnParameter">
            <summary>
            The return parameter
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IVersion">
            <summary>
            A representation of a web service version interface
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.IVersion.GetMethod(System.String)">
            <summary>
            Returns a web service method
            </summary>
            <param name="methodName">name of the web service method</param>
            <returns>The method</returns>
        </member>
        <member name="M:ACT.ServiceExtension.IVersion.AddMethod(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new method to the version
            </summary>
            <param name="assemblyName">The assembly where the new method is located, e.g. U4A.Service.MyTestAssembly</param>
            <param name="className">The name of the class where the new method is located, e.g. U4A.MyActComponent.TestImplementation</param>
            <param name="methodName">The name of the method, e.g. MyNewMethod</param>
            <param name="useAuthenticator">Set to true if default authentication should be used</param>
            <returns>the newly created method</returns>
        </member>
        <member name="P:ACT.ServiceExtension.IVersion.VersionName">
            <summary>
            The name of the service version
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.IVersion.Methods">
            <summary>
            A list of web service methods belonging to this version
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.IProjectService">
            <summary>
            IProjectService must be implemented to create Service Extensions
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.IProjectService.Initialize(ACT.ServiceExtension.IServiceComponent)">
            <summary>
            Initialize the service extension
            </summary>
            <param name="component">Component being customised</param>
        </member>
        <member name="T:ACT.ServiceExtension.IServiceComponent">
            <summary>
            Interface to a representation of a web service
            </summary>
        </member>
        <member name="E:ACT.ServiceExtension.IServiceComponent.OnInterfaceCreated">
            <summary>
            The event is raised when the web service interface (contract/wsdl) is created
            </summary>
        </member>
        <member name="E:ACT.ServiceExtension.IServiceComponent.OnInbound">
            <summary>
            The event is raised when inbound data is sent to the web service
            </summary>
        </member>
        <member name="E:ACT.ServiceExtension.IServiceComponent.OnOutbound">
            <summary>
            The event is raised when outbound data is sent from the web service
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.ServiceBase">
            <summary>
            Internal base class for implementations of IServiceComponent
            </summary>
        </member>
        <member name="E:ACT.ServiceExtension.ServiceBase.OnInterfaceCreated">
            <summary>
            The event is raised when the web service interface (contract/wsdl) is created
            </summary>
        </member>
        <member name="E:ACT.ServiceExtension.ServiceBase.OnInbound">
            <summary>
            The event is raised when inbound data is sent to the web service
            </summary>
        </member>
        <member name="E:ACT.ServiceExtension.ServiceBase.OnOutbound">
            <summary>
            The event is raised when outbound data is sent from the web service
            </summary>
        </member>
        <member name="T:ACT.ServiceExtension.ServiceExtensionAttribute">
            <summary>
            Marks a class as a Service Extentsion
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.ServiceExtensionAttribute.#ctor">
            <summary>
            Defines the service to customize
            </summary>
        </member>
        <member name="M:ACT.ServiceExtension.ServiceExtensionAttribute.#ctor(System.Int32)">
            <summary>
            Defines the service to customize
            </summary>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:ACT.ServiceExtension.ServiceExtensionAttribute.ServiceName">
            <summary>
            The service identificator. Accepts wildcards (*)
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.ServiceExtensionAttribute.VersionName">
            <summary>
            The version identificator. Accepts wildcards (*) 
            </summary>
        </member>
        <member name="P:ACT.ServiceExtension.ServiceExtensionAttribute.Description">
            <summary>
            Text giving a description to the Service Extension
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnElementTypeRequestEventHandler">
            <summary>
            Handler for the ElementTypeRequest-request fired by the smart client hosting environment.
            It will give you an opportunity to provide the workflow element for the current section and row.
            This event will be published after the standard handling, so the ACT-code can tweak the resulting code.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnInitializeEventHandler">
            <summary>
            Handler for the initialize events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnModelLoadEventHandler">
            <summary>
            Handler for the model load events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnGetListEventHandler">
            <summary>
            Handler for the get fixed list events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnGetDynamicListEventHandler">
            <summary>
            Handler for the get dynamic list event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnSelectChoiceEventHandler">
            <summary>
            Handler for the select choice events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnLoadEventHandler">
            <summary>
            Handler for the load events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnSaveEventHandler">
            <summary>
            Handler for the save event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnClearEventHandler">
            <summary>
            Handler for the clear events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnOpenEventHandler">
            <summary>
            Handler for the open events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnCallActionEventHandler">
            <summary>
            Handler for the call action events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnSwitchTabEventHandler">
            <summary>
            Handler for the tab switch events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnApplyEventHandler">
            <summary>
            Handler for the apply events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnAddRowEventHandler">
            <summary>
            Handler for the add row events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnMoveItemsEventHandler">
            <summary>
            Handler for the move items events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnOpenRowEventHandler">
            <summary>
            Handler for the open row events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OneTimePasswordDialogEventHandler">
            <summary>
            Handler for the one time password dialog events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnPageIndexChangedEventHandler">
            <summary>
            Handles datagrid section page index changed
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnValidateFieldEventHandler">
            <summary>
            Handler for the validate field events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnValidateRowEventHandler">
            <summary>
            Handler for the validate row events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnDeleteRowsEventHandler">
            <summary>
            Handler for the delete rows events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OnRowMarkedEventHandler">
            <summary>
            Handler for the row selected events
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ControlType">
            <summary>
            Type of control
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.TextBox">
            <summary>
            Text box
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.Button">
            <summary>
            Button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.DropdownList">
            <summary>
            Drop down list (non - combo)
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.CheckBox">
            <summary>
            Check box
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.Label">
            <summary>
            String label
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.ComboBox">
            <summary>
            Combo box
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.GenericID">
            <summary>
            Generic id control
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.SectionButton">
            <summary>
            Section button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.IconDisplayer">
            <summary>
            Display an icon in grid cells
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.SearchList">
            <summary>
            A SearchList control is able to present a list of matching values while the user is typing.
            It matches values against the current input string.
            This control type is only supported in single field sections.
            For the WEB-renderer this means the control is bound to server postbacks (via an JavaScript asynchronous callback, AJAX).
            It's an unsupported control type in the WIN-renderer.
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.PageButton">
            <summary>
            Page button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.LineBreak">
            <summary>
            Line break control
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.Ruler">
            <summary>
            Horizontal ruler
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.ButtonSeparator">
            <summary>
            Separator between buttons
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.Filler">
            <summary>
            Filler control
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.Address">
            <summary>
            Address control
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.TimeFromTo">
            <summary>
            Time from to
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.DropdownAction">
            <summary>
            Dropdown control with action triggers
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.Thumbnail">
            <summary>
            Thumbnail
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.FileUpload">
            <summary>
            File upload
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.FileDownload">
            <summary>
            File download
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ControlType.RichTextEditor">
            <summary>
            Rich text editor
            </summary>
            <remarks>Since Platform 3.2</remarks>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SectionType">
            <summary>
            Type of section
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.SingleField">
            <summary>
            A section containing single fields
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Table">
            <summary>
            A table
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Tree">
            <summary>
            A hierarchical tree control
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Common">
            <summary>
            A section that is used in several screens, such as an address tab
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.External">
            <summary>
            A section that contains external data, such as reports, web pages etc.
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Image">
            <summary>
            A graphical image (GIF, JPEG)
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Hint">
            <summary>
            A short help text (in-page tooltip)
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Restriction">
            <summary>
            A single field section that is used to restrict the contents of a table section
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Dialog">
            <summary>
            A dialog box
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Container">
            <summary>
            Invisible container for sub-Sections.  For layout purposes.
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Ruler">
            <summary>
            A ruler that is used to "group" sections of a screen
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.TransferList">
            <summary>
            Two item lists with buttons to transfer items to and from
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.RadioButtonList">
            <summary>
            A list of radio buttons
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.SystemTemplate">
            <summary>
            A browser template
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.WorkflowMap">
            <summary>
            A workflow map
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.TemplateParams">
            <summary>
            A dynamic parameter section for restricting template sections.
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.LastUpdate">
            <summary>
            A section that displays last update and user info for current record
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.ChartSection">
            <summary>
            Chartsection used by Reporting 
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.PivotTable">
            <summary>
            A pivot table section 
            </summary>
            <remarks>Cut from PL2.1, but might be supported in the future</remarks>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.TemplatePivotTable">
            <summary>
            A browser template based pivot table section 
            </summary>
            <remarks>Cut from PL2.1, but might be supported in the future</remarks>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Scheduler">
            <summary>
            A scheduler
            </summary>
            <remarks>Cut from PL3.4, but might be supported in the future</remarks>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Splitter">
            <summary>
            Splitter
            <remarks>Splitter section will only function in winform</remarks>
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Info">
            <summary>
            Data formatted as info
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.HeaderPane">
            <summary>
            Header pane
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Map">
            <summary>
            Map section
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Tab">
            <summary>
            A tab section.
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.DragDropContainer">
            <summary>
            A section supporting rearranging of child sections with drag and drop/resize
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.GaugeSection">
            <summary>
            ChartFX section
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.Document">
            <summary>
            A section hosting a document. Supports images and other mime types. 
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.CustomLayout">
            <summary>
            A section to move and resize subsections 
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.SectionType.GanttChart">
            <summary>
            A section to display gantt chart 
            </summary>
            <remarks>Cut from PL3.4, but might be supported in the future</remarks>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.TransferListDirection">
            <summary>
            The direction of a transfer list operation
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.TransferListDirection.Up">
            <summary>
            Moving up
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.TransferListDirection.Down">
            <summary>
            Moving down
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.TransferListDirection.Left">
            <summary>
            Moving over to left list
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.TransferListDirection.Right">
            <summary>
            Moving over to right list
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.Alignment.NotInUse">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.Alignment.Left">
            <summary>
            Align left
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.Alignment.Right">
            <summary>
            Align right
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.Alignment.Center">
            <summary>
            Align center
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ActionType">
            <summary>
            Definition of predefined buttons/menu commands.
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Clear">
            <summary>
            Clear button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Save">
            <summary>
            Save button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Open">
            <summary>
            Open button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Delete">
            <summary>
            Delete button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.DeleteRow">
            <summary>
            Delete row button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Keep">
            <summary>
            Keep button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Zoom">
            <summary>
            Zoom button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Filter">
            <summary>
            Filter button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.First">
            <summary>
            First button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Next">
            <summary>
            Next button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Previous">
            <summary>
            Previous button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Last">
            <summary>
            Last button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Print">
            <summary>
            Print button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.PrintPreview">
            <summary>
            Print preview button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.TagAll">
            <summary>
            Tag all button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.UnTagAll">
            <summary>
            Remove all tags button
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ActionType.Load">
            <summary>
            Load button
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ScreenRefreshMode">
            <summary>
            Describes the reason why the screen was refreshed
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ScreenRefreshMode.Load">
            <summary>
            The screen is loaded (for the first time or reloaded)
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.ScreenRefreshMode.Clear">
            <summary>
            The screen is cleared
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UIDialogResult">
            <summary>
            Describes user action result for modal dialog
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.DialogButtonCollection">
            <summary>
            Buttons used in modal dialog
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.DataListRequestType">
            <summary>
            Defines the available datalist request types.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SectionTreeNodeAction">
            <summary>
            Defines the available tree node actions.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SectionTransferListAction">
            <summary>
            Defines the available transfer list actions.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.TopGenExtensionEventArgs">
            <summary>
            Base class for all event arguments in TopGenExtension
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.TopGenExtensionEventArgs.CanCancel">
            <summary>
            Can this event be cancelled by extension code? If true then further operation by TopGen on this event can be aborted
            by setting the Cancel property to true.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.TopGenExtensionEventArgs.Cancel">
            <summary>
            Abort further operation by setting this value to true. Remember that if several extensions is registered on the same
            screen, the value of this property when all extensions has processed the event is what counts.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SectionEventArgs">
            <summary>
            Section level TopGen event arguments
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionEventArgs.SectionName">
            <summary>
            The name of the section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionEventArgs.TableName">
            <summary>
            The name of the data table that the section is bound to
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SectionDataEventArgs">
            <summary>
            Section level TopGen event based on current row
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionDataEventArgs.Row">
            <summary>
            The DataRow being processed
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.FieldDataEventArgs">
            <summary>
            Field level TopGen event arguments based on current row
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FieldDataEventArgs.FieldName">
            <summary>
            The name of the field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FieldDataEventArgs.Row">
            <summary>
            The DataRow being processed
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ClearEventArgs">
            <summary>
            Event arguments for the clear event. This is event is triggered by the system at form startup, and every time the user clears the form
            by using the clear button.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ClearEventArgs.ManualClear">
            <summary>
            True if the user has pressed the clear button. False if the clear was triggered by the system.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ElementTypeRequestEventArgs">
            <summary>
            The Office environment wants to retrieve the workflow element type for the current section and the current row, 
            so it's able to create an email with initial content. 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ElementTypeRequestEventArgs.ElementType">
            <summary>
            Returns the proper workflow element type for this section and row.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ActionEventArgs">
            <summary>
            Event arguments for the action event. Click on buttons, links and tools menu for example
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ActionEventArgs.Action">
            <summary>
            Action name
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ApplyEventArgs">
            <summary>
            Event arguments for the apply event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ApplyEventArgs.Valid">
            <summary>
            Is the row valid
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.DeleteRowsEventArgs">
            <summary>
            Event arguments for the delete rows event. One or more row is marked for deletion.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.RowMarkedEventArgs">
            <summary>
            Event arguments for the row marked event.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.RowMarkedEventArgs.RowMarked">
            <summary>
            Gets whether the row is marked or not.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OpenEventArgs">
            <summary>
            Event arguments for the open event. The user presses the open icon.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.MoveItemsEventArgs">
            <summary>
            Event arguments for the move transferlist items event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.MoveItemsEventArgs.Direction">
            <summary>
            The direction the values are moved
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.MoveItemsEventArgs.Values">
            <summary>
            The values that are moved
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OpenRowEventArgs">
            <summary>
            Event arguments for the open row event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.PageIndexChangedEventArgs">
            <summary>
            Event arguments for the open row event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.OneTimePasswordDialogEventArgs">
            <summary>
            Event arguments for the one time password dialog openning
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SwitchTabEventArgs">
            <summary>
            Event arguments for the switch tab event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SwitchTabEventArgs.SourceSection">
            <summary>
            Name of the tab section we come from
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SwitchTabEventArgs.DestinationSection">
            <summary>
            Name of the tab section we go to
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SelectChoiceEventArgs">
            <summary>
            Event arguments for the select event on radiobutton sections
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SelectChoiceEventArgs.GroupName">
            <summary>
            Radio button group name (Section name)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SelectChoiceEventArgs.SelectedValue">
            <summary>
            Value of selected item
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ValidateFieldEventArgs">
            <summary>
            Event arguments for the field validation event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ValidateRowEventArgs">
            <summary>
            Event arguments for the validate row event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.InitializeEventArgs">
            <summary>
            Event arguments for the initialize event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ModelLoadEventArgs">
            <summary>
            Event arguments for the model load event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.LoadEventArgs">
            <summary>
            Event arguments for the load event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SaveEventArgs">
            <summary>
            Event arguments for the save event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.AddRowEventArgs">
            <summary>
            Event arguments for the add row event
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ValueListEventArgs">
            <summary>
            Event arguments for <see cref="T:ACT.Common.Data.IValueDescriptionList"/> requests.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.Cancel">
            <summary>
            Always true, this event can not be cancelled
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.List">
            <summary>
            Get or set the requested list. Originally this will be the list provided by the underlying business logic.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.TableName">
            <summary>
            Table name of the field list request
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.FieldName">
            <summary>
            Field name of the field recieving the list
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.Field">
            <summary>
            Field recieving the list
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.BatchPosition">
            <summary>
            Starting index for the requested batch
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.BatchSize">
            <summary>
            Size of the requested batch
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.Row">
            <summary>
            Current row context (May be null).
            This is null when <see cref="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.FixedListRequest"/> is true.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.TriggeringField">
            <summary>
            The name of the triggering field, if a field triggered the request.
            This is null when <see cref="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.FixedListRequest"/> is true.
            This is null when the dynamic list request comes from changing rows in a table section.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.FixedListRequest">
            <summary>
            True if the request is for a fixed (non context sensitive) list.
            If true, the Row and TriggeringField property is null.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.RequestType">
            <summary>
            Type of list request (Dynamic, Fixed, DescriptionLookup)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.SortHint">
            <summary>
            Hint for how TopGen wants the list sorted.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.FilterType">
            <summary>
            Type of filter that TopGen wants to apply for TypeAhead filter requests.
            </summary>
            <seealso cref="T:ACT.Common.Data.SearchFilterType">SearchFilterType</seealso>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.SearchFilter">
            <summary>
            Filter for the list, to use when the list should be filtered.
            </summary>
            <seealso cref="T:ACT.Common.Data.SearchFilterType">SearchFilterType</seealso>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.HasSearchFilter">
            <summary>
            True if this request should be filtered. The request could still be a request from a TypeAhead control, see the SearchRequest property.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.SearchRequest">
            <summary>
            True if the request is a search and comes from a TypeAhead control.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ValueListEventArgs.Context">
            <summary>
            List request context (Agresso.Data.DataListContext)
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ScreenRefreshedEventArgs">
            <summary>
            Event arguments for the screen refresh event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ScreenRefreshedEventArgs.Mode">
            <summary>
            The state of the screen (cleared or loaded)
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.FillDescriptionsEventArgs">
            <summary>
            Event arguments for the fill descriptions event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FillDescriptionsEventArgs.Data">
            <summary>
            Data that has or should be filled with descriptions.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.DataSchemaValidateEventArgs">
            <summary>
            Event arguments for the data schema validate event.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.FieldSearchPrepareEventArgs">
            <summary>
            Event arguments for the field search event
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.FieldSearchPrepareEventArgs.TransferRowToParameters">
            <summary>
            Helper method to convert the current row values to the search parameters
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FieldSearchPrepareEventArgs.SearchParameters">
            <summary>
            The parameters to pass to the field help dialog
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.FieldSearchSelectEventArgs">
            <summary>
            Event arguments for the field search event
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.FieldSearchSelectEventArgs.TransferSelectedValuesToRow">
            <summary>
            Helper method to convert the current row values to the search parameters
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FieldSearchSelectEventArgs.SelectedValue">
            <summary>
            The selected value from the field help dialog
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FieldSearchSelectEventArgs.SelectedValues">
            <summary>
            The selected values from the field help dialog
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs">
            <summary>
            Event arguments for the system links loaded event
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs.SetChanged">
            <summary>
            Tell the renderer that the links have been changed, else the changes might not be picked up.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs.AddFrameLinkGroup(System.Int32,System.String)">
            <summary>
            Adds a new sestem link group to the frame links group collection
            </summary>
            <param name="groupId"></param>
            <param name="groupOwner">Group owner's name - tab name. If it is empty, frame link group will show in header pane in every screen.</param>
            <returns>New frame link group</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs.AddFieldLinkGroup(System.Int32,System.String)">
            <summary>
            Adds a new sestem link group to the field links group collection
            </summary>
            <param name="groupId"></param>
            <param name="groupOwner">Group owner's name - field name</param>
            <returns>New field link group</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs.AddFieldHelpLinkGroup(System.Int32,System.String)">
            <summary>
            Adds a new sestem link group to the field help links group collection
            </summary>
            <param name="groupId"></param>
            <param name="groupOwner">Group owner's name - field name</param>
            <returns>New field help link group</returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs.Links">
            <summary>
            Expose the system link definition
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs.IsChanged">
            <summary>
            Are the links changed by the UI-controller
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SystemLinkEventArgs.Link">
            <summary>
            The triggering link
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SystemLinkPrepareEventArgs">
            <summary>
            Event arguments for the system link prepare event
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.SystemLinkPrepareEventArgs.TransferRowToParameters">
            <summary>
            This can be called by the UI-controller to move the row values over to the parameters.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SystemLinkPrepareEventArgs.Parameters">
            <summary>
            The parameters we will pass to our target form
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SystemLinkEstablishedEventArgs">
            <summary>
            Event arguments for the system link established event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SystemLinkEstablishedEventArgs.TargetView">
            <summary>
            Returns the context of the view that has been created by the system link request.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SystemLinkInitializeEventArgs">
            <summary>
            Event arguments for the system link initialize event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SystemLinkInitializeEventArgs.SourceView">
            <summary>
            Returns the view that triggered the system link request.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SystemLinkInitializeEventArgs.Parameters">
            <summary>
            The parameters we got from our source form and which we should use to initialize the form (pre-load it).
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SystemLinkInitializeEventArgs.RequestLoad">
            <summary>
            The UI-controller should set this property to false if doesn't want parameter values loaded automatically
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ModalDialogCloseEventArgs">
            <summary>
            Event arguments for the modal dialog close event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ModalDialogCloseEventArgs.Parameters">
            <summary>
            Modal dialog parameters
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ModalDialogCloseEventArgs.SelectedValue">
            <summary>
            Gets or sets the selected value
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ModalDialogActionEventArgs">
            <summary>
            Event arguments for the modal dialog action event.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ModalDialogActionEventArgs.Dialog">
            <summary>
            Dialog definition
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ModalDialogActionEventArgs.Row">
            <summary>
            Current row
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.FileDownloadEventArgs">
            <summary>
            Event arguments for the OnFileDownload events
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FileDownloadEventArgs.File">
            <summary>
            The file to be downloaded to the client.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.FileUploadEventArgs">
            <summary>
            Event arguments for the OnFileUploaded events
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FileUploadEventArgs.FieldName">
            <summary>
            The name of the field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.FileUploadEventArgs.UploadedFile">
            <summary>
            The file uploaded to the page host.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.CalculateCustomSumEventArgs">
            <summary>
            Event arguments for the OnCalculatedCustomSum events
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.CalculateCustomSumEventArgs.SetSum(System.String,System.Double)">
            <summary>
            Overwrites calculated sum
            </summary>
            <param name="field">field name</param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.CalculateCustomSumEventArgs.SetSum(System.String,System.String)">
            <summary>
            Overwrites calculated sum
            </summary>
            <param name="field">field name</param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.CalculateCustomSumEventArgs.SetSum(System.String,System.Int32)">
            <summary>
            Overwrites calculated sum
            </summary>
            <param name="field">field name</param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.CalculateCustomSumEventArgs.SetSum(System.String,System.Int64)">
            <summary>
            Overwrites calculated sum
            </summary>
            <param name="field">field name</param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.CalculateCustomSumEventArgs.GetDoubleSum(System.String)">
            <summary>
            Gets calculated sum as a double
            </summary>
            <param name="field">field name</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.CalculateCustomSumEventArgs.GetStringSum(System.String)">
            <summary>
            Gets calculated sum as a string
            </summary>
            <param name="field">field name</param>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SectionTreeEventArgs">
            <summary>
            Event arguments for the section tree action event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionTreeEventArgs.Action">
            <summary>
            Type of action performed
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionTreeEventArgs.Command">
            <summary>
            Command string of action
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionTreeEventArgs.Node">
            <summary>
            Tree node
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.SectionTransferListEventArgs">
            <summary>
            Event arguments for the section transfer list action event
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionTransferListEventArgs.Action">
            <summary>
            Type of action performed
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionTransferListEventArgs.transferList">
            <summary>
            Transfer list row
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.SectionTransferListEventArgs.Section">
            <summary>
            Section
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.GetFixedListsEventArgs">
            <exclude/>
            <summary>
            Event arguments for the fixed list event (Deprecated)
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.GetDynamicListsEventArgs">
            <exclude/>
            <summary>
            Event arguments for the dynamic list events (Deprecated)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.GetDynamicListsEventArgs.TriggeringField">
            <summary>
            Name of the field that triggered the list request. 
            This is not the field recieving the lists, but the field governing what other lists to fetch.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.GetDynamicListsEventArgs.TriggeringRow">
            <summary>
            The data row containing the triggering field.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.GetDynamicListsEventArgs.Lists">
            <summary>
            The retrieved lists. Manipulate the datatables to change list contents.
            The tables are named 'tablename_fieldname'. This is null until TopGen has fetched the lists
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IDataPosition">
            <summary>
            Interface to the a position a screen contents dataset
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDataPosition.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDataPosition.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDataPosition.SectionName">
            <summary>
            Section name
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDataPosition.RowNumber">
            <summary>
            Row number
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IDecorator">
            <summary>
            IDecorator is used to give hints about how data is visualized by the TopGen renderer. TopGen disregards the decoration unless
            ISection.SupportUIProperties is true. Decorations are only hints, and the renderer decides how it is used.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDecorator.GetColumnHeaderDecoration(System.Data.DataSet,System.String,System.String)">
            <summary>
            Get decoration for a column header. Only appropriate for data that is displayed in a table section.
            </summary>
            <param name="ds">Data set containing table.</param>
            <param name="tableName">Table containing column.</param>
            <param name="columnName">Column to decorate.</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDecorator.GetColumnHeaderDecoration(Agresso.Interface.TopGenExtension.IField)">
            <summary>
            Get decoration for a column header. Only appropriate for data that is displayed in a table section.
            </summary>
            <param name="field">Field definition of column</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDecorator.GetColumnDecoration(System.Data.DataSet,System.String,System.String)">
            <summary>
            Get decoration for a column. Only appropriate for data that is displayed in a table section.
            </summary>
            <param name="ds">Data set containing table.</param>
            <param name="tableName">Table containing column.</param>
            <param name="columnName">Column to decorate.</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDecorator.GetColumnDecoration(Agresso.Interface.TopGenExtension.IField)">
            <summary>
            Get decoration for a column. Only appropriate for data that is displayed in a table section.
            </summary>
            <param name="field">Field definition of column</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDecorator.GetCellDecoration(System.Data.DataSet,System.String,System.String,System.Int32)">
            <summary>
            Get decoration for a cell. Can be used for data that is displayed in both table and single field sections.
            </summary>
            <param name="ds">Data set containing cell.</param>
            <param name="tablename">Table containing cell.</param>
            <param name="columnName">Column of cell.</param>
            <param name="rowNumber">Row number of cell.</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDecorator.GetCellDecoration(Agresso.Interface.TopGenExtension.IField,System.Int32)">
            <summary>
            Get decoration for a cell. Can be used for data that is displayed in both table and single field sections.
            </summary>
            <param name="field">Field definition of data cell</param>
            <param name="rowNumber">Row number of data cell</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDecorator.GetRowDecoration(System.Data.DataRow)">
            <summary>
            Get the decoration for a row, can be used for data that is displayed in tables
            </summary>
            <param name="row"></param>
            <returns></returns>
            <remarks>Since Platform 3.4</remarks>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IColumnHeaderDecoration">
            <summary>
            Decoration of a column header
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IColumnHeaderDecoration.Apply">
            <summary>
            Save decoration changes
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IColumnHeaderDecoration.Colour">
            <summary>
            Text colour
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IDecoration">
            <summary>
            Decoration of a data entity
            <remarks>After you set properties you have to call Apply() to save them</remarks>
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IDecoration.Apply">
            <summary>
            Save the decoration changes
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDecoration.ReadOnly">
            <summary>
            Is read only (default false)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDecoration.Colour">
            <summary>
            Text colour
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDecoration.BackgroundColour">
            <summary>
            Background colour
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDecoration.Font">
            <summary>
            Font info
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IFont">
            <summary>
            Font information of a data entity
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFont.Family">
            <summary>
            Font family (System.FontFamily.ToString())
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFont.Size">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFont.Style">
            <summary>
            Font style (italic, strikethrough..)
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IRowDecoration">
            <summary>
            Decoration of a data row
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IRowDecoration.ZoomReadOnly">
            <summary>
            Get or set if the zoom action disabled
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IRowDecoration.CheckBoxReadOnly">
            <summary>
            Get or set if the mark row action is disabled
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IDialog">
            <summary>
            Simple modal dialog definition.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.Id">
            <summary>
            Unique dialog id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.Title">
            <summary>
            Default dialog title (if not title id)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.TitleId">
            <summary>
            Dialog title id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.Text">
            <summary>
            The dialog text
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.Buttons">
            <summary>
            Dialog buttons to show
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.Result">
            <summary>
            User action result
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.InputText">
            <summary>
            Text entered in the input field by the user
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.InputTextTitle">
            <summary>
            Input field label
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDialog.InputTextTitleId">
            <summary>
            Input field label title id
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IDownloadFile">
            <summary>
            The file to be downloaded
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDownloadFile.MimeType">
            <summary>
            The mimetype for the file
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDownloadFile.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IDownloadFile.OutputStream">
            <summary>
            The binary output to write a file.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IField">
            <summary>
            Represents a field in a page rendered by TopGen
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IField.SetFocus">
            <summary>
            Set focus on this field
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IField.Delete">
            <summary>
            Deletes this instance from the model (and the underlying dataset).
            You can't call this method within the ISection.Fields enumerator
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IField.Validate">
            <summary>
            Trigger standard validation command on this field. The validation is run on the currently selected row.
            </summary>
            <remarks>
            The call will trigger an OnValidatingField / OnValidatedField call on the ACT project. Beware of recursive loops.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Raised when no row is selected or the field type can not be validated</exception>
            <returns>Result of the validation</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IField.Validate(System.Int32)">
            <summary>
            Trigger standard validation command on this field.
            </summary>
            <remarks>
            The call will trigger an OnValidatingField / OnValidatedField call on the ACT project. Beware of recursive loops.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Raised when the field type can not be validated</exception>
            <exception cref="T:System.IndexOutOfRangeException">Raised when no row exist at given index</exception>
            <param name="rowNumber">Row to trigger the validation on</param>
            <returns>Result of the validation</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IField.GetList">
            <summary>
            Get the list of values for this field's dropdown
            </summary>
            <remarks>
            The list is shared between all fields bound to the same table and column
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IField.SetList(ACT.Common.Data.IValueDescriptionList)">
            <summary>
            Set the list of values for this field' dropdown
            </summary>
            <remarks>
            The list is shared between all fields bound to the same table and column
            </remarks>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.Form">
            <summary>
            The form of the field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.Section">
            <summary>
            The section of the field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.FieldId">
            <summary>
            Field id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.FieldName">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.FieldHelpTemplateId">
            <summary>
            Get or set field help browser template to use for field help (will override lookup by name)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.FieldHelpName">
            <summary>
            Get or set name used when looking up field help
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.AttributeId">
            <summary>
            Field attribute id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.Command">
            <summary>
            Command (for buttons)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.DisplayFormat">
            <summary>
            Formatting of the displayed value. For example .4 for a decimalcount of 4
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.Title">
            <summary>
            Field label title
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.TitleId">
            <summary>
            Field label title id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.ControlType">
            <summary>
            Field's control type
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.CustomOptions">
            <summary>
            Custom bflag
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.DisplayType">
            <summary>
            Display data type
            <list type="bullet">
            <item>NotInUse = 0</item>
            <item>String   = 1</item>
            <item>Int      = 2</item>
            <item>Double   = 3</item>
            <item>Date     = 4</item>
            <item>DateTime = 5</item>
            <item>Int64    = 6</item>
            <item>Boolean  = 7</item>
            </list>
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.DisplayCase">
            <summary>
            Display case
            <list type="bullet">
            <item>NotInUse  = 0</item>
            <item>NoCase    = 1</item>
            <item>LowerCase = 2</item>
            <item>UpperCase = 3</item>
            </list>
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.DisplayLength">
            <summary>
            Display  length
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.SequenceNo">
            <summary>
            Sequence number, ordering of this field related to other fields in the same section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.ToolTipId">
            <summary>
            Title number of the tooltip displayed
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.VisualInfo">
            <summary>
            Visual info
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsRestrictionFilter">
            <summary>
            The field is a single field that is used to restrict the contents of a table (as in WinGen)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsReadOnly">
            <summary>
            Is locked
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsHidden">
            <summary>
            Is hidden
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.HasFieldHelp">
            <summary>
            Has field help (F9)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.HasNoLabel">
            <summary>
            Hide the field's label
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.HasSum">
            <summary>
            In a table section, does the column have a sum
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.ShowDescription">
            <summary>
            Show description
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsNotSortable">
            <summary>
            In a table section, is it allowed to sort on this column
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.HasValidation">
            <summary>
            Server roundtrip on validation
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.HasValidationOnLeave">
            <summary>
            Server roundtrip on validation when leaving field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.UsesFullWidth">
            <summary>
            Use the whole width of the section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsLockedWhenOld">
            <summary>
            Locked when value is unchanged since db load
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.HasRelatedFields">
            <summary>
            This field governs the contents of other fields' dropdown list values
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsMandatory">
            <summary>
            Blank values illegal
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.TrigsLoading">
            <summary>
            Trigger a load when this and all other fields with the same attribute has a value
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsKey">
            <summary>
            This is a key field, or one of the key fields in the form
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.ExcludeFromSummary">
            <summary>
            This option is to exclude the field from validation summary
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsNotSearchable">
            <summary>
            In a table section, this column is not possible to search or filter
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.ShowCode">
            <summary>
            Show actual value below if this is a single field dropdown control
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.ShowCodeInTable">
            <summary>
            If the field has set the ShowDescription flagin an editable Table Section, setting this flag will show the code value (with the description as tooltip) in non-editable rows
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.IsManagerSelfService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.ExcludeFromWindowOptions">
            <summary>
            Window Options can not be assigned to field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.HasCustomSum">
            <summary>
            When in a table, the field has a custom sum (calculated by the component)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.ValidateOnValueChoose">
            <summary>
            When a dropdown value changes, fire validation immediatly instead of first tabbing out of the field
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.SearchOnDescription">
            <summary>
            Enable/disable searching on the description for controltype SearchList
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.EscapeIllegalCharacters">
            <summary>
            Replace characters that may cause errors related with script injection prevention
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.DataType">
            <summary>
            The type of the data in the screen contents that this field is bound to
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.Alignment">
            <summary>
            Align field value
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.DataList">
            <summary>
            
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.FieldWidth">
            <summary>
            Get/set width of field.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.Tooltip">
            <summary>
            Get/set tool tip on this field.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IField.WrapTitle">
            <summary>
            Wrap column title in table section
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IFieldCollection">
            <summary>
            A collection of IFields. This is also used to remove and create fields.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFieldCollection.Create(System.String,Agresso.Interface.TopGenExtension.ControlType)">
            <summary>
            Creates a new field and adds it to the collection
            </summary>
            <param name="fieldName"></param>
            <param name="controlType"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFieldCollection.GetAt(System.Int32)">
            <summary>
            Get field at index, ordered by field sequence
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFieldCollection.GetById(System.Int32)">
            <summary>
            Get field by fieldId
            </summary>
            <param name="fieldId"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFieldCollection.GetByName(System.String)">
            <summary>
            Get field by field name
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFieldCollection.IndexOf(Agresso.Interface.TopGenExtension.IField)">
            <summary>
            Get index of field
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFieldCollection.Contains(System.String)">
            <summary>
            Does the collection contain a field with the specified field name?
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFieldCollection.Contains(System.Int32)">
            <summary>
            Does the collection contain a field with the specified id?
            </summary>
            <param name="fieldId"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IFieldCollection.Contains(Agresso.Interface.TopGenExtension.IField)">
            <summary>
            Does the collection contain the specified field?
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFieldCollection.Item(System.String)">
            <summary>
            Same as GetByName
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFieldCollection.Item(System.Int32)">
            <summary>
            Same as GetAt
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFieldCollection.Count">
            <summary>
            Number of fields in collection
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IFormProperties">
            <summary>
            Properties on an IForm
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormProperties.IsDesignMode">
            <summary>
            Returns true if this page model is a designtime model
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormProperties.LazyLoading">
            <summary>
            The renderer will check the key values at page startup and when they have been supplied by the UIController,
            the data will be loaded automatically at startup. To prevent this behavior, set LazyLoading to true.
            A common scenario is a page with multiple comboboxes as key-values. Every combobox could have a legal value at 
            startup. This will trigger a load, which might not be what you want.
            note: with key-values the property KeyColumns is meant and not the collection of IFieldDef.IsKey instances.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormProperties.IsWizard">
            <summary>
            The page will be rendered as a wizard-window, so with next and previous buttons.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormProperties.ClearAfterSave">
            <summary>
            Set this property to true when you want to clear the screen after a successful save
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormProperties.AllowInheritance">
            <summary>
            When an IFieldDef.IsKey field is changed to a value that doesn't exist, a new enitity will be created with values from 
            the previous entity
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormProperties.AutoNumberTabs">
            <summary>
            Automatically number tabs, e.g. 1 - Header, 2 - Details, 3 - Summary
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormProperties.Bflag">
            <summary>
            Programmatic access to the page properties. 
            This property is meant for internal usage only and might disappear from the interface in future releases.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IFormContext">
            <summary>
            Context components/properties associated with a TopGen screen.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormContext.Data">
            <summary>
            Current data (retrieved from the business logic component), all the data in the sections and fields
            in the form is available here.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormContext.Platform">
            <summary>
            Current platform (0: All, 1:Win32, 2:Web, 3:Mobile)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IFormContext.ID">
            <summary>
            ID of the form
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IForm">
            <summary>
            Represents a page rendered by TopGen. Topgen is a stateless application, thus you should not base
            your code on state. Using the events you can abort the "-ing" events by setting Cancel = true.
            Setting Cancel = true on the "-ed" events has no effect because the operation has already been done.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.AddTab(System.String)">
            <summary>
            Add a tab to the form. The section names must be unique.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.RemoveTab(System.String)">
            <summary>
            Remove a tab from the form. The section name must be a tab, not any other section in the form.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.GetSection(System.String)">
            <summary>
            Get section with section name
            </summary>
            <param name="sectionName">Section name</param>
            <returns>ISection found, null if not found</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.GetField(System.String,System.String)">
            <summary>
            Get field with field name in section with section name
            </summary>
            <param name="sectionName">Section name</param>
            <param name="fieldName">Field name</param>
            <returns>IField found, null if not found</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.IsMarked(System.Data.DataRow)">
            <summary>
            Whether a row is marked or not
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.SetMark(System.Data.DataRow)">
            <summary>
            Mark a row
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.ClearMark(System.Data.DataRow)">
            <summary>
            Remove mark
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.ForceRepaint(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Force the TopGen renderer to repaint a section. Do not use unless you have done drastic changes to the
            TopGen definition on other events than the OnModelLoad event.
            <remarks>
            Not all TopGen renderers will respond to this call
            </remarks>
            <param name="section">Section to repaint</param>
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.Open(System.String)">
            <summary>
            Open a new screen.
            </summary>
            <param name="param">Can be either "topgen:menu_id=AB123" or just the menu ID "AB123". To open 'external' data, use "external:MyFile.doc" (used by Reporting).</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.Close">
            <summary>
            Close the screen.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.Save">
            <summary>
            Save the screen data. The UI events is not called.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.Save(System.Boolean)">
            <summary>
            Save the screen data. If <paramref name="fullSave"/> is true, the same events as the user pressing the save button are called.
            Beware of recursion issues if you call Save(true) inside a save handler.
            </summary>
            <param name="fullSave">True to call all UI events, false to just save the data.
            <remarks>If <paramref name="fullSave"/> is true, usage of this method is obsolete. 
            Use <see cref="P:Agresso.Interface.TopGenExtension.IForm.Commands"/> field and its methods instead.</remarks>
            </param>
            <returns>The result of the save operation</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.Clear">
            <summary>
            Clear the screen. The same events as the user pressing the clear button are called. 
            Beware of recursion issues if you call Clear inside a clearing or clearingscreen handler.
            <remarks>This method is obsolete. Use <see cref="P:Agresso.Interface.TopGenExtension.IForm.Commands"/> CreateClearScreenCommand method instead.</remarks>
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.GetList(System.String,System.String)">
            <summary>
            Get list of values used by dropdown fields bound to the specified column
            </summary>
            <param name="tableName">Table containing column</param>
            <param name="fieldName">Column name</param>
            <returns>List, null if no list is set</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.SetList(System.String,System.String,ACT.Common.Data.IValueDescriptionList)">
            <summary>
            Set list of values used by dropdown fields bound to the specified column
            </summary>
            <param name="tableName">Table containing column</param>
            <param name="fieldName">Column name</param>
            <param name="list">List to set</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.GetSelectionItems(System.String,System.String)">
            <exclude/>
            <summary>
            Get the list of selection items for a specific field in a specific table
            </summary>
            <param name="table"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.SetSelectionItems(System.Data.DataSet)">
            <exclude/>
            <summary>
            Set the list of selection items avaiable for the different fields in the form
            </summary>
            <param name="newSelectionItems">Complete dataset</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.GetDataRow(System.String,System.Int32)">
            <exclude/>
            <summary>
            Get DataRow at specified position in the Data dataset
            </summary>
            <param name="sectionName"></param>
            <param name="rowNumber"></param>
            <returns>DataRow, null if not found</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.GetValue(System.String,System.String)">
            <exclude/>
            <summary>
            Get value of single field at specified position
            </summary>
            <param name="sectionName"></param>
            <param name="fieldName"></param>
            <returns>Value, null if not found</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.GetValue(System.String,System.String,System.Int32)">
            <exclude/>
            <summary>
            Get value of table cell at specified position
            </summary>
            <param name="sectionName"></param>
            <param name="fieldName"></param>
            <param name="rowNumber"></param>
            <returns>Value, null if not found</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IForm.GetDataType(System.String,System.String)">
            <exclude/>
            <summary>
            Get the System.Type of the field's data
            </summary>
            <param name="sectionName"></param>
            <param name="fieldName"></param>
            <returns>Type, null if not found</returns>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnInitializing">
            <summary>
            Raised when the form is initializing.
            Can not be aborted
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnInitialized">
            <summary>
            Raised when the form is initialized.
            <remarks>
            Typically you do any adding of extra sections and fields, you do it on the OnModelLoad event.
            Initialized is called only on form startup, whereas OnModelLoad is also called when a new TopGen
            definition is retrieved during the lifetime of a form.
            </remarks>
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnModelLoad">
            <summary>
            Raised whenever a fresh TopGen definition is retrieved from the storage. Add extra sections or fields here.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSelectingChoice">
            <summary>
            Raised when a value is being selected in a radio button list.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSelectedChoice">
            <summary>
            Raised after a value has been selected in a radio button list.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnLoading">
            <summary>
            Raised when the form is loading data.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnLoaded">
            <summary>
            Raised after the form has loaded data
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSaving">
            <summary>
            Raised when the form is saving.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSaved">
            <summary>
            Raised when the form has saved
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnOpening">
            <summary>
            Raised when the user presses the open butto
            Abort by setting Cancel = true;
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnOpened">
            <summary>
            Raised when the user has pressed the open button
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnClearing">
            <summary>
            Raised when the form is clearing.
            Can not be aborted
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnCleared">
            <summary>
            Raised when the form was cleared.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnCallingAction">
            <summary>
            Raised when calling an action, for instance when a button or menu item has been pressed
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnCalledAction">
            <summary>
            Raised after an action was performed
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSwitchingTab">
            <summary>
            Raised when switching tabs.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSwitchedTab">
            <summary>
            Raised after a tabswitch was done
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnApplying">
            <summary>
            Raised when applying changes on a row a row or section.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnApplied">
            <summary>
            Raised when changed were applied
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnAddingRow">
            <summary>
            Raised when adding a row to a tablesection. The row property is null at this point.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnAddedRow">
            <summary>
            Raised after a row was added to a tablesection. The row property is now the added row
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnOpeningRow">
            <summary>
            Raised when a row is opening.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnOpenedRow">
            <summary>
            Raised after a row was opened
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnMovingItems">
            <summary>
            Raised when moving items in a transferlist.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnMovedItems">
            <summary>
            Raised after items were moved in a transferlist
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnValidatingField">
            <summary>
            Raised when validating a field.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnValidatedField">
            <summary>
            Raised when a field was validated
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnValidatingRow">
            <summary>
            Raised when a row is being validated.
            Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnValidatedRow">
            <summary>
            Raised when a row was validated.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnDeletingRows">
            <summary>
            Raised when rows are being deleted
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnDeletedRows">
            <summary>
            Raised when rows where deleted
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnRowMarked">
            <summary>
            Raised when a row is marked and the <see cref="P:Agresso.Interface.TopGenExtension.ISection.OnRowMarked"/> 
            is set to <see langword="true"/>
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnGetValueList">
            <summary>
            Raised when <see cref="T:ACT.Common.Data.IValueDescriptionList"/> are requested.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSearchList">
            <summary>
            Raised when TopGen requests a list for a TypeAhead control.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnValueListMarkAsFixed">
            <summary>
            Raised when a <see cref="T:ACT.Common.Data.IValueDescriptionList"/> is marked.
            Decide here if it should be fixed or dynamic.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnValueListAddNullValue">
            <summary>
            Raised when a <see cref="T:ACT.Common.Data.IValueDescriptionList"/> is given a 
            default null value at the beginning of the list.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnScreenRefreshed">
            <summary>
            Raised when the screen data is refreshed (loaded/cleared). 
            Use this event to update the TopGen definition from the screen data.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnFillDescriptions">
            <summary>
            Raised when TopGen has loaded or refreshed the screen data. TopGen places its field descriptions in columns called
            [field_name]_descr. Use this event to amend or change descriptions.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnDataSchemaValidate">
            <summary>
            Raised when the data structure has potentially been changed after a
            load or clear event. Use this event as a central place to add dynamic structures.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnFieldSearchPrepare">
            <summary>
            Raised just before field help is launched, to give the
            UI-controller a chance to set additional/initial field help parameters.
            The UI-controller can also cancel the field help request.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnFieldSearchSelected">
            <summary>
            Raised just after field help is closed and the user
            selected a row in the field help dialog. This gives the
            UI-controller a chance to copy additional values to the current screen.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSystemLinksLoaded">
            <summary>
            Use this event to manipulate system links.
            At this stage you can't rely on any valid data in the rendering context. 
            The event is called after OnInitialized.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSystemLinkPrepare">
            <summary>
            This event will be fired just before a (system) link is executed.
            It gives the UI-controller a chance to set additional/initial link parameters, which will be
            consumed by the target form, which will receive an OnSystemLinkInitialize.
            The UI-controller can also cancel the link execution.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSystemLinkEstablished">
            <summary>
            This event will be fired after a (system) link has been executed and a modeless target form has been created.
            It gives the UI-controller a chance to communicate with the target form.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSystemLinkInitialize">
            <summary>
            This event will be in the target form of a system link request.
            It gives the UI-controller a chance to load the form based on the parameters received.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnFileDownload">
            <summary>
            This event will be fired when the client requests a file from page host environment.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnFileUploaded">
            <summary>
            This event will be fired when an file has been uploaded to the page host environment.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnModalDialogClosing">
            <summary>
            The renderer notifies the UI-conroller that a dialog has been closed by the user. An example is the field help dialog.        
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnModalDialogClosed">
            <summary>
            This method will be called by the renderer after default processing of the dialog close event. An example is the field help dialog.  
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnModalDialogAction">
            <summary>
            Fired when a button in a simple dialog is clicked. Inspect the dialog definition to get which button was clicked or the user's input.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnCalculatedCustomSum">
            <summary>
            Fired when section sum is calculated.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSectionTreeAction">
            <summary>
            Fired when actions are performed in a tree section.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnSectionTransferListAction">
            <summary>
            Fired when actions are performed in a transfer list section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.Client">
            <summary>
            Current client code
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.MenuId">
            <summary>
            Current menu id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.MenuArgument">
            <summary>
            Argument from the menu item this form was started from.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.UseCase">
            <summary>
            Current business logic component (type Agresso.Types.IUseCase) that the form uses
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.RenderingContext">
            <summary>
            <para>
            Hook to the underlying rendering object. Use of this is not supported.
            This is an object of type "Agresso.TopGen.Common.IRenderingContext".
            </para>
            <para>
            It is exposed to give ACT developers a backdoor to the complete rendering context, 
            in case the methods exposed to ACT does suffice to solve a critical customisation need.
            </para>
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.ViewState">
            <summary>
            Access to the state of the form
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.Parameters">
            <summary>
            Screen parameters
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.Properties">
            <summary>
            Form properties
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.Decorator">
            <summary>
            Interface to a data decorator. This is used to give hints about how data is rendered by TopGen.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.Sections">
            <summary>
            The top level sections. These are rendered as Tabs in the web and winform renderer.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.Menu">
            <summary>
            The topgen menu (tools menu, toolbar and standard menu items)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.ActiveTab">
            <summary>
            The active tab
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.Commands">
            <summary>
            Commands that give possibility to programmatically perform actions
            usually made by user, for example Load, Save, ...
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IForm.Dialogs">
            <summary>
            Access to to access, create and open simple dialogs. When actions are taking in dialogs, you will get the OnModalDialogAction command.
            </summary>
            <seealso cref="E:Agresso.Interface.TopGenExtension.IForm.OnModalDialogAction"/>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnGettingFixedLists">
            <exclude/>
            <summary>
            Raised when getting fixed lists (once per form). Abort by setting Cancel = true
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnGotFixedLists">
            <exclude/>
            <summary>
            Raised when fixed lists are collected.
            Typically if you have added your own fields you want to add your lists here if they do not change later
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnGettingDynamicLists">
            <exclude/>
            <summary>
            Raised when getting lists that can be changed during the lifetime of a form.
            Abort by setting Cancel = true. Fields having the HasRelatedFields property raises the event.
            The name of that field and it's row is available in the event arguments.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.IForm.OnGotDynamicLists">
            <exclude/>
            <summary>
            Raised when dynamic lists are collected.
            Typically if you have added your own fields you want to add your lists here if they depend on the
            state of other fields in the form. The lists fetched are available in the event arguments
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.MenuType">
            <summary>
            Where a menu item should reside
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.MenuType.ToolBar">
            <summary>
            Toolbar menu
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.MenuType.ToolsMenu">
            <summary>
            Tools menu
            </summary>
        </member>
        <member name="F:Agresso.Interface.TopGenExtension.MenuType.HeaderButton">
            <summary>
            Header buttons
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IMenu">
            <summary>
            Holds the tools menu, toolbar and standard action items. Used to create new menu items.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenu.Create(System.String,Agresso.Interface.TopGenExtension.MenuType)">
            <summary>
            Create a new menu item
            </summary>
            <param name="command">Command triggered on click</param>
            <param name="menuType">Where to place the item</param>
            <returns>Item created</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenu.Create(Agresso.Interface.TopGenExtension.IMenuItem,System.String,Agresso.Interface.TopGenExtension.MenuType)">
            <summary>
            Create a new menu item
            </summary>
            <param name="parent">Parent item to create a sub item for</param>
            <param name="command">Command triggered on click</param>
            <param name="menuType">Where to place the item</param>
            <returns>Item created</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenu.GetActionItem(Agresso.Interface.TopGenExtension.ActionType)">
            <summary>
            Get action item (save, open, keep, print preview etc) from the menu.
            </summary>
            <seealso cref="T:Agresso.Interface.TopGenExtension.ActionType"/>
            <param name="actionType">Type of action</param>
            <returns>Item found</returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenu.ToolsMenu">
            <summary>
            Menu items on the tools menu
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenu.Toolbar">
            <summary>
            Menu items on the tool bar
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenu.HeaderButtons">
            <summary>
            Menu items in the header button area
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenu.AllMenuItems">
            <summary>
            All items on the tools menu and the tool bar
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenu.SaveButton">
            <summary>
            The save button
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenu.ClearButton">
            <summary>
            The Clear button
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenu.OpenButton">
            <summary>
            The open button
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IMenuItem">
            <summary>
            IMenuItem, interface to a Tools menu or Toolbar item. For Standard menu items see IActionItem
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenuItem.Delete">
            <summary>
            Delete menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.MenuId">
            <summary>
            Unique id of menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.MenuType">
            <summary>
            Type of menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.Title">
            <summary>
            Title of menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.CustomOptions">
            <summary>
            Custom bflag
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.IconId">
            <summary>
            Icon id of menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.IsReadOnly">
            <summary>
            Gets or sets if this item is enabled
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.IsHidden">
            <summary>
            Gets or sets if this item is hidden
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.IsLocked">
            <summary>
            The item is locked (the item is shown, but the link is disabled)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.IsSubItem">
            <summary>
            This is a sub item of the previous menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.Tooltip">
            <summary>
            Override TooltipId
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.TooltipId">
            <summary>
            Tool tip title id 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.MenuName">
            <summary>
            Name of menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.Form">
            <summary>
            Parent form
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.IsBig">
            <summary>
            Big icon for Ribbon toolbar
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.IsOpenInWinForm">
            <summary>
            If set, open command executes with OnOpening/OnOpenedCommand event in WinForm, instead of default OnLoading/OnLoaded
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItem.Command">
            <summary>
            The command string associated with the current <see cref="T:Agresso.Interface.TopGenExtension.IMenuItem"/>
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IActionItem">
            <summary>
            IActionItem, interface to standard menu items such as Save, Clear and Open
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionItem.MenuName">
            <summary>
            Name of menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionItem.Title">
            <summary>
            Title of menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionItem.IconId">
            <summary>
            Icon id of menu item
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionItem.IsReadOnly">
            <summary>
            Gets or sets if this item is enabled
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionItem.IsHidden">
            <summary>
            Gets or sets if this item is hidden
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionItem.Form">
            <summary>
            Parent form
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IActionItem.Command">
            <summary>
            The command string associated with the current <see cref="T:Agresso.Interface.TopGenExtension.IMenuItem"/>
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IMenuItemCollection">
            <summary>
            Collection of menu items
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenuItemCollection.GetAt(System.Int32)">
            <summary>
            This is indexed by SequenceNo
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenuItemCollection.GetById(System.Int32)">
            <summary>
            Returns the menu item by ItemId
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenuItemCollection.GetByName(System.String)">
            <summary>
            Returns the menu item by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenuItemCollection.GetSubMenuAt(System.Int32,System.Int32)">
            <summary>
            Returns the submenu or null when the item doesn't exist.
            No exception will be thrown when the index is out of range.
            </summary>
            <param name="index"></param>
            <param name="submenuIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenuItemCollection.IndexOf(Agresso.Interface.TopGenExtension.IMenuItem)">
            <summary>
            Returns the index of a menu item. 
            This is indexed by SequenceNo
            </summary>
            <param name="menuItem"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IMenuItemCollection.IndexOf(System.Int32)">
            <summary>
            Returns the index of this menu item.
            This is indexed by SequenceNo
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IMenuItemCollection.Count">
            <summary>
            Number of menu items in the collection
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IParameters">
            <summary>
            Stores the values by name
            The enumerator returns all keys
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IParameters.Clear">
            <summary>
            Clears the collection of keys and values
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IParameters.Add(System.String,System.Object)">
            <summary>
            Adds a new key-value pair
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IParameters.Contains(System.String)">
            <summary>
            Checks if a key consists in the collection.
            </summary>
            <param name="name"></param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IParameters.Remove(System.String)">
            <summary>
            Removes a key and its value from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IParameters.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the System.Collections.ICollection to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IParameters.Keys">
            <summary>
            Returns the keys, sorted.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IParameters.Item(System.String)">
            <summary>
            Gets the value related to a key.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IParameters.Count">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IParameters.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the System.Collections.ICollection
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IParameters.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the System.Collections.ICollection.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IProjectTopGen">
            <summary>
            Customization code must implement this interface
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IProjectTopGen.Initialize(Agresso.Interface.TopGenExtension.IForm)">
            <summary>
            Called when initializing. Never use any properties of the form withing the initialize method.
            Only for registering events.
            </summary>
            <param name="form">The topgen page</param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISection">
            <summary>
            Represents a section in a page rendered by TopGen
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.AddField(System.String)">
            <summary>
            Adds a TextBox field to this section. Same as Fields.Create(fieldName, ControlType.TextBox).
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.AddSection(System.String)">
            <summary>
            Adds a single field sub section to this section. Section name must be unique.
            Same as Sections.Create(sectionName, SectionType.SingleField).
            </summary>
            <param name="sectionName"></param>
            <returns>Added section</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.Delete">
            <summary>
            Deletes this instance from the model (and the underlying dataset).
            You can't call this method within the ISection.Sections or IForm.Sections enumerator
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.GetField(System.String)">
            <summary>
            Get field
            </summary>
            <param name="fieldName">Fieldname</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.GetSelectedDataRow">
            <summary>
            Get the data of the selected row (if tablesection).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.SetSelectedRow(System.Data.DataRow)">
            <summary>
            Set what row is selected. Only works in some renderers.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.ClearSelectedRow">
            <summary>
            Unselect. Only works in some renderers.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.SelectNextRow">
            <summary>
            Move to next row (if tablesection). Only works in some renderers.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.SelectPreviousRow">
            <summary>
            Move to previous row (if tablesection)
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.OpenDialog">
            <summary>
            If section is dialogsection, open it
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.CloseDialog">
            <summary>
            If section is dialogsection and opened, close it
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.ForceRepaint">
            <summary>
            Force repaint of section, do this if you have changed the properties of the section
            and you want it to be immediately repainted by the TopGen renderer. The renderer will repaint the whole tab.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.ActivateTab">
            <summary>
            Activate the tab that this section is on
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.GetTree">
            <summary>
            Get the section tree representation. If the section is not a tree section, an exception will be thrown.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISection.GetTransferList">
            <summary>
            Get the sectiont ransfer list representation. If the section is not a transfer list, an exception will be thrown.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.Form">
            <summary>
            The form of the section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.ParentSection">
            <summary>
            Get the parent section of this section. Null if topsection / tab.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.Fields">
            <summary>
            Get the fields of this section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.Sections">
            <summary>
            Get the child sections of this section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.SectionId">
            <summary>
            Section Id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.ParentId">
            <summary>
            Parent Id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.TabNumber">
            <summary>
            Tab number
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.IsTab">
            <summary>
            return if this is a tab or a section within a tab
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.SectionName">
            <summary>
            Name of the section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.TableName">
            <summary>
            Tablename of the data for this section. The renderer may break if this the table does not exists in the DataSet that
            the TopGen page is bound to.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.SourceSection">
            <summary>
            Name of the section this section is displaying detailed information from
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.EntityAssembly">
            <summary>
            Assembly name of the entities in this section. This property can only be set once, throws InvalidOperation.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.EntityDefinition">
            <summary>
            Class name of the entities in this section. This property can only be set once, throws InvalidaOperation.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.Sorting">
            <summary>
            Whether data in the section should be sorted or not
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.Content">
            <summary>
            Depending on the SectionType. For instance for Image sections this will be the filename of the image.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.Title">
            <summary>
            Title of this section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.SectionType">
            <summary>
            Type of section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.TitleId">
            <summary>
            TitleId of the section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.ContentSize">
            <summary>
            Size of a section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HideSystemButtons">
            <summary>
            Gets or sets whether to hide or show the section system buttons like "Apply" and "Delete"
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.IsMandatory">
            <summary>
            Mark the section as Mandatory by displaying a red star
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.IsReadOnly">
            <summary>
            Gets or sets whether the section is editable or not
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.IsDense">
             <summary>
            Gets or sets a value indicating if dense rendring should be used. Table section only.
             </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.CustomOptions">
            <summary>
            Custom bflag
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HasFilterRow">
            <summary>
            Gets or sets whether the section has a filter row or not. Tablesection only.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HasVerticalSum">
            <summary>
            Gets or sets whether the section has vertical sums. Tablesection only.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HasHorizontalSum">
            <summary>
            Gets or sets whether the section has horizontal sums. Tablesection only.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.AlignFields">
            <summary>
            Align the single fields across the tab
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.AllowAddRows">
            <summary>
            Gets or sets whether rows can be added or not. Tablesection only.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.AllowDeleteRows">
            <summary>
            Gets or sets whether rows can be deleted or not. Tablesection only.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.CanSelectRow">
            <summary>
            Gets or sets whether rows can be selected or not. Tablesection only.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.OnRowMarked">
            <summary>
            Gets or sets whether the <see cref="E:Agresso.Interface.TopGenExtension.IForm.OnRowMarked"/> event should 
            be fired or not when rows are marked.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.ValidateRows">
            <summary>
            Gets or sets whether rows are validated or not
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.IsHidden">
            <summary>
            Gets or sets whether the section is hidden or not
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HasLineNumbers">
            <summary>
            Gets or sets whether the rows have line numbers or not. Tablesection only
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.IsResizable">
            <summary>
            Gets or sets whether the section can be resized or not
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.AlignsHorizontally">
            <summary>
            Align fields horizontally
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.FieldSizeFromEntity">
            <summary>
            FieldSize/DataLength is set from entity definition metadata
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.CanMinimize">
            <summary>
            Can be minimized
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.CanMarkRows">
            <summary>
            Can mark rows. Tablesection only
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HideIcon">
            <summary>
            Hide the section icon
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.UseFilterForLoading">
            <summary>
            If the section has a filter row, use it for loading or not.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.DisableColumnMove">
            <summary>
            The user may not move columns (change column order) in a table section.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.DisableColumnResize">
            <summary>
            The user may not resize columns (change column size) in a table section.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.DisableAutoResizeAllColumns">
            <summary>
            Disable auto resize all columns when a columns is resized
            </summary>
            <remarks>Since Platform 3.3</remarks>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.SupportsUIProperties">
            <summary>
            If set to true, the section's fields will be updated with user interface information from the
            business code.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HasSortButtons">
            <summary>
            If tablesection set whether or not the section has sort buttons.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HideBorder">
            <summary>
            Hide the frame around the section.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.HasZoomButtons">
            <summary>
            A zoom button is added at the beginning of the table section when this property is true.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.ExcludeFromSummary">
            <summary>
            Do not include any fields from this section in the optional summary tab / preview Window.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.ExcludeFromWindowOptions">
            <summary>
            This section has no "Page Setup" in the toolsmenu when true.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.IsMinimized">
            <summary>
            Sets or gets the Minimized state of a section
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.Restriction">
            <summary>
            Restriction on data loaded into screen.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.SupportsDataDecoration">
            <summary>
            The secion supports data decorations, and the business logic sets UI specific properties using decorations.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.DisableMove">
            <summary>
            drag and drop flag - can this control be moved or not
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.DisableResize">
            <summary>
            drag and drop flag - can this control be resized or not
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.DisableDelete">
            <summary>
            drag and drop flag - can this control be deleted or not
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.DisableAddRows">
            <summary>
            For SectionType.Table, disables the add row system button.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISection.DisableDeleteRows">
            <summary>
            For SectionType.Table, disables the delete row system button.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISectionCollection">
            <summary>
            A collection of ISections. This is also used to remove and create fields.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.Create(System.String,Agresso.Interface.TopGenExtension.SectionType)">
            <summary>
            Creates a child section and adds it to this collection
            </summary>
            <param name="sectionName">Name of section to be created</param>
            <param name="sectionType">Type of section to create</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.Create(System.String,Agresso.Interface.TopGenExtension.SectionType,Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Creates a child section and adds it before another section in this collection.
            <remarks>
            This is regarded as a static service to be used before the page is rendered the first time.
            I.e. the OnInitialized event. Especially the WinForm renderer would not expect sections to be
            moved or inserted at other events.
            </remarks>
            </summary>
            <param name="sectionName">Name of section to be created</param>
            <param name="sectionType">Type of section to create</param>
            <param name="placeBefore">Section to place the new section before</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.AddCommonSection(System.String,System.String)">
            <summary>
            Create and add a common section container to this collection, where the contents of another page is inserted
            </summary>
            <param name="sectionName">Name of the section to be created</param>
            <param name="commonSectionName">Common section name. Example: TTS106</param>
            <returns>Common section container</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.AddCommonSection(System.String,System.String,Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Create and add a common section container to this collection, where the contents of another page is inserted
            <remarks>
            This is regarded as a static service to be used before the page is rendered the first time.
            I.e. the OnInitialized event. Especially the WinForm renderer would not expect sections to be
            moved or inserted at other events.
            </remarks>
            </summary>
            <param name="sectionName">Name of the section to be created</param>
            <param name="commonSectionName">Common section name. Example: TTS106</param>
            <param name="placeBefore">Section which the common section should be placed before.</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.MoveSectionUp(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Moves the section one place up
            <remarks>
            This is regarded as a static service to be used before the page is rendered the first time.
            I.e. the OnInitialized event. Especially the WinForm renderer would not expect sections to be
            moved or inserted at other events.
            </remarks>
            </summary>
            <param name="section">Section to move</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.MoveSectionDown(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Moves the section one place down
            <remarks>
            This is regarded as a static service to be used before the page is rendered the first time.
            I.e. the OnInitialized event. Especially the WinForm renderer would not expect sections to be
            moved or inserted at other events.
            </remarks>
            </summary>
            <param name="section">Section to move</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.GetAt(System.Int32)">
            <summary>
            Get section by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.GetById(System.Int32)">
            <summary>
            Get section by section id
            </summary>
            <param name="sectionId"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.GetByName(System.String)">
            <summary>
            Get section by name
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.IndexOf(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Get index of section
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.Contains(System.String)">
            <summary>
            Does the collection contain a section with the specified name
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.Contains(System.Int32)">
            <summary>
            Does the collection contain a section with the specified id
            </summary>
            <param name="sectionId"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISectionCollection.Contains(Agresso.Interface.TopGenExtension.ISection)">
            <summary>
            Does the collection contain the specified section
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionCollection.Item(System.String)">
            <summary>
            Same as GetByName
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionCollection.Item(System.Int32)">
            <summary>
            Same as GetAt
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISectionCollection.Count">
            <summary>
            Numbers of sections in collection
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IUploadedFile">
            <summary>
            Provides access to a file uploaded by a client.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IUploadedFile.SaveAs(System.String)">
            <summary>
            Saves the contents of an uploaded file.
            </summary>
            <param name="fileName"> The name of the saved file.</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IUploadedFile.ContentLength">
            <summary>
            Gets the size of an uploaded file, in bytes.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IUploadedFile.InputStream">
            <summary>
            Gets a System.IO.Stream object that points to an uploaded file to prepare
            for reading the contents of the file.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.IUploadedFile.FileName">
            <summary>
            Gets the fully qualified name of the file on the client.
            The name of the client's file, including the directory path.
            </summary>
        </member>
        <member name="T:ACT.Common.Data.SearchFilterType">
            <summary>
            Describes ways that a <see cref="T:ACT.Common.Data.IValueDescriptionList"/> should match values to be included in its list
            </summary>
        </member>
        <member name="F:ACT.Common.Data.SearchFilterType.CodeFilter">
            <summary>
            Match value only. The code value must start with the filter.
            </summary>
        </member>
        <member name="F:ACT.Common.Data.SearchFilterType.DescriptionFilter">
            <summary>
            Match description only. The description must contain the filter.
            </summary>
        </member>
        <member name="F:ACT.Common.Data.SearchFilterType.CodeDescriptionFilter">
            <summary>
            Match both value and description. The code value must start with the filter, or the description must contain it.
            </summary>
        </member>
        <member name="F:ACT.Common.Data.SearchFilterType.FindByCode">
            <summary>
            Do a unique find by code. The code value must be equal to the filter.
            </summary>
        </member>
        <member name="T:ACT.Common.Data.ValueListSort">
            <summary>
            Possible ways to sort a ValueDescriptionList. The default sort is by description, ascending.
            </summary>
        </member>
        <member name="F:ACT.Common.Data.ValueListSort.DescriptionAscending">
            <summary>
            By description, ascending
            </summary>
        </member>
        <member name="F:ACT.Common.Data.ValueListSort.DescriptionDescending">
            <summary>
            By description, descending
            </summary>
        </member>
        <member name="F:ACT.Common.Data.ValueListSort.ValueAscending">
            <summary>
            By value, ascending
            </summary>
        </member>
        <member name="F:ACT.Common.Data.ValueListSort.ValueDescending">
            <summary>
            By value, descending
            </summary>
        </member>
        <member name="F:ACT.Common.Data.ValueListSort.Unsorted">
            <summary>
            Not sorted (undefined)
            </summary>
        </member>
        <member name="T:ACT.Common.Data.IValueDescriptionPair">
            <summary>
            An entry in a list of value, description pairs. Used in <see cref="T:ACT.Common.Data.IValueDescriptionList"/>.
            </summary>
        </member>
        <member name="P:ACT.Common.Data.IValueDescriptionPair.Value">
            <summary>
            Get or set the value
            </summary>
        </member>
        <member name="P:ACT.Common.Data.IValueDescriptionPair.ValueText">
            <summary>
            Get the value as text
            </summary>
        </member>
        <member name="P:ACT.Common.Data.IValueDescriptionPair.Description">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="T:ACT.Common.Data.IValueDescriptionList">
            <summary>
            <para>
            Interface for lists of code and description pairs. This is used by TopGen to provide
            values in dropdownlists and comboboxes.
            </para>
            <para>
            <see cref="T:ACT.Common.Data.ValueDescriptionListFactory"/> is used to create
            new lists.
            </para>
            </summary>
            <remarks>
            This is a non-unique list of rows. A row is a combination of value (code) and description. 
            For example: "NO" with "Norway" would be an entry for a country list.
            </remarks>
        </member>
        <member name="M:ACT.Common.Data.IValueDescriptionList.Add(System.Object,System.String)">
            <summary>
            Add a key/value pair to the list of rows
            </summary>
            <param name="value"></param>
            <param name="description"></param>
        </member>
        <member name="M:ACT.Common.Data.IValueDescriptionList.RemoveAt(System.Int32)">
            <summary>
            Remove a row from the list
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ACT.Common.Data.IValueDescriptionList.IndexOf(System.Object)">
            <summary>
            Returns index of item with the specified value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ACT.Common.Data.IValueDescriptionList.Count">
            <summary>
            Returns the number of items in the list
            </summary>
        </member>
        <member name="P:ACT.Common.Data.IValueDescriptionList.Item(System.Int32)">
            <summary>
            Returns the entry at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Common.Data.ValueDescriptionListFactory">
            <summary>
            Factory to create new <see cref="T:ACT.Common.Data.IValueDescriptionList"/> instances.
            </summary>
        </member>
        <member name="M:ACT.Common.Data.ValueDescriptionListFactory.Create(System.Type)">
            <summary>
            Create a new <see cref="T:ACT.Common.Data.IValueDescriptionList"/> where the values are of type <paramref name="valueType"/>.
            </summary>
            <param name="valueType">Type of objects in the value column</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Common.Data.ValueDescriptionListFactory.Create``1">
            <summary>
            Create a new <see cref="T:ACT.Common.Data.IValueDescriptionList"/> where the values are of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of objects in the value column</typeparam>
            <returns></returns>
        </member>
        <member name="T:ACT.Common.Data.IValueDescriptionListFactory">
            <exclude/>
            <summary>
            Internally used interface for the factory
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IValueLookupProvider">
            <summary>
            When a component implements this interface, it can be used by the field help user interface as it's datasource.
            </summary>
            <remarks>Use batched interface Agresso.Interface.TopGenExtension.IValueLookupProvider2 instead, since this interface is obsolete</remarks>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IValueLookupProvider.GetFilterColumns">
            <summary>
            Gets filter columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IValueLookupProvider.GetResultSetColumns">
            <summary>
            Gets result columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IValueLookupProvider.GetData(Agresso.Interface.CommonExtension.Data.ColumnDescriptorList,Agresso.Interface.TopGenExtension.IParameters)">
            <summary>
            Get result data set
            </summary>
            <param name="filterColumns"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.IValueLookupProvider2">
            <summary>
            When a component implements this interface, it can be used by the field help user interface as it's datasource.
            This interface supports batching.
            </summary>
            <remarks>Since Platform 3.3</remarks>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IValueLookupProvider2.GetFilterColumns">
            <summary>
            Gets filter columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IValueLookupProvider2.GetResultSetColumns">
            <summary>
            Gets result columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.IValueLookupProvider2.GetData(Agresso.Interface.CommonExtension.Data.ColumnDescriptorList,Agresso.Interface.TopGenExtension.IParameters,System.Int32,System.Int32)">
            <summary>
            Get result data set
            </summary>
            <param name="filterColumns"></param>
            <param name="parameters"></param>
            <param name="startPosition"></param>
            <param name="batchSize"></param>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISystemLink">
            <summary>
            A specific system link specification (asyslinkdetail).
            A link can be a field help link, a field link or a frame link.
            </summary>    
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.GetLabel">
            <summary>
            The label in the user language
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetLabel(System.String)">
            <summary>
            Overrides label with string value
            </summary>
            <param name="label">Label string value</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.GetTooltip">
            <summary>
            The tool tip in the user language
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTooltip(System.String)">
            <summary>
            Overrides tooltip with string value
            </summary>
            <param name="tooltip">Tooltip string value</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetFieldHelpCustomDataSource(System.String,System.String)">
            <summary>
            Call this method if you want a custom field help to be invoked by this link.
            The properties TargetClassName and TargetAssemblyName will be set as the datasource class specification.
            </summary>
            <param name="datasourceClassName"></param>
            <param name="datasourceAssemblyName"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetFieldHelpCustomDataSource(System.String)">
            <summary>
            Call this method if you want a custom field help to be invoked by this link.
            The property TargetId will be set.
            </summary>
            <param name="topGenFrameName"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetFieldHelpDefault(System.Int64)">
            <summary>
            Call this method if you want a custom field help to be invoked by this link.
            The property TargetFieldHelpTemplateId will be set.
            </summary>
            <param name="templateId"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetTopGenCommand(System.String)">
            <summary>
            Call this method if you want a TopGen command to be invoked by this link.
            The property TargetId will be set.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetMenuId(System.String)">
            <summary>
            Call this method if you want a menu id to be invoked by this link.
            The property TargetId will be set.
            </summary>
            <param name="menuId">This is a ";" delimited list where the first entry is a WIN menu item, the 2nd a WEB menu item.</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.GetTargetMenuId(System.Int32)">
            <summary>
            In case we're a menu id target, this method will return the menu id for the requested platform.
            </summary>
            <param name="platform">Current platform (0: All, 1:Win32, 2:Web, 3:Mobile)</param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetSeparator">
            <summary>
            Make this link a separator
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetSubmenu">
            <summary>
            Make this link a submenu. This will happen automatically when you add child items to this link.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetTopGenFrame(System.String)">
            <summary>
            Make this link a TopGen frame target. 
            The TargetId will be set as the TopGen frame name.
            </summary>
            <param name="frameName"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.SetTargetUserControl(System.String,System.String)">
            <summary>
            Make this link to a managed user control. 
            The TargetClassName and TargetAssemblyName will be set as the user control class to create.
            </summary>
            <param name="userControlClassName"></param>
            <param name="userControlAssemblyName"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.GetTargetClass">
            <summary>
            The type of a target class. The value depends on the TargetType, TargetClassName and TargetAsemblyName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.GetMapperClass">
            <summary>
            The type of a mapper class. The value depends on the TargetType, MapperClassName and MapperAsemblyName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLink.Copy">
            <summary>
            Create a copy of all the members, not the child collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.Group">
            <summary>
            Returns the system link group of this link. This is only available when the link is part of a link collection.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.IsRoot">
            <summary>
            Returns true when the link is a top level link.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.ParentLink">
            <summary>
            When this is not a root level link, it has a parent link.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.LinkId">
            <summary>
            The unique link id within the container.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.ParentLinkId">
            <summary>
            The unique parent link id within the container. This is 0 when it's a root link or when its not part of a link collection yet.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.SequenceNo">
            <summary>
            The sequence of the link within the links collection.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.LinkName">
            <summary>
            The identifying link name, which can be used to identify the link in a system link event.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.SupportedPlatforms">
            <summary>
            The platform this link can be rendered on. (0: All, 1:Win32, 2:Web, 3:Mobile)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.LabelId">
            <summary>
            The label.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.TooltipId">
            <summary>
            The tool tip
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.IconId">
            <summary>
            An icon id
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.TargetType">
            <summary>
            This flag determines what kind of link we're supposed to represent. 
            The value depends on the link group we're in, so a field help target can never be part of a frame group!
            Separator = 0
            We're representing a separator menu item. No members are relevant.
            
            Submenu = 1
            We're representing a sub menu. Only the label is relevant
            
            MenuIdTarget = 10
            The target id points to a menu item to launch. 
            
            TopGenFrameTarget = 11
            The target id holds the name of a TopGen screen to launch.
            
            UserControlTarget = 12
            The target class and assembly point to the user control to launch
            
            TopGenCommandTarget = 13
            The target id holds the TopGen action to execute.
            
            FieldHelpDefault = 100
            The target id holds a reference to a template id.
            
            FieldHelpCustomDataSource = 101
            The target class and assembly point to a class that implements Agresso.Data.IDataQueryService.
            The default field help dialog will be launched, but the data will be provided by this target class.
            
            FieldHelpCustomDialog = 102
            The target id points to a TopGen screen name.
            When the target id is empty, the target class and assembly point to a custom user control.        /// 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.TargetId">
            <summary>
            The target id 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.TargetFieldHelpTemplateId">
            <summary>
            Call this method if you want a custom field help to be invoked by this link.
            The properties TargetClassName and TargetAssemblyName will be set as the datasource class specification.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.TargetTopGenCommand">
            <summary>
            Returns the TopGen command in case of a TopGenCommandTarget else it returns null.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.TargetTopGenFrame">
            <summary>
            Returns the TopGen frame name in case of a TopGenFrameTarget else it returns null.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.DialogType">
            <summary>
            Gets or sets the dialog type to use when the link will be executed.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.TargetClassName">
            <summary>
            The name of a target class. The value depends on the TargetType.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.TargetAssemblyName">
            <summary>
            The name of a target assembly. The value depends on the TargetType.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.Parameters">
            <summary>
            Optional parameters to pass to the target 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.MapperClassName">
            <summary>
            The name of a mapper class. The value depends on the TargetType.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.MapperAssemblyName">
            <summary>
            The name of a mapper assembly. The value depends on the TargetType.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.HasSublinks">
            <summary>
            Returns true when the link is a submenu and has child links
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLink.Sublinks">
            <summary>
            Returns a child link. The links are ordered by SequenceNo. 
            This property will always returns a valid collection. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISystemLinkGroup">
            <summary>
            A specific system link group, so the field help links for field "xx" for instance.
            </summary>    
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.FindLink(System.Int32)">
            <summary>
            Fetch system link child by id
            </summary>
            <param name="linkId"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddSeparator(System.Int32,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.Separator"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Separator system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddSubmenu(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.Submenu"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="labelId">Used for providing a label from a database</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Submenu system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddSubmenu(System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.Submenu"/> type and makes it a child of this collection
            Note: For frame links in the Smart Client it's required to use label id. See overload <see cref="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddSubmenu(System.Int32,System.Int32,System.Int32)"/>
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="label">Overrides a label</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Submenu system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddMenuIdTarget(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.MenuIdTarget"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="labelId">Used for providing a label from a database</param>
            <param name="menuId">Points to a manu item to launch</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Menu id target system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddMenuIdTarget(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.MenuIdTarget"/> type and makes it a child of this collection
            Note: For frame links in the Smart Client it's required to use label id. See overload <see cref="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddMenuIdTarget(System.Int32,System.Int32,System.String,System.Int32)"/>
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="label">Overrides a label</param>
            <param name="menuId">Points to a manu item to launch</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Menu id target system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddTopGenFrameTarget(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.TopGenFrameTarget"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="labelId">Used for providing a label from a database</param>
            <param name="frameName">Name of a frame to launch</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Top Gen frame target system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddTopGenFrameTarget(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.TopGenFrameTarget"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="label">Overrides a label</param>
            <param name="frameName">Name of a frame to launch</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Top Gen frame target system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddUserControlTarget(System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.UserControlTarget"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="labelId">Used for providing a label from a database</param>
            <param name="userControlClassName">Class name pointing to the user control to launch</param>
            <param name="userControlAsemblyName">Asembly name pointing to the user control to launch</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>User control target system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddUserControlTarget(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.UserControlTarget"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="label">Overrides a label</param>
            <param name="userControlClassName">Class name pointing to the user control to launch</param>
            <param name="userControlAsemblyName">Asembly name pointing to the user control to launch</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>User control target system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddTopGenCommandTarget(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.TopGenCommandTarget"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="labelId">Used for providing a label from a database</param>
            <param name="command">Top Gen command to be invoked</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Top Gen command system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddTopGenCommandTarget(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.TopGenCommandTarget"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="label">Overrides a label</param>
            <param name="command">Top Gen command to be invoked</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Top Gen command system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddFieldHelpDefault(System.Int32,System.Int32,System.Int64,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.FieldHelpDefault"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="labelId">Used for providing a label from a database</param>
            <param name="templateId">Field help template id</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Field help default system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddFieldHelpDefault(System.Int32,System.String,System.Int64,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.FieldHelpDefault"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="label">Overrides a label</param>
            <param name="templateId">Field help template id</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Field help default system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddFieldHelpCustomDialog(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.FieldHelpCustomDialog"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="labelId">Used for providing a label from a database</param>
            <param name="frameName">Top Gen frame name</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Field help custom dialog system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddFieldHelpCustomDialog(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Creates a new system link of a <see cref="F:Agresso.Interface.TopGenExtension.LinkTargetType.FieldHelpCustomDialog"/> type and makes it a child of this collection
            <remarks>When it is needed to set more parameters, use the Links.Add() method</remarks>
            </summary>
            <param name="linkId"></param>
            <param name="label">Overrides a label</param>
            <param name="frameName">Top Gen frame name</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Field help custom dialog system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddFieldHelpProvider``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new system link from a datasource
            </summary>
            <typeparam name="T">The type of ACT data provider</typeparam>
            <param name="linkId"></param>
            <param name="labelId">Used for providing a label from a database</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Field help custom data source system link</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroup.AddFieldHelpProvider``1(System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new system link from a datasource
            </summary>
            <typeparam name="T">The type of ACT data provider</typeparam>
            <param name="linkId"></param>
            <param name="label">Overrides a label</param>
            <param name="sequenceNo">The sequence of the link within the links collection. Default value is 0.</param>
            <returns>Field help custom data source system link</returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroup.Container">
            <summary>
            The header definition of this group
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroup.LinkGroupId">
            <summary>
            The unique group id within the SystemLinkContainer. 
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroup.GroupType">
            <summary>
            Defines the type of link group:
            
            FrameLinkGroup (0) 
            Frame level group, where the group owner specifies the tab name. Group owner "" are frame level links.
            
            FieldLinkGroup (10)
            Field level links, where the group owner specifies the field name.
            
            FieldHelpGroup (20)
            Field help links, where the group owner specifies the field name
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroup.GroupOwner">
            <summary>
            Can be blank for frame level links, or a legal tab name.
            For field level links this points to the field name.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroup.HasLinks">
            <summary>
            Returns true if there is any child links
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroup.Links">
            <summary>
            Returns a child link. The links are ordered by SequenceNo
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISystemLinkContainer">
            <summary>
            Lightweight container for holding all the system defined links for a TopGen frame.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkContainer.FindLink(System.Int32)">
            <summary>
            Gets the system link by it's link id.
            </summary>
            <param name="linkDetailId">The unique id of the link detail</param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkContainer.FrameName">
            <summary>
            Name of the frame this link definition belongs to
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkContainer.LinkHeaderId">
            <summary>
            Key of this system link definition. This is a system wide unique key.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkContainer.FrameLinks">
            <summary>
            All the frame links defined.
            To get a proper view for a tab frame, you should query the frame links with the tab name.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkContainer.FieldLinks">
            <summary>
            All the field links defined
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkContainer.FieldHelpLinks">
            <summary>
            All the field help links defined
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection">
            <summary>
            A collection of system link groups of the same type, so a field help link group collection for instance.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.Remove(System.String)">
            <summary>
            Removes the group from the collection 
            </summary>
            <param name="groupOwner"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.Add(System.Int32,System.String)">
            <summary>
            Adds a group to the collection
            </summary>
            <param name="linkGroupId"></param>
            <param name="groupOwner"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.FindLink(System.Int32)">
            <summary>
            Find a link in this group
            </summary>
            <param name="linkId"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.Container">
            <summary>
            The parent container.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.GroupType">
            <summary>
            The group type
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.Count">
            <summary>
            The number of groups in this collection
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.Item(System.String)">
            <summary>
            Returns the group with the specified name
            </summary>
            <param name="groupOwner"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.GroupOwners">
            <summary>
            Get a list of group names
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkGroupCollection.Groups">
            <summary>
            Gets all the groups defined in this collection
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.ISystemLinkCollection">
            <summary>
            A collection of system detail links.
            </summary>    
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkCollection.Add(Agresso.Interface.TopGenExtension.ISystemLink)">
            <summary>
            Adds a child link. The links are ordered by SequenceNo.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkCollection.Add(System.Int32,System.String,System.Int32,System.Int32,System.Int32,Agresso.Interface.TopGenExtension.LinkTargetType)">
            <summary>
            Creates a new system link and makes it a child of this collection
            </summary>
            <param name="linkId"></param>
            <param name="linkName"></param>
            <param name="sequenceNo"></param>
            <param name="labelId"></param>
            <param name="toolTipId"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.ISystemLinkCollection.Sort">
            <summary>
            Explicitly sorts the collection. There is no need to call this method explicitly,
            it's used by the framework.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.ISystemLinkCollection.Item(System.Int32)">
            <summary>
            Returns a child link. The links are ordered by SequenceNo
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.SystemLinkExtension.AddFieldGroup(Agresso.Interface.TopGenExtension.IField,System.Int32,Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs)">
            <summary>
            Adds a new system link group to the field group collection for the field
            </summary>
            <param name="field">Field that the group belongs to</param>
            <param name="groupId"></param>
            <param name="e">Event argument</param>
            <returns>New field system link group </returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.SystemLinkExtension.AddFieldHelpGroup(Agresso.Interface.TopGenExtension.IField,System.Int32,Agresso.Interface.TopGenExtension.SystemLinksLoadedEventArgs)">
            <summary>
            Adds a new system link group to the field help group collection for the field
            </summary>
            <param name="field">Field that the group belongs to</param>
            <param name="groupId"></param>
            <param name="e">Event argument</param>
            <returns>New field help system link group </returns>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.TopGenAttribute">
            <summary>
            Mark your class as a TopGenExtension
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.TopGenAttribute.#ctor(System.String)">
            <summary>
            Mark your class as a TopGenExtension
            </summary>
            <param name="funcName">Function name, for example TSO011</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.TopGenAttribute.#ctor(System.String,System.String)">
            <summary>
            Mark your class as a TopGenExtension
            </summary>
            <param name="funcName">Function name, for example TSO011</param>
            <param name="menuId">Menu id</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.TopGenAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Mark your class as a TopGenExtension
            </summary>
            <param name="funcName">Function name, for example TSO011</param>
            <param name="menuId">Menu id</param>
            <param name="sysSetUpCode">System setup code</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.TopGenAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Mark your class as a TopGenExtension
            </summary>
            <param name="funcName">Function name, for example TSO011</param>
            <param name="menuId">Menu id</param>
            <param name="sysSetUpCode">System setup code</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.TopGenAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Mark your class as a TopGenExtension
            </summary>
            <param name="funcName">Function name, for example TSO011</param>
            <param name="menuId">Menu id</param>
            <param name="sysSetUpCode">System setup code</param>
            <param name="description">Description</param>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.TopGenAttribute.FuncName">
            <summary>
            The function name of the form. Corresponds to the IForm.ID
            A wildcard '*' is also allowed which means this project will be initialized regardless of the FuncName.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.TopGenAttribute.MenuId">
            <summary>
            Menu if of the form. Corresponds to the IForm.MenuId
            A wildcard '*' is also allowed which means this project will be initialized regardless of the MenuId.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.TopGenAttribute.SysSetUpCode">
            <summary>
            System setup code.
            A wildcard '*' is also allowed which means this project will be initialized regardless of the SysSetupCode.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.TopGenAttribute.Description">
            <summary>
            Description of the project
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnCreateStructureEventHandler">
            <summary>
            Event handler for create structure events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnCreateNewEventHandler">
            <summary>
            Event handler for create new events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnSelectDataEventHandler">
            <summary>
            Event handler for select data event args
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnValidateDataEventHandler">
            <summary>
            Event arguments for data validation events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnValidateRowEventHandler">
            <summary>
            Event arguments for row validation events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnValidateCellEventHandler">
            <summary>
            Event arguments for cell validation events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnSaveDataEventHandler">
            <summary>
            Event arguments for save events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnGetListBoxesEventHandler">
            <summary>
            Event arguments for radio button and transferlist creation events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnAddDataRowEventHandler">
            <summary>
            Event arguments for add row events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnDeleteDataRowsEventHandler">
            <summary>
            Event arguments for delete row events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnGetFixedListEventHandler">
            <summary>
            Event arguments for fixed list retrieval events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.OnGetDynamicListsEventHandler">
            <summary>
            Event arguments for dynamic list retrieval events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.UseCaseEventArgs">
            <summary>
            Base class for all UseCase event arguments
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.UseCaseEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseEventArgs.Client">
            <summary>
            Client or company code
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseEventArgs.SecurityId">
            <summary>
            Security id (menu id for logic initiated from TopGen pages)
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.UseCaseDataEventArgs">
            <summary>
            Base class for all UseCase event arguments that expect a DataSet to be used or filled
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.UseCaseDataEventArgs.#ctor(System.String,System.String,System.Data.DataSet)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseDataEventArgs.Data">
            <summary>
            Data provided by UseCase logic
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseDataEventArgs.InternalData">
            <summary>
            Internally accessible DataSet property (settable)
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.CreateStructureEventArgs">
            <summary>
            Arguments for a create structure request
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.CreateStructureEventArgs.#ctor(System.String,System.String,System.Data.DataSet)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.CreateStructureEventArgs.Data">
            <summary>
            Get or set the data for the create structure request
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.CreateNewEventArgs">
            <summary>
            Arguments for a create new request
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.CreateNewEventArgs.#ctor(System.String,System.String,System.Data.DataSet)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data</param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.SelectDataEventArgs">
            <summary>
            Arguments for the select request (abstract)
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectDataEventArgs.#ctor(System.String,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data</param>
            <param name="tables">List of tables to restric the request to</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectDataEventArgs.GetWhereClause">
            <summary>
            Where clause for the select statement. This is constructed based on the request from TopGen when key fields are filled out
            or when loading in a restriction section. You can use this with Agresso.Interface.CommonExtension to fill data into
            the Data property the event arguments
            </summary>
            <returns>Where clause</returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectDataEventArgs.GetWhereClause(System.String)">
            <summary>
            Where clause for the select statement. This is constructed based on the request from TopGen when key fields are filled out
            or when loading in a restriction section. You can use this with Agresso.Interface.CommonExtension to fill data into
            the Data property the event arguments
            </summary>
            <param name="prefix">Table prefix that will be added to all columns in the where</param>
            <returns>Where clause</returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SelectDataEventArgs.TablesRestricted">
            <summary>
            If true, only the tables specified in the Tables is expected to be filled
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SelectDataEventArgs.Tables">
            <summary>
            If TablesRestricted is true, get a list of the tables that the caller expect to be filled.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.ValidateDataEventArgs">
            <summary>
            Arguments for the data valdation requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.ValidateDataEventArgs.#ctor(System.String,System.String,System.Data.DataSet)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data to validate</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.ValidateDataEventArgs.Valid">
            <summary>
            Get or set if the Data is valid
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.ValidateRowEventArgs">
            <summary>
            Arguments for data row validation requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.ValidateRowEventArgs.#ctor(System.String,System.String,System.Data.DataSet,System.Data.DataRow)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data to validate</param>
            <param name="row">Data row to validate</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.ValidateRowEventArgs.Row">
            <summary>
            Row to validate
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.ValidateCellEventArgs">
            <summary>
            Arguments for cell / field vaidation requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.ValidateCellEventArgs.#ctor(System.String,System.String,System.Data.DataSet,System.Data.DataRow,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data to validate</param>
            <param name="row">Data row to validate</param>
            <param name="columnName">Column to validate</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.ValidateCellEventArgs.ColumnName">
            <summary>
            Column to validate
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.SaveDataEventArgs">
            <summary>
            Arguments for save requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SaveDataEventArgs.#ctor(System.String,System.String,System.Data.DataSet)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data to validate</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SaveDataEventArgs.Saved">
            <summary>
            Get or set if the Data was saved
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.GetListBoxesEventArgs">
            <summary>
            Arguments for transfer list and radiobutton requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.GetListBoxesEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.GetListBoxesEventArgs.CreateTransferTable(System.String)">
            <summary>
            Create (or get if created) a DataTable that can contain transfer list data for TopGen
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.GetListBoxesEventArgs.CreateRadioButtonTable(System.String)">
            <summary>
            Create (or get if created) a DataTable that can contain radio button list data for TopGen
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.GetListBoxesEventArgs.ListBoxes">
            <summary>
            DataSet containing list boxes (transfer lists and radiobuttons).
            May be null if no list data has been created.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.AddDataRowEventArgs">
            <summary>
            Arguments for add row requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.AddDataRowEventArgs.#ctor(System.String,System.String,System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data</param>
            <param name="tableName">Name of the table to add row to</param>
            <param name="parent">Parent row (may be null)</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.AddDataRowEventArgs.GetDefaultValueForType(System.Type)">
            <summary>
            Get defalut value for a column type.
            </summary>
            <param name="type">A system type</param>
            <returns>Default value for this type</returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.AddDataRowEventArgs.ParentRow">
            <summary>
            Parent row (may be null)
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.AddDataRowEventArgs.NewRow">
            <summary>
            Added row
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.AddDataRowEventArgs.TableName">
            <summary>
            Name of table that the row was added to
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.DeleteDataRowEventArgs">
            <summary>
            Arguments fro delete rows requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.DeleteDataRowEventArgs.#ctor(System.String,System.String,System.Data.DataSet,System.String,System.Data.DataRow[])">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="ds">Data</param>
            <param name="tableName">Name of table that the rows belong to</param>
            <param name="rowsToBeDeleted">An array containing the rows to be deleted</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.DeleteDataRowEventArgs.Cancel">
            <summary>
            If set to true, then you have to provide your own way of deleting the rows.
            Default set to false, and default implementation of cascading delete will be performed.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.DeleteDataRowEventArgs.TableName">
            <summary>
            Name of table that the rows belong to
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.DeleteDataRowEventArgs.RowsToBeDeleted">
            <summary>
            An array containing the rows to be deleted
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs">
            <summary>
            Event arguments for when lists are requested
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.List">
            <summary>
            Get or set the requested list. Originally this will be the list provided by the underlying business logic.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.TableName">
            <summary>
            Table name of the field list request
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.FieldName">
            <summary>
            Field name of the field list request
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.BatchPosition">
            <summary>
            Starting index for the requested batch
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.BatchSize">
            <summary>
            Size of the requested batch
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.FixedListRequest">
            <summary>
            True if the request is for a fixed (non context sensitive) list.
            If true, the Row property is null.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.Row">
            <summary>
            Current row context (May be null).
            This is null when <see cref="P:Agresso.Interface.TopGenExtension.UseCase.UseCaseGetValueListEventArgs.FixedListRequest"/> is true.
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.UseCaseFillDescriptionEventArgs">
            <summary>
            Event arguments for when descriptions are to be filled
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.GetFixedListEventArgs">
            <summary>
            Arguments for fixed list requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.GetFixedListEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="table">Table for list request</param>
            <param name="column">Column for list request</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.GetFixedListEventArgs.TableName">
            <summary>
            Name of table that the list request is for
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.GetFixedListEventArgs.ColumnName">
            <summary>
            Name of column that the list request is for
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.GetFixedListEventArgs.List">
            <summary>
            Get or set the list for table TableName and column ColumnName
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.GetDynamicListsEventArgs">
            <summary>
            Arguments for dynamic list requests
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.GetDynamicListsEventArgs.#ctor(System.String,System.String,System.Data.DataRow,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="client">Client code</param>
            <param name="securityId">Security / menu id</param>
            <param name="row">Row for the dynamic lists</param>
            <param name="trigger">Field triggering the dynamic list request</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.GetDynamicListsEventArgs.Row">
            <summary>
            Row that needs the lists
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.GetDynamicListsEventArgs.TriggeringField">
            <summary>
            Field on Row that trigger the list request (in TopGen definition the field has .HasRelatedFields = true).
            When this is null, the request is for all values (initial state) of the lists.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.GetDynamicListsEventArgs.Lists">
            <summary>
            Collection where you add the dynamic lists
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.IProjectUseCase">
            <summary>
            A Use Case project is the business logic for new or custom TopGen screens.
            It will be used in conjuction with a IProjectTopGen for user interface logic and
            a custom TopGen definition.
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.IProjectUseCase.Initialize(Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents)">
            <summary>
            Called when initializing. IUseCaseEvents will raise business logic events that is used
            by TopGen.
            <remarks>
            Almost all IProjectUseCases will have to provide a handler for the CreateStructure event to
            make a custom TopGen sceen work.
            </remarks>
            </summary>
            <param name="events"></param>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents">
            <summary>
            Events for the business logic part of a TopGen page. This interface is used when creating new TopGen pages using
            ACT, with an Agresso version independent business logic layer.
            <remarks>
            Used in combination with a custom TopGen definition and an IProjectTopGen where no IUseCase or IUIController assembly is specified
            </remarks>
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnCreateStructure">
            <summary>
            Raised when a new data structure is needed
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnCreateNew">
            <summary>
            Raised when a new entry needs to be added. This is called when a TopGen page opens.
            <remarks>
            In TopGen, all single field sections without source section need to have one row.
            </remarks>
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnSelect">
            <summary>
            Raised when data is to be loaded from the underlying storage. The event arguments contain a suggested where clause.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnValidateRow">
            <summary>
            Raised when a row needs to be validated. This is not raised before save.
            <remarks>In TopGen the sections needs to have ValidateRow = true for this event to fire</remarks>
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnValidateCell">
            <summary>
            Raised when you leave a field in the TopGen page. This is not before save.
            <remarks>Fields needs to have HasValidation = true for this event to fire</remarks>
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnSave">
            <summary>
            Raised when data is to be saved
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnGetListBoxes">
            <summary>
            Raised when a TopGen page opens to get the structure of tranfer lists and radiobuttons.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnAddRow">
            <summary>
            Raised when rows are added in TopGen pages with grids
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnDeleteRows">
            <summary>
            Raised when rows are Deleted in TopGen pages with grids
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnGetValueList">
            <summary>
            Raised when fixed or dynamic lists are requested in TopGen pages
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnFillDescriptions">
            <summary>
            Raised when TopGen asks for descriptions after a load
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.ID">
            <summary>
            Name of the TopGen page triggering the UseCase events
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnValidate">
            <summary>
            Raised when all data needs to be validated. This is before a save.
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnGetDynamicLists">
            <exclude/>
            <summary>
            Raised when a row may need update of dynamic selection lists
            </summary>
        </member>
        <member name="E:Agresso.Interface.TopGenExtension.UseCase.IUseCaseEvents.OnGetFixedList">
            <exclude/>
            <summary>
            Raised when a fixed list is needed
            <remarks></remarks>
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.ISelectionList">
            <summary>
            Interface to a list of values and descriptions that is used to provide lists to TopGen
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.ISelectionList.GetValue(System.Int32)">
            <summary>
            Get value at specified index of the list
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.ISelectionList.GetDescription(System.Int32)">
            <summary>
            Get description at specified index of the list
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.ISelectionList.TableName">
            <summary>
            Table that the list is for
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.ISelectionList.ColumnName">
            <summary>
            Column that the list is for
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.ISelectionList.ValueType">
            <summary>
            Type of value part of the list
            <remarks>String is common</remarks>
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.ISelectionList.Count">
            <summary>
            Number of elements in the list
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1">
            <summary>
            Selection list items for TopGen
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="table">The table that the list is for</param>
            <param name="column">The column that the list is for</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.Add(`0,System.String)">
            <summary>
            Add a new value and desciption to the list
            </summary>
            <param name="value"></param>
            <param name="description"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.Remove(System.Int32)">
            <summary>
            Remove value and description at specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.GetValue(System.Int32)">
            <summary>
            Get value at specified index of the list
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.Agresso#Interface#TopGenExtension#UseCase#ISelectionList#GetValue(System.Int32)">
            <summary>
            Get value at specified index of the list
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.GetDescription(System.Int32)">
            <summary>
            Get description at specified index of the list
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.Values">
            <summary>
            Enumerate values
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.Descriptions">
            <summary>
            Enumerate descriptions
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.ValueType">
            <summary>
            Type of value part of the list
            <remarks>String is common</remarks>
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.Count">
            <summary>
            Number of elements in the list
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.TableName">
            <summary>
            Table that the list is for
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.SelectionList`1.ColumnName">
            <summary>
            Column that the list is for
            </summary>
        </member>
        <member name="T:Agresso.Interface.TopGenExtension.UseCase.TopGenUseCaseAttribute">
            <summary>
            Mark you class as a UseCase implementation
            <remarks>
            Only one UseCase implementation for each TopGen page name is allowed by ACT setup.
            You can not have different UseCase implementations for a custom page based
            on menu id, system setup code or similar.
            </remarks>
            </summary>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.TopGenUseCaseAttribute.#ctor(System.String,System.String)">
            <summary>
            Mark you class as a UseCase implementation
            </summary>
            <param name="funcName">
            Function name / TopGen page name of the custom TopGen page. For example TUK001.
            Wildcards is not allowed</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Agresso.Interface.TopGenExtension.UseCase.TopGenUseCaseAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Mark you class as a UseCase implementation
            </summary>
            <param name="funcName">
            Function name / TopGen page name of the custom TopGen page. For example TUK001.
            Wildcards is not allowed</param>
            <param name="description">Description</param>
            <param name="sequenceNo">Sets the default load order</param>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.TopGenUseCaseAttribute.FuncName">
            <summary>
            Function name / TopGen page name of the custom TopGen page. For example TUK001.
            Wildcards is not allowed.
            </summary>
        </member>
        <member name="P:Agresso.Interface.TopGenExtension.UseCase.TopGenUseCaseAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
    </members>
</doc>
